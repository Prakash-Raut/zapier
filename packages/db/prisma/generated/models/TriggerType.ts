/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `TriggerType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model TriggerType
 *
 */
export type TriggerTypeModel =
	runtime.Types.Result.DefaultSelection<Prisma.$TriggerTypePayload>;

export type AggregateTriggerType = {
	_count: TriggerTypeCountAggregateOutputType | null;
	_min: TriggerTypeMinAggregateOutputType | null;
	_max: TriggerTypeMaxAggregateOutputType | null;
};

export type TriggerTypeMinAggregateOutputType = {
	id: string | null;
	name: string | null;
	image: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type TriggerTypeMaxAggregateOutputType = {
	id: string | null;
	name: string | null;
	image: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type TriggerTypeCountAggregateOutputType = {
	id: number;
	name: number;
	image: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type TriggerTypeMinAggregateInputType = {
	id?: true;
	name?: true;
	image?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type TriggerTypeMaxAggregateInputType = {
	id?: true;
	name?: true;
	image?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type TriggerTypeCountAggregateInputType = {
	id?: true;
	name?: true;
	image?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type TriggerTypeAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which TriggerType to aggregate.
	 */
	where?: Prisma.TriggerTypeWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of TriggerTypes to fetch.
	 */
	orderBy?:
		| Prisma.TriggerTypeOrderByWithRelationInput
		| Prisma.TriggerTypeOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.TriggerTypeWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` TriggerTypes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` TriggerTypes.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned TriggerTypes
	 **/
	_count?: true | TriggerTypeCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: TriggerTypeMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: TriggerTypeMaxAggregateInputType;
};

export type GetTriggerTypeAggregateType<T extends TriggerTypeAggregateArgs> = {
	[P in keyof T & keyof AggregateTriggerType]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateTriggerType[P]>
		: Prisma.GetScalarType<T[P], AggregateTriggerType[P]>;
};

export type TriggerTypeGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.TriggerTypeWhereInput;
	orderBy?:
		| Prisma.TriggerTypeOrderByWithAggregationInput
		| Prisma.TriggerTypeOrderByWithAggregationInput[];
	by: Prisma.TriggerTypeScalarFieldEnum[] | Prisma.TriggerTypeScalarFieldEnum;
	having?: Prisma.TriggerTypeScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: TriggerTypeCountAggregateInputType | true;
	_min?: TriggerTypeMinAggregateInputType;
	_max?: TriggerTypeMaxAggregateInputType;
};

export type TriggerTypeGroupByOutputType = {
	id: string;
	name: string;
	image: string;
	createdAt: Date;
	updatedAt: Date;
	_count: TriggerTypeCountAggregateOutputType | null;
	_min: TriggerTypeMinAggregateOutputType | null;
	_max: TriggerTypeMaxAggregateOutputType | null;
};

type GetTriggerTypeGroupByPayload<T extends TriggerTypeGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<TriggerTypeGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof TriggerTypeGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], TriggerTypeGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], TriggerTypeGroupByOutputType[P]>;
			}
		>
	>;

export type TriggerTypeWhereInput = {
	AND?: Prisma.TriggerTypeWhereInput | Prisma.TriggerTypeWhereInput[];
	OR?: Prisma.TriggerTypeWhereInput[];
	NOT?: Prisma.TriggerTypeWhereInput | Prisma.TriggerTypeWhereInput[];
	id?: Prisma.StringFilter<"TriggerType"> | string;
	name?: Prisma.StringFilter<"TriggerType"> | string;
	image?: Prisma.StringFilter<"TriggerType"> | string;
	createdAt?: Prisma.DateTimeFilter<"TriggerType"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"TriggerType"> | Date | string;
	triggers?: Prisma.TriggerListRelationFilter;
};

export type TriggerTypeOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	triggers?: Prisma.TriggerOrderByRelationAggregateInput;
};

export type TriggerTypeWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.TriggerTypeWhereInput | Prisma.TriggerTypeWhereInput[];
		OR?: Prisma.TriggerTypeWhereInput[];
		NOT?: Prisma.TriggerTypeWhereInput | Prisma.TriggerTypeWhereInput[];
		name?: Prisma.StringFilter<"TriggerType"> | string;
		image?: Prisma.StringFilter<"TriggerType"> | string;
		createdAt?: Prisma.DateTimeFilter<"TriggerType"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"TriggerType"> | Date | string;
		triggers?: Prisma.TriggerListRelationFilter;
	},
	"id"
>;

export type TriggerTypeOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.TriggerTypeCountOrderByAggregateInput;
	_max?: Prisma.TriggerTypeMaxOrderByAggregateInput;
	_min?: Prisma.TriggerTypeMinOrderByAggregateInput;
};

export type TriggerTypeScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.TriggerTypeScalarWhereWithAggregatesInput
		| Prisma.TriggerTypeScalarWhereWithAggregatesInput[];
	OR?: Prisma.TriggerTypeScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.TriggerTypeScalarWhereWithAggregatesInput
		| Prisma.TriggerTypeScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"TriggerType"> | string;
	name?: Prisma.StringWithAggregatesFilter<"TriggerType"> | string;
	image?: Prisma.StringWithAggregatesFilter<"TriggerType"> | string;
	createdAt?:
		| Prisma.DateTimeWithAggregatesFilter<"TriggerType">
		| Date
		| string;
	updatedAt?:
		| Prisma.DateTimeWithAggregatesFilter<"TriggerType">
		| Date
		| string;
};

export type TriggerTypeCreateInput = {
	id?: string;
	name: string;
	image: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	triggers?: Prisma.TriggerCreateNestedManyWithoutTypeInput;
};

export type TriggerTypeUncheckedCreateInput = {
	id?: string;
	name: string;
	image: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	triggers?: Prisma.TriggerUncheckedCreateNestedManyWithoutTypeInput;
};

export type TriggerTypeUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	image?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	triggers?: Prisma.TriggerUpdateManyWithoutTypeNestedInput;
};

export type TriggerTypeUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	image?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	triggers?: Prisma.TriggerUncheckedUpdateManyWithoutTypeNestedInput;
};

export type TriggerTypeCreateManyInput = {
	id?: string;
	name: string;
	image: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type TriggerTypeUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	image?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TriggerTypeUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	image?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TriggerTypeScalarRelationFilter = {
	is?: Prisma.TriggerTypeWhereInput;
	isNot?: Prisma.TriggerTypeWhereInput;
};

export type TriggerTypeCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type TriggerTypeMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type TriggerTypeMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type TriggerTypeCreateNestedOneWithoutTriggersInput = {
	create?: Prisma.XOR<
		Prisma.TriggerTypeCreateWithoutTriggersInput,
		Prisma.TriggerTypeUncheckedCreateWithoutTriggersInput
	>;
	connectOrCreate?: Prisma.TriggerTypeCreateOrConnectWithoutTriggersInput;
	connect?: Prisma.TriggerTypeWhereUniqueInput;
};

export type TriggerTypeUpdateOneRequiredWithoutTriggersNestedInput = {
	create?: Prisma.XOR<
		Prisma.TriggerTypeCreateWithoutTriggersInput,
		Prisma.TriggerTypeUncheckedCreateWithoutTriggersInput
	>;
	connectOrCreate?: Prisma.TriggerTypeCreateOrConnectWithoutTriggersInput;
	upsert?: Prisma.TriggerTypeUpsertWithoutTriggersInput;
	connect?: Prisma.TriggerTypeWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.TriggerTypeUpdateToOneWithWhereWithoutTriggersInput,
			Prisma.TriggerTypeUpdateWithoutTriggersInput
		>,
		Prisma.TriggerTypeUncheckedUpdateWithoutTriggersInput
	>;
};

export type TriggerTypeCreateWithoutTriggersInput = {
	id?: string;
	name: string;
	image: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type TriggerTypeUncheckedCreateWithoutTriggersInput = {
	id?: string;
	name: string;
	image: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type TriggerTypeCreateOrConnectWithoutTriggersInput = {
	where: Prisma.TriggerTypeWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.TriggerTypeCreateWithoutTriggersInput,
		Prisma.TriggerTypeUncheckedCreateWithoutTriggersInput
	>;
};

export type TriggerTypeUpsertWithoutTriggersInput = {
	update: Prisma.XOR<
		Prisma.TriggerTypeUpdateWithoutTriggersInput,
		Prisma.TriggerTypeUncheckedUpdateWithoutTriggersInput
	>;
	create: Prisma.XOR<
		Prisma.TriggerTypeCreateWithoutTriggersInput,
		Prisma.TriggerTypeUncheckedCreateWithoutTriggersInput
	>;
	where?: Prisma.TriggerTypeWhereInput;
};

export type TriggerTypeUpdateToOneWithWhereWithoutTriggersInput = {
	where?: Prisma.TriggerTypeWhereInput;
	data: Prisma.XOR<
		Prisma.TriggerTypeUpdateWithoutTriggersInput,
		Prisma.TriggerTypeUncheckedUpdateWithoutTriggersInput
	>;
};

export type TriggerTypeUpdateWithoutTriggersInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	image?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TriggerTypeUncheckedUpdateWithoutTriggersInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	image?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type TriggerTypeCountOutputType
 */

export type TriggerTypeCountOutputType = {
	triggers: number;
};

export type TriggerTypeCountOutputTypeSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	triggers?: boolean | TriggerTypeCountOutputTypeCountTriggersArgs;
};

/**
 * TriggerTypeCountOutputType without action
 */
export type TriggerTypeCountOutputTypeDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TriggerTypeCountOutputType
	 */
	select?: Prisma.TriggerTypeCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * TriggerTypeCountOutputType without action
 */
export type TriggerTypeCountOutputTypeCountTriggersArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.TriggerWhereInput;
};

export type TriggerTypeSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		image?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		triggers?: boolean | Prisma.TriggerType$triggersArgs<ExtArgs>;
		_count?: boolean | Prisma.TriggerTypeCountOutputTypeDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["triggerType"]
>;

export type TriggerTypeSelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		image?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
	},
	ExtArgs["result"]["triggerType"]
>;

export type TriggerTypeSelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		image?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
	},
	ExtArgs["result"]["triggerType"]
>;

export type TriggerTypeSelectScalar = {
	id?: boolean;
	name?: boolean;
	image?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type TriggerTypeOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "name" | "image" | "createdAt" | "updatedAt",
	ExtArgs["result"]["triggerType"]
>;
export type TriggerTypeInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	triggers?: boolean | Prisma.TriggerType$triggersArgs<ExtArgs>;
	_count?: boolean | Prisma.TriggerTypeCountOutputTypeDefaultArgs<ExtArgs>;
};
export type TriggerTypeIncludeCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type TriggerTypeIncludeUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $TriggerTypePayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "TriggerType";
	objects: {
		triggers: Prisma.$TriggerPayload<ExtArgs>[];
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			name: string;
			image: string;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["triggerType"]
	>;
	composites: {};
};

export type TriggerTypeGetPayload<
	S extends boolean | null | undefined | TriggerTypeDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$TriggerTypePayload, S>;

export type TriggerTypeCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
	TriggerTypeFindManyArgs,
	"select" | "include" | "distinct" | "omit"
> & {
	select?: TriggerTypeCountAggregateInputType | true;
};

export interface TriggerTypeDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["TriggerType"];
		meta: { name: "TriggerType" };
	};
	/**
	 * Find zero or one TriggerType that matches the filter.
	 * @param {TriggerTypeFindUniqueArgs} args - Arguments to find a TriggerType
	 * @example
	 * // Get one TriggerType
	 * const triggerType = await prisma.triggerType.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends TriggerTypeFindUniqueArgs>(
		args: Prisma.SelectSubset<T, TriggerTypeFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerTypePayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one TriggerType that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {TriggerTypeFindUniqueOrThrowArgs} args - Arguments to find a TriggerType
	 * @example
	 * // Get one TriggerType
	 * const triggerType = await prisma.triggerType.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends TriggerTypeFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, TriggerTypeFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerTypePayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first TriggerType that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerTypeFindFirstArgs} args - Arguments to find a TriggerType
	 * @example
	 * // Get one TriggerType
	 * const triggerType = await prisma.triggerType.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends TriggerTypeFindFirstArgs>(
		args?: Prisma.SelectSubset<T, TriggerTypeFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerTypePayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first TriggerType that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerTypeFindFirstOrThrowArgs} args - Arguments to find a TriggerType
	 * @example
	 * // Get one TriggerType
	 * const triggerType = await prisma.triggerType.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends TriggerTypeFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, TriggerTypeFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerTypePayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more TriggerTypes that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerTypeFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all TriggerTypes
	 * const triggerTypes = await prisma.triggerType.findMany()
	 *
	 * // Get first 10 TriggerTypes
	 * const triggerTypes = await prisma.triggerType.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const triggerTypeWithIdOnly = await prisma.triggerType.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends TriggerTypeFindManyArgs>(
		args?: Prisma.SelectSubset<T, TriggerTypeFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerTypePayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a TriggerType.
	 * @param {TriggerTypeCreateArgs} args - Arguments to create a TriggerType.
	 * @example
	 * // Create one TriggerType
	 * const TriggerType = await prisma.triggerType.create({
	 *   data: {
	 *     // ... data to create a TriggerType
	 *   }
	 * })
	 *
	 */
	create<T extends TriggerTypeCreateArgs>(
		args: Prisma.SelectSubset<T, TriggerTypeCreateArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerTypePayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many TriggerTypes.
	 * @param {TriggerTypeCreateManyArgs} args - Arguments to create many TriggerTypes.
	 * @example
	 * // Create many TriggerTypes
	 * const triggerType = await prisma.triggerType.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends TriggerTypeCreateManyArgs>(
		args?: Prisma.SelectSubset<T, TriggerTypeCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many TriggerTypes and returns the data saved in the database.
	 * @param {TriggerTypeCreateManyAndReturnArgs} args - Arguments to create many TriggerTypes.
	 * @example
	 * // Create many TriggerTypes
	 * const triggerType = await prisma.triggerType.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many TriggerTypes and only return the `id`
	 * const triggerTypeWithIdOnly = await prisma.triggerType.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends TriggerTypeCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<T, TriggerTypeCreateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerTypePayload<ExtArgs>,
			T,
			"createManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Delete a TriggerType.
	 * @param {TriggerTypeDeleteArgs} args - Arguments to delete one TriggerType.
	 * @example
	 * // Delete one TriggerType
	 * const TriggerType = await prisma.triggerType.delete({
	 *   where: {
	 *     // ... filter to delete one TriggerType
	 *   }
	 * })
	 *
	 */
	delete<T extends TriggerTypeDeleteArgs>(
		args: Prisma.SelectSubset<T, TriggerTypeDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerTypePayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one TriggerType.
	 * @param {TriggerTypeUpdateArgs} args - Arguments to update one TriggerType.
	 * @example
	 * // Update one TriggerType
	 * const triggerType = await prisma.triggerType.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends TriggerTypeUpdateArgs>(
		args: Prisma.SelectSubset<T, TriggerTypeUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerTypePayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more TriggerTypes.
	 * @param {TriggerTypeDeleteManyArgs} args - Arguments to filter TriggerTypes to delete.
	 * @example
	 * // Delete a few TriggerTypes
	 * const { count } = await prisma.triggerType.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends TriggerTypeDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, TriggerTypeDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more TriggerTypes.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerTypeUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many TriggerTypes
	 * const triggerType = await prisma.triggerType.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends TriggerTypeUpdateManyArgs>(
		args: Prisma.SelectSubset<T, TriggerTypeUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more TriggerTypes and returns the data updated in the database.
	 * @param {TriggerTypeUpdateManyAndReturnArgs} args - Arguments to update many TriggerTypes.
	 * @example
	 * // Update many TriggerTypes
	 * const triggerType = await prisma.triggerType.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more TriggerTypes and only return the `id`
	 * const triggerTypeWithIdOnly = await prisma.triggerType.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends TriggerTypeUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<T, TriggerTypeUpdateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerTypePayload<ExtArgs>,
			T,
			"updateManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create or update one TriggerType.
	 * @param {TriggerTypeUpsertArgs} args - Arguments to update or create a TriggerType.
	 * @example
	 * // Update or create a TriggerType
	 * const triggerType = await prisma.triggerType.upsert({
	 *   create: {
	 *     // ... data to create a TriggerType
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the TriggerType we want to update
	 *   }
	 * })
	 */
	upsert<T extends TriggerTypeUpsertArgs>(
		args: Prisma.SelectSubset<T, TriggerTypeUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerTypePayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of TriggerTypes.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerTypeCountArgs} args - Arguments to filter TriggerTypes to count.
	 * @example
	 * // Count the number of TriggerTypes
	 * const count = await prisma.triggerType.count({
	 *   where: {
	 *     // ... the filter for the TriggerTypes we want to count
	 *   }
	 * })
	 **/
	count<T extends TriggerTypeCountArgs>(
		args?: Prisma.Subset<T, TriggerTypeCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], TriggerTypeCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a TriggerType.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends TriggerTypeAggregateArgs>(
		args: Prisma.Subset<T, TriggerTypeAggregateArgs>,
	): Prisma.PrismaPromise<GetTriggerTypeAggregateType<T>>;

	/**
	 * Group by TriggerType.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerTypeGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends TriggerTypeGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: TriggerTypeGroupByArgs["orderBy"] }
			: { orderBy?: TriggerTypeGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, TriggerTypeGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetTriggerTypeGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the TriggerType model
	 */
	readonly fields: TriggerTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TriggerType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TriggerTypeClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	triggers<T extends Prisma.TriggerType$triggersArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.TriggerType$triggersArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$TriggerPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the TriggerType model
 */
export interface TriggerTypeFieldRefs {
	readonly id: Prisma.FieldRef<"TriggerType", "String">;
	readonly name: Prisma.FieldRef<"TriggerType", "String">;
	readonly image: Prisma.FieldRef<"TriggerType", "String">;
	readonly createdAt: Prisma.FieldRef<"TriggerType", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"TriggerType", "DateTime">;
}

// Custom InputTypes
/**
 * TriggerType findUnique
 */
export type TriggerTypeFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TriggerType
	 */
	select?: Prisma.TriggerTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the TriggerType
	 */
	omit?: Prisma.TriggerTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerTypeInclude<ExtArgs> | null;
	/**
	 * Filter, which TriggerType to fetch.
	 */
	where: Prisma.TriggerTypeWhereUniqueInput;
};

/**
 * TriggerType findUniqueOrThrow
 */
export type TriggerTypeFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TriggerType
	 */
	select?: Prisma.TriggerTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the TriggerType
	 */
	omit?: Prisma.TriggerTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerTypeInclude<ExtArgs> | null;
	/**
	 * Filter, which TriggerType to fetch.
	 */
	where: Prisma.TriggerTypeWhereUniqueInput;
};

/**
 * TriggerType findFirst
 */
export type TriggerTypeFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TriggerType
	 */
	select?: Prisma.TriggerTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the TriggerType
	 */
	omit?: Prisma.TriggerTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerTypeInclude<ExtArgs> | null;
	/**
	 * Filter, which TriggerType to fetch.
	 */
	where?: Prisma.TriggerTypeWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of TriggerTypes to fetch.
	 */
	orderBy?:
		| Prisma.TriggerTypeOrderByWithRelationInput
		| Prisma.TriggerTypeOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for TriggerTypes.
	 */
	cursor?: Prisma.TriggerTypeWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` TriggerTypes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` TriggerTypes.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of TriggerTypes.
	 */
	distinct?:
		| Prisma.TriggerTypeScalarFieldEnum
		| Prisma.TriggerTypeScalarFieldEnum[];
};

/**
 * TriggerType findFirstOrThrow
 */
export type TriggerTypeFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TriggerType
	 */
	select?: Prisma.TriggerTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the TriggerType
	 */
	omit?: Prisma.TriggerTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerTypeInclude<ExtArgs> | null;
	/**
	 * Filter, which TriggerType to fetch.
	 */
	where?: Prisma.TriggerTypeWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of TriggerTypes to fetch.
	 */
	orderBy?:
		| Prisma.TriggerTypeOrderByWithRelationInput
		| Prisma.TriggerTypeOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for TriggerTypes.
	 */
	cursor?: Prisma.TriggerTypeWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` TriggerTypes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` TriggerTypes.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of TriggerTypes.
	 */
	distinct?:
		| Prisma.TriggerTypeScalarFieldEnum
		| Prisma.TriggerTypeScalarFieldEnum[];
};

/**
 * TriggerType findMany
 */
export type TriggerTypeFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TriggerType
	 */
	select?: Prisma.TriggerTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the TriggerType
	 */
	omit?: Prisma.TriggerTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerTypeInclude<ExtArgs> | null;
	/**
	 * Filter, which TriggerTypes to fetch.
	 */
	where?: Prisma.TriggerTypeWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of TriggerTypes to fetch.
	 */
	orderBy?:
		| Prisma.TriggerTypeOrderByWithRelationInput
		| Prisma.TriggerTypeOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing TriggerTypes.
	 */
	cursor?: Prisma.TriggerTypeWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` TriggerTypes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` TriggerTypes.
	 */
	skip?: number;
	distinct?:
		| Prisma.TriggerTypeScalarFieldEnum
		| Prisma.TriggerTypeScalarFieldEnum[];
};

/**
 * TriggerType create
 */
export type TriggerTypeCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TriggerType
	 */
	select?: Prisma.TriggerTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the TriggerType
	 */
	omit?: Prisma.TriggerTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerTypeInclude<ExtArgs> | null;
	/**
	 * The data needed to create a TriggerType.
	 */
	data: Prisma.XOR<
		Prisma.TriggerTypeCreateInput,
		Prisma.TriggerTypeUncheckedCreateInput
	>;
};

/**
 * TriggerType createMany
 */
export type TriggerTypeCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many TriggerTypes.
	 */
	data: Prisma.TriggerTypeCreateManyInput | Prisma.TriggerTypeCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * TriggerType createManyAndReturn
 */
export type TriggerTypeCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TriggerType
	 */
	select?: Prisma.TriggerTypeSelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the TriggerType
	 */
	omit?: Prisma.TriggerTypeOmit<ExtArgs> | null;
	/**
	 * The data used to create many TriggerTypes.
	 */
	data: Prisma.TriggerTypeCreateManyInput | Prisma.TriggerTypeCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * TriggerType update
 */
export type TriggerTypeUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TriggerType
	 */
	select?: Prisma.TriggerTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the TriggerType
	 */
	omit?: Prisma.TriggerTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerTypeInclude<ExtArgs> | null;
	/**
	 * The data needed to update a TriggerType.
	 */
	data: Prisma.XOR<
		Prisma.TriggerTypeUpdateInput,
		Prisma.TriggerTypeUncheckedUpdateInput
	>;
	/**
	 * Choose, which TriggerType to update.
	 */
	where: Prisma.TriggerTypeWhereUniqueInput;
};

/**
 * TriggerType updateMany
 */
export type TriggerTypeUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update TriggerTypes.
	 */
	data: Prisma.XOR<
		Prisma.TriggerTypeUpdateManyMutationInput,
		Prisma.TriggerTypeUncheckedUpdateManyInput
	>;
	/**
	 * Filter which TriggerTypes to update
	 */
	where?: Prisma.TriggerTypeWhereInput;
	/**
	 * Limit how many TriggerTypes to update.
	 */
	limit?: number;
};

/**
 * TriggerType updateManyAndReturn
 */
export type TriggerTypeUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TriggerType
	 */
	select?: Prisma.TriggerTypeSelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the TriggerType
	 */
	omit?: Prisma.TriggerTypeOmit<ExtArgs> | null;
	/**
	 * The data used to update TriggerTypes.
	 */
	data: Prisma.XOR<
		Prisma.TriggerTypeUpdateManyMutationInput,
		Prisma.TriggerTypeUncheckedUpdateManyInput
	>;
	/**
	 * Filter which TriggerTypes to update
	 */
	where?: Prisma.TriggerTypeWhereInput;
	/**
	 * Limit how many TriggerTypes to update.
	 */
	limit?: number;
};

/**
 * TriggerType upsert
 */
export type TriggerTypeUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TriggerType
	 */
	select?: Prisma.TriggerTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the TriggerType
	 */
	omit?: Prisma.TriggerTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerTypeInclude<ExtArgs> | null;
	/**
	 * The filter to search for the TriggerType to update in case it exists.
	 */
	where: Prisma.TriggerTypeWhereUniqueInput;
	/**
	 * In case the TriggerType found by the `where` argument doesn't exist, create a new TriggerType with this data.
	 */
	create: Prisma.XOR<
		Prisma.TriggerTypeCreateInput,
		Prisma.TriggerTypeUncheckedCreateInput
	>;
	/**
	 * In case the TriggerType was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.TriggerTypeUpdateInput,
		Prisma.TriggerTypeUncheckedUpdateInput
	>;
};

/**
 * TriggerType delete
 */
export type TriggerTypeDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TriggerType
	 */
	select?: Prisma.TriggerTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the TriggerType
	 */
	omit?: Prisma.TriggerTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerTypeInclude<ExtArgs> | null;
	/**
	 * Filter which TriggerType to delete.
	 */
	where: Prisma.TriggerTypeWhereUniqueInput;
};

/**
 * TriggerType deleteMany
 */
export type TriggerTypeDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which TriggerTypes to delete
	 */
	where?: Prisma.TriggerTypeWhereInput;
	/**
	 * Limit how many TriggerTypes to delete.
	 */
	limit?: number;
};

/**
 * TriggerType.triggers
 */
export type TriggerType$triggersArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Trigger
	 */
	select?: Prisma.TriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Trigger
	 */
	omit?: Prisma.TriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerInclude<ExtArgs> | null;
	where?: Prisma.TriggerWhereInput;
	orderBy?:
		| Prisma.TriggerOrderByWithRelationInput
		| Prisma.TriggerOrderByWithRelationInput[];
	cursor?: Prisma.TriggerWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.TriggerScalarFieldEnum | Prisma.TriggerScalarFieldEnum[];
};

/**
 * TriggerType without action
 */
export type TriggerTypeDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TriggerType
	 */
	select?: Prisma.TriggerTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the TriggerType
	 */
	omit?: Prisma.TriggerTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerTypeInclude<ExtArgs> | null;
};
