/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `ZapRun` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ZapRun
 *
 */
export type ZapRunModel =
	runtime.Types.Result.DefaultSelection<Prisma.$ZapRunPayload>;

export type AggregateZapRun = {
	_count: ZapRunCountAggregateOutputType | null;
	_min: ZapRunMinAggregateOutputType | null;
	_max: ZapRunMaxAggregateOutputType | null;
};

export type ZapRunMinAggregateOutputType = {
	id: string | null;
	zapId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ZapRunMaxAggregateOutputType = {
	id: string | null;
	zapId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ZapRunCountAggregateOutputType = {
	id: number;
	zapId: number;
	metadata: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type ZapRunMinAggregateInputType = {
	id?: true;
	zapId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ZapRunMaxAggregateInputType = {
	id?: true;
	zapId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ZapRunCountAggregateInputType = {
	id?: true;
	zapId?: true;
	metadata?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type ZapRunAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ZapRun to aggregate.
	 */
	where?: Prisma.ZapRunWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapRuns to fetch.
	 */
	orderBy?:
		| Prisma.ZapRunOrderByWithRelationInput
		| Prisma.ZapRunOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.ZapRunWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapRuns from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapRuns.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned ZapRuns
	 **/
	_count?: true | ZapRunCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: ZapRunMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: ZapRunMaxAggregateInputType;
};

export type GetZapRunAggregateType<T extends ZapRunAggregateArgs> = {
	[P in keyof T & keyof AggregateZapRun]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateZapRun[P]>
		: Prisma.GetScalarType<T[P], AggregateZapRun[P]>;
};

export type ZapRunGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ZapRunWhereInput;
	orderBy?:
		| Prisma.ZapRunOrderByWithAggregationInput
		| Prisma.ZapRunOrderByWithAggregationInput[];
	by: Prisma.ZapRunScalarFieldEnum[] | Prisma.ZapRunScalarFieldEnum;
	having?: Prisma.ZapRunScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: ZapRunCountAggregateInputType | true;
	_min?: ZapRunMinAggregateInputType;
	_max?: ZapRunMaxAggregateInputType;
};

export type ZapRunGroupByOutputType = {
	id: string;
	zapId: string;
	metadata: runtime.JsonValue | null;
	createdAt: Date;
	updatedAt: Date;
	_count: ZapRunCountAggregateOutputType | null;
	_min: ZapRunMinAggregateOutputType | null;
	_max: ZapRunMaxAggregateOutputType | null;
};

type GetZapRunGroupByPayload<T extends ZapRunGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<ZapRunGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof ZapRunGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], ZapRunGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], ZapRunGroupByOutputType[P]>;
			}
		>
	>;

export type ZapRunWhereInput = {
	AND?: Prisma.ZapRunWhereInput | Prisma.ZapRunWhereInput[];
	OR?: Prisma.ZapRunWhereInput[];
	NOT?: Prisma.ZapRunWhereInput | Prisma.ZapRunWhereInput[];
	id?: Prisma.StringFilter<"ZapRun"> | string;
	zapId?: Prisma.StringFilter<"ZapRun"> | string;
	metadata?: Prisma.JsonNullableFilter<"ZapRun">;
	createdAt?: Prisma.DateTimeFilter<"ZapRun"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"ZapRun"> | Date | string;
	zap?: Prisma.XOR<Prisma.ZapScalarRelationFilter, Prisma.ZapWhereInput>;
	zapRunOutbox?: Prisma.XOR<
		Prisma.ZapRunOutboxNullableScalarRelationFilter,
		Prisma.ZapRunOutboxWhereInput
	> | null;
};

export type ZapRunOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	metadata?: Prisma.SortOrderInput | Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	zap?: Prisma.ZapOrderByWithRelationInput;
	zapRunOutbox?: Prisma.ZapRunOutboxOrderByWithRelationInput;
};

export type ZapRunWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.ZapRunWhereInput | Prisma.ZapRunWhereInput[];
		OR?: Prisma.ZapRunWhereInput[];
		NOT?: Prisma.ZapRunWhereInput | Prisma.ZapRunWhereInput[];
		zapId?: Prisma.StringFilter<"ZapRun"> | string;
		metadata?: Prisma.JsonNullableFilter<"ZapRun">;
		createdAt?: Prisma.DateTimeFilter<"ZapRun"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"ZapRun"> | Date | string;
		zap?: Prisma.XOR<Prisma.ZapScalarRelationFilter, Prisma.ZapWhereInput>;
		zapRunOutbox?: Prisma.XOR<
			Prisma.ZapRunOutboxNullableScalarRelationFilter,
			Prisma.ZapRunOutboxWhereInput
		> | null;
	},
	"id"
>;

export type ZapRunOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	metadata?: Prisma.SortOrderInput | Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.ZapRunCountOrderByAggregateInput;
	_max?: Prisma.ZapRunMaxOrderByAggregateInput;
	_min?: Prisma.ZapRunMinOrderByAggregateInput;
};

export type ZapRunScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.ZapRunScalarWhereWithAggregatesInput
		| Prisma.ZapRunScalarWhereWithAggregatesInput[];
	OR?: Prisma.ZapRunScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.ZapRunScalarWhereWithAggregatesInput
		| Prisma.ZapRunScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"ZapRun"> | string;
	zapId?: Prisma.StringWithAggregatesFilter<"ZapRun"> | string;
	metadata?: Prisma.JsonNullableWithAggregatesFilter<"ZapRun">;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"ZapRun"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ZapRun"> | Date | string;
};

export type ZapRunCreateInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zap: Prisma.ZapCreateNestedOneWithoutZapRunsInput;
	zapRunOutbox?: Prisma.ZapRunOutboxCreateNestedOneWithoutZapRunInput;
};

export type ZapRunUncheckedCreateInput = {
	id?: string;
	zapId: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zapRunOutbox?: Prisma.ZapRunOutboxUncheckedCreateNestedOneWithoutZapRunInput;
};

export type ZapRunUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zap?: Prisma.ZapUpdateOneRequiredWithoutZapRunsNestedInput;
	zapRunOutbox?: Prisma.ZapRunOutboxUpdateOneWithoutZapRunNestedInput;
};

export type ZapRunUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zapRunOutbox?: Prisma.ZapRunOutboxUncheckedUpdateOneWithoutZapRunNestedInput;
};

export type ZapRunCreateManyInput = {
	id?: string;
	zapId: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapRunUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapRunUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapRunListRelationFilter = {
	every?: Prisma.ZapRunWhereInput;
	some?: Prisma.ZapRunWhereInput;
	none?: Prisma.ZapRunWhereInput;
};

export type ZapRunOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type ZapRunCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	metadata?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapRunMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapRunMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapRunScalarRelationFilter = {
	is?: Prisma.ZapRunWhereInput;
	isNot?: Prisma.ZapRunWhereInput;
};

export type ZapRunCreateNestedManyWithoutZapInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapRunCreateWithoutZapInput,
				Prisma.ZapRunUncheckedCreateWithoutZapInput
		  >
		| Prisma.ZapRunCreateWithoutZapInput[]
		| Prisma.ZapRunUncheckedCreateWithoutZapInput[];
	connectOrCreate?:
		| Prisma.ZapRunCreateOrConnectWithoutZapInput
		| Prisma.ZapRunCreateOrConnectWithoutZapInput[];
	createMany?: Prisma.ZapRunCreateManyZapInputEnvelope;
	connect?: Prisma.ZapRunWhereUniqueInput | Prisma.ZapRunWhereUniqueInput[];
};

export type ZapRunUncheckedCreateNestedManyWithoutZapInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapRunCreateWithoutZapInput,
				Prisma.ZapRunUncheckedCreateWithoutZapInput
		  >
		| Prisma.ZapRunCreateWithoutZapInput[]
		| Prisma.ZapRunUncheckedCreateWithoutZapInput[];
	connectOrCreate?:
		| Prisma.ZapRunCreateOrConnectWithoutZapInput
		| Prisma.ZapRunCreateOrConnectWithoutZapInput[];
	createMany?: Prisma.ZapRunCreateManyZapInputEnvelope;
	connect?: Prisma.ZapRunWhereUniqueInput | Prisma.ZapRunWhereUniqueInput[];
};

export type ZapRunUpdateManyWithoutZapNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapRunCreateWithoutZapInput,
				Prisma.ZapRunUncheckedCreateWithoutZapInput
		  >
		| Prisma.ZapRunCreateWithoutZapInput[]
		| Prisma.ZapRunUncheckedCreateWithoutZapInput[];
	connectOrCreate?:
		| Prisma.ZapRunCreateOrConnectWithoutZapInput
		| Prisma.ZapRunCreateOrConnectWithoutZapInput[];
	upsert?:
		| Prisma.ZapRunUpsertWithWhereUniqueWithoutZapInput
		| Prisma.ZapRunUpsertWithWhereUniqueWithoutZapInput[];
	createMany?: Prisma.ZapRunCreateManyZapInputEnvelope;
	set?: Prisma.ZapRunWhereUniqueInput | Prisma.ZapRunWhereUniqueInput[];
	disconnect?: Prisma.ZapRunWhereUniqueInput | Prisma.ZapRunWhereUniqueInput[];
	delete?: Prisma.ZapRunWhereUniqueInput | Prisma.ZapRunWhereUniqueInput[];
	connect?: Prisma.ZapRunWhereUniqueInput | Prisma.ZapRunWhereUniqueInput[];
	update?:
		| Prisma.ZapRunUpdateWithWhereUniqueWithoutZapInput
		| Prisma.ZapRunUpdateWithWhereUniqueWithoutZapInput[];
	updateMany?:
		| Prisma.ZapRunUpdateManyWithWhereWithoutZapInput
		| Prisma.ZapRunUpdateManyWithWhereWithoutZapInput[];
	deleteMany?: Prisma.ZapRunScalarWhereInput | Prisma.ZapRunScalarWhereInput[];
};

export type ZapRunUncheckedUpdateManyWithoutZapNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapRunCreateWithoutZapInput,
				Prisma.ZapRunUncheckedCreateWithoutZapInput
		  >
		| Prisma.ZapRunCreateWithoutZapInput[]
		| Prisma.ZapRunUncheckedCreateWithoutZapInput[];
	connectOrCreate?:
		| Prisma.ZapRunCreateOrConnectWithoutZapInput
		| Prisma.ZapRunCreateOrConnectWithoutZapInput[];
	upsert?:
		| Prisma.ZapRunUpsertWithWhereUniqueWithoutZapInput
		| Prisma.ZapRunUpsertWithWhereUniqueWithoutZapInput[];
	createMany?: Prisma.ZapRunCreateManyZapInputEnvelope;
	set?: Prisma.ZapRunWhereUniqueInput | Prisma.ZapRunWhereUniqueInput[];
	disconnect?: Prisma.ZapRunWhereUniqueInput | Prisma.ZapRunWhereUniqueInput[];
	delete?: Prisma.ZapRunWhereUniqueInput | Prisma.ZapRunWhereUniqueInput[];
	connect?: Prisma.ZapRunWhereUniqueInput | Prisma.ZapRunWhereUniqueInput[];
	update?:
		| Prisma.ZapRunUpdateWithWhereUniqueWithoutZapInput
		| Prisma.ZapRunUpdateWithWhereUniqueWithoutZapInput[];
	updateMany?:
		| Prisma.ZapRunUpdateManyWithWhereWithoutZapInput
		| Prisma.ZapRunUpdateManyWithWhereWithoutZapInput[];
	deleteMany?: Prisma.ZapRunScalarWhereInput | Prisma.ZapRunScalarWhereInput[];
};

export type ZapRunCreateNestedOneWithoutZapRunOutboxInput = {
	create?: Prisma.XOR<
		Prisma.ZapRunCreateWithoutZapRunOutboxInput,
		Prisma.ZapRunUncheckedCreateWithoutZapRunOutboxInput
	>;
	connectOrCreate?: Prisma.ZapRunCreateOrConnectWithoutZapRunOutboxInput;
	connect?: Prisma.ZapRunWhereUniqueInput;
};

export type ZapRunUpdateOneRequiredWithoutZapRunOutboxNestedInput = {
	create?: Prisma.XOR<
		Prisma.ZapRunCreateWithoutZapRunOutboxInput,
		Prisma.ZapRunUncheckedCreateWithoutZapRunOutboxInput
	>;
	connectOrCreate?: Prisma.ZapRunCreateOrConnectWithoutZapRunOutboxInput;
	upsert?: Prisma.ZapRunUpsertWithoutZapRunOutboxInput;
	connect?: Prisma.ZapRunWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.ZapRunUpdateToOneWithWhereWithoutZapRunOutboxInput,
			Prisma.ZapRunUpdateWithoutZapRunOutboxInput
		>,
		Prisma.ZapRunUncheckedUpdateWithoutZapRunOutboxInput
	>;
};

export type ZapRunCreateWithoutZapInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zapRunOutbox?: Prisma.ZapRunOutboxCreateNestedOneWithoutZapRunInput;
};

export type ZapRunUncheckedCreateWithoutZapInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zapRunOutbox?: Prisma.ZapRunOutboxUncheckedCreateNestedOneWithoutZapRunInput;
};

export type ZapRunCreateOrConnectWithoutZapInput = {
	where: Prisma.ZapRunWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ZapRunCreateWithoutZapInput,
		Prisma.ZapRunUncheckedCreateWithoutZapInput
	>;
};

export type ZapRunCreateManyZapInputEnvelope = {
	data: Prisma.ZapRunCreateManyZapInput | Prisma.ZapRunCreateManyZapInput[];
	skipDuplicates?: boolean;
};

export type ZapRunUpsertWithWhereUniqueWithoutZapInput = {
	where: Prisma.ZapRunWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ZapRunUpdateWithoutZapInput,
		Prisma.ZapRunUncheckedUpdateWithoutZapInput
	>;
	create: Prisma.XOR<
		Prisma.ZapRunCreateWithoutZapInput,
		Prisma.ZapRunUncheckedCreateWithoutZapInput
	>;
};

export type ZapRunUpdateWithWhereUniqueWithoutZapInput = {
	where: Prisma.ZapRunWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ZapRunUpdateWithoutZapInput,
		Prisma.ZapRunUncheckedUpdateWithoutZapInput
	>;
};

export type ZapRunUpdateManyWithWhereWithoutZapInput = {
	where: Prisma.ZapRunScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ZapRunUpdateManyMutationInput,
		Prisma.ZapRunUncheckedUpdateManyWithoutZapInput
	>;
};

export type ZapRunScalarWhereInput = {
	AND?: Prisma.ZapRunScalarWhereInput | Prisma.ZapRunScalarWhereInput[];
	OR?: Prisma.ZapRunScalarWhereInput[];
	NOT?: Prisma.ZapRunScalarWhereInput | Prisma.ZapRunScalarWhereInput[];
	id?: Prisma.StringFilter<"ZapRun"> | string;
	zapId?: Prisma.StringFilter<"ZapRun"> | string;
	metadata?: Prisma.JsonNullableFilter<"ZapRun">;
	createdAt?: Prisma.DateTimeFilter<"ZapRun"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"ZapRun"> | Date | string;
};

export type ZapRunCreateWithoutZapRunOutboxInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zap: Prisma.ZapCreateNestedOneWithoutZapRunsInput;
};

export type ZapRunUncheckedCreateWithoutZapRunOutboxInput = {
	id?: string;
	zapId: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapRunCreateOrConnectWithoutZapRunOutboxInput = {
	where: Prisma.ZapRunWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ZapRunCreateWithoutZapRunOutboxInput,
		Prisma.ZapRunUncheckedCreateWithoutZapRunOutboxInput
	>;
};

export type ZapRunUpsertWithoutZapRunOutboxInput = {
	update: Prisma.XOR<
		Prisma.ZapRunUpdateWithoutZapRunOutboxInput,
		Prisma.ZapRunUncheckedUpdateWithoutZapRunOutboxInput
	>;
	create: Prisma.XOR<
		Prisma.ZapRunCreateWithoutZapRunOutboxInput,
		Prisma.ZapRunUncheckedCreateWithoutZapRunOutboxInput
	>;
	where?: Prisma.ZapRunWhereInput;
};

export type ZapRunUpdateToOneWithWhereWithoutZapRunOutboxInput = {
	where?: Prisma.ZapRunWhereInput;
	data: Prisma.XOR<
		Prisma.ZapRunUpdateWithoutZapRunOutboxInput,
		Prisma.ZapRunUncheckedUpdateWithoutZapRunOutboxInput
	>;
};

export type ZapRunUpdateWithoutZapRunOutboxInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zap?: Prisma.ZapUpdateOneRequiredWithoutZapRunsNestedInput;
};

export type ZapRunUncheckedUpdateWithoutZapRunOutboxInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapRunCreateManyZapInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapRunUpdateWithoutZapInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zapRunOutbox?: Prisma.ZapRunOutboxUpdateOneWithoutZapRunNestedInput;
};

export type ZapRunUncheckedUpdateWithoutZapInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zapRunOutbox?: Prisma.ZapRunOutboxUncheckedUpdateOneWithoutZapRunNestedInput;
};

export type ZapRunUncheckedUpdateManyWithoutZapInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapRunSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		zapId?: boolean;
		metadata?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
		zapRunOutbox?: boolean | Prisma.ZapRun$zapRunOutboxArgs<ExtArgs>;
	},
	ExtArgs["result"]["zapRun"]
>;

export type ZapRunSelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		zapId?: boolean;
		metadata?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zapRun"]
>;

export type ZapRunSelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		zapId?: boolean;
		metadata?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zapRun"]
>;

export type ZapRunSelectScalar = {
	id?: boolean;
	zapId?: boolean;
	metadata?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type ZapRunOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "zapId" | "metadata" | "createdAt" | "updatedAt",
	ExtArgs["result"]["zapRun"]
>;
export type ZapRunInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
	zapRunOutbox?: boolean | Prisma.ZapRun$zapRunOutboxArgs<ExtArgs>;
};
export type ZapRunIncludeCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
};
export type ZapRunIncludeUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
};

export type $ZapRunPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "ZapRun";
	objects: {
		zap: Prisma.$ZapPayload<ExtArgs>;
		zapRunOutbox: Prisma.$ZapRunOutboxPayload<ExtArgs> | null;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			zapId: string;
			metadata: runtime.JsonValue | null;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["zapRun"]
	>;
	composites: {};
};

export type ZapRunGetPayload<
	S extends boolean | null | undefined | ZapRunDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ZapRunPayload, S>;

export type ZapRunCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ZapRunFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: ZapRunCountAggregateInputType | true;
};

export interface ZapRunDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["ZapRun"];
		meta: { name: "ZapRun" };
	};
	/**
	 * Find zero or one ZapRun that matches the filter.
	 * @param {ZapRunFindUniqueArgs} args - Arguments to find a ZapRun
	 * @example
	 * // Get one ZapRun
	 * const zapRun = await prisma.zapRun.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends ZapRunFindUniqueArgs>(
		args: Prisma.SelectSubset<T, ZapRunFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one ZapRun that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {ZapRunFindUniqueOrThrowArgs} args - Arguments to find a ZapRun
	 * @example
	 * // Get one ZapRun
	 * const zapRun = await prisma.zapRun.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends ZapRunFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, ZapRunFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ZapRun that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunFindFirstArgs} args - Arguments to find a ZapRun
	 * @example
	 * // Get one ZapRun
	 * const zapRun = await prisma.zapRun.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends ZapRunFindFirstArgs>(
		args?: Prisma.SelectSubset<T, ZapRunFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ZapRun that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunFindFirstOrThrowArgs} args - Arguments to find a ZapRun
	 * @example
	 * // Get one ZapRun
	 * const zapRun = await prisma.zapRun.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends ZapRunFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, ZapRunFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more ZapRuns that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all ZapRuns
	 * const zapRuns = await prisma.zapRun.findMany()
	 *
	 * // Get first 10 ZapRuns
	 * const zapRuns = await prisma.zapRun.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const zapRunWithIdOnly = await prisma.zapRun.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends ZapRunFindManyArgs>(
		args?: Prisma.SelectSubset<T, ZapRunFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a ZapRun.
	 * @param {ZapRunCreateArgs} args - Arguments to create a ZapRun.
	 * @example
	 * // Create one ZapRun
	 * const ZapRun = await prisma.zapRun.create({
	 *   data: {
	 *     // ... data to create a ZapRun
	 *   }
	 * })
	 *
	 */
	create<T extends ZapRunCreateArgs>(
		args: Prisma.SelectSubset<T, ZapRunCreateArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many ZapRuns.
	 * @param {ZapRunCreateManyArgs} args - Arguments to create many ZapRuns.
	 * @example
	 * // Create many ZapRuns
	 * const zapRun = await prisma.zapRun.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends ZapRunCreateManyArgs>(
		args?: Prisma.SelectSubset<T, ZapRunCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many ZapRuns and returns the data saved in the database.
	 * @param {ZapRunCreateManyAndReturnArgs} args - Arguments to create many ZapRuns.
	 * @example
	 * // Create many ZapRuns
	 * const zapRun = await prisma.zapRun.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many ZapRuns and only return the `id`
	 * const zapRunWithIdOnly = await prisma.zapRun.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends ZapRunCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<T, ZapRunCreateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunPayload<ExtArgs>,
			T,
			"createManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Delete a ZapRun.
	 * @param {ZapRunDeleteArgs} args - Arguments to delete one ZapRun.
	 * @example
	 * // Delete one ZapRun
	 * const ZapRun = await prisma.zapRun.delete({
	 *   where: {
	 *     // ... filter to delete one ZapRun
	 *   }
	 * })
	 *
	 */
	delete<T extends ZapRunDeleteArgs>(
		args: Prisma.SelectSubset<T, ZapRunDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one ZapRun.
	 * @param {ZapRunUpdateArgs} args - Arguments to update one ZapRun.
	 * @example
	 * // Update one ZapRun
	 * const zapRun = await prisma.zapRun.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends ZapRunUpdateArgs>(
		args: Prisma.SelectSubset<T, ZapRunUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more ZapRuns.
	 * @param {ZapRunDeleteManyArgs} args - Arguments to filter ZapRuns to delete.
	 * @example
	 * // Delete a few ZapRuns
	 * const { count } = await prisma.zapRun.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends ZapRunDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, ZapRunDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ZapRuns.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many ZapRuns
	 * const zapRun = await prisma.zapRun.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends ZapRunUpdateManyArgs>(
		args: Prisma.SelectSubset<T, ZapRunUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ZapRuns and returns the data updated in the database.
	 * @param {ZapRunUpdateManyAndReturnArgs} args - Arguments to update many ZapRuns.
	 * @example
	 * // Update many ZapRuns
	 * const zapRun = await prisma.zapRun.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more ZapRuns and only return the `id`
	 * const zapRunWithIdOnly = await prisma.zapRun.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends ZapRunUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<T, ZapRunUpdateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunPayload<ExtArgs>,
			T,
			"updateManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create or update one ZapRun.
	 * @param {ZapRunUpsertArgs} args - Arguments to update or create a ZapRun.
	 * @example
	 * // Update or create a ZapRun
	 * const zapRun = await prisma.zapRun.upsert({
	 *   create: {
	 *     // ... data to create a ZapRun
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the ZapRun we want to update
	 *   }
	 * })
	 */
	upsert<T extends ZapRunUpsertArgs>(
		args: Prisma.SelectSubset<T, ZapRunUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of ZapRuns.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunCountArgs} args - Arguments to filter ZapRuns to count.
	 * @example
	 * // Count the number of ZapRuns
	 * const count = await prisma.zapRun.count({
	 *   where: {
	 *     // ... the filter for the ZapRuns we want to count
	 *   }
	 * })
	 **/
	count<T extends ZapRunCountArgs>(
		args?: Prisma.Subset<T, ZapRunCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], ZapRunCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a ZapRun.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends ZapRunAggregateArgs>(
		args: Prisma.Subset<T, ZapRunAggregateArgs>,
	): Prisma.PrismaPromise<GetZapRunAggregateType<T>>;

	/**
	 * Group by ZapRun.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends ZapRunGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: ZapRunGroupByArgs["orderBy"] }
			: { orderBy?: ZapRunGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, ZapRunGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetZapRunGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the ZapRun model
	 */
	readonly fields: ZapRunFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ZapRun.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ZapRunClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	zap<T extends Prisma.ZapDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ZapDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__ZapClient<
		| runtime.Types.Result.GetResult<
				Prisma.$ZapPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	zapRunOutbox<T extends Prisma.ZapRun$zapRunOutboxArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ZapRun$zapRunOutboxArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunOutboxClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunOutboxPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ZapRun model
 */
export interface ZapRunFieldRefs {
	readonly id: Prisma.FieldRef<"ZapRun", "String">;
	readonly zapId: Prisma.FieldRef<"ZapRun", "String">;
	readonly metadata: Prisma.FieldRef<"ZapRun", "Json">;
	readonly createdAt: Prisma.FieldRef<"ZapRun", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"ZapRun", "DateTime">;
}

// Custom InputTypes
/**
 * ZapRun findUnique
 */
export type ZapRunFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRun
	 */
	select?: Prisma.ZapRunSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRun
	 */
	omit?: Prisma.ZapRunOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapRun to fetch.
	 */
	where: Prisma.ZapRunWhereUniqueInput;
};

/**
 * ZapRun findUniqueOrThrow
 */
export type ZapRunFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRun
	 */
	select?: Prisma.ZapRunSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRun
	 */
	omit?: Prisma.ZapRunOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapRun to fetch.
	 */
	where: Prisma.ZapRunWhereUniqueInput;
};

/**
 * ZapRun findFirst
 */
export type ZapRunFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRun
	 */
	select?: Prisma.ZapRunSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRun
	 */
	omit?: Prisma.ZapRunOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapRun to fetch.
	 */
	where?: Prisma.ZapRunWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapRuns to fetch.
	 */
	orderBy?:
		| Prisma.ZapRunOrderByWithRelationInput
		| Prisma.ZapRunOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ZapRuns.
	 */
	cursor?: Prisma.ZapRunWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapRuns from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapRuns.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ZapRuns.
	 */
	distinct?: Prisma.ZapRunScalarFieldEnum | Prisma.ZapRunScalarFieldEnum[];
};

/**
 * ZapRun findFirstOrThrow
 */
export type ZapRunFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRun
	 */
	select?: Prisma.ZapRunSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRun
	 */
	omit?: Prisma.ZapRunOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapRun to fetch.
	 */
	where?: Prisma.ZapRunWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapRuns to fetch.
	 */
	orderBy?:
		| Prisma.ZapRunOrderByWithRelationInput
		| Prisma.ZapRunOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ZapRuns.
	 */
	cursor?: Prisma.ZapRunWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapRuns from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapRuns.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ZapRuns.
	 */
	distinct?: Prisma.ZapRunScalarFieldEnum | Prisma.ZapRunScalarFieldEnum[];
};

/**
 * ZapRun findMany
 */
export type ZapRunFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRun
	 */
	select?: Prisma.ZapRunSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRun
	 */
	omit?: Prisma.ZapRunOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapRuns to fetch.
	 */
	where?: Prisma.ZapRunWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapRuns to fetch.
	 */
	orderBy?:
		| Prisma.ZapRunOrderByWithRelationInput
		| Prisma.ZapRunOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing ZapRuns.
	 */
	cursor?: Prisma.ZapRunWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapRuns from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapRuns.
	 */
	skip?: number;
	distinct?: Prisma.ZapRunScalarFieldEnum | Prisma.ZapRunScalarFieldEnum[];
};

/**
 * ZapRun create
 */
export type ZapRunCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRun
	 */
	select?: Prisma.ZapRunSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRun
	 */
	omit?: Prisma.ZapRunOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunInclude<ExtArgs> | null;
	/**
	 * The data needed to create a ZapRun.
	 */
	data: Prisma.XOR<Prisma.ZapRunCreateInput, Prisma.ZapRunUncheckedCreateInput>;
};

/**
 * ZapRun createMany
 */
export type ZapRunCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many ZapRuns.
	 */
	data: Prisma.ZapRunCreateManyInput | Prisma.ZapRunCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * ZapRun createManyAndReturn
 */
export type ZapRunCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRun
	 */
	select?: Prisma.ZapRunSelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRun
	 */
	omit?: Prisma.ZapRunOmit<ExtArgs> | null;
	/**
	 * The data used to create many ZapRuns.
	 */
	data: Prisma.ZapRunCreateManyInput | Prisma.ZapRunCreateManyInput[];
	skipDuplicates?: boolean;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ZapRun update
 */
export type ZapRunUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRun
	 */
	select?: Prisma.ZapRunSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRun
	 */
	omit?: Prisma.ZapRunOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunInclude<ExtArgs> | null;
	/**
	 * The data needed to update a ZapRun.
	 */
	data: Prisma.XOR<Prisma.ZapRunUpdateInput, Prisma.ZapRunUncheckedUpdateInput>;
	/**
	 * Choose, which ZapRun to update.
	 */
	where: Prisma.ZapRunWhereUniqueInput;
};

/**
 * ZapRun updateMany
 */
export type ZapRunUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update ZapRuns.
	 */
	data: Prisma.XOR<
		Prisma.ZapRunUpdateManyMutationInput,
		Prisma.ZapRunUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ZapRuns to update
	 */
	where?: Prisma.ZapRunWhereInput;
	/**
	 * Limit how many ZapRuns to update.
	 */
	limit?: number;
};

/**
 * ZapRun updateManyAndReturn
 */
export type ZapRunUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRun
	 */
	select?: Prisma.ZapRunSelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRun
	 */
	omit?: Prisma.ZapRunOmit<ExtArgs> | null;
	/**
	 * The data used to update ZapRuns.
	 */
	data: Prisma.XOR<
		Prisma.ZapRunUpdateManyMutationInput,
		Prisma.ZapRunUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ZapRuns to update
	 */
	where?: Prisma.ZapRunWhereInput;
	/**
	 * Limit how many ZapRuns to update.
	 */
	limit?: number;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ZapRun upsert
 */
export type ZapRunUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRun
	 */
	select?: Prisma.ZapRunSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRun
	 */
	omit?: Prisma.ZapRunOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunInclude<ExtArgs> | null;
	/**
	 * The filter to search for the ZapRun to update in case it exists.
	 */
	where: Prisma.ZapRunWhereUniqueInput;
	/**
	 * In case the ZapRun found by the `where` argument doesn't exist, create a new ZapRun with this data.
	 */
	create: Prisma.XOR<
		Prisma.ZapRunCreateInput,
		Prisma.ZapRunUncheckedCreateInput
	>;
	/**
	 * In case the ZapRun was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.ZapRunUpdateInput,
		Prisma.ZapRunUncheckedUpdateInput
	>;
};

/**
 * ZapRun delete
 */
export type ZapRunDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRun
	 */
	select?: Prisma.ZapRunSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRun
	 */
	omit?: Prisma.ZapRunOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunInclude<ExtArgs> | null;
	/**
	 * Filter which ZapRun to delete.
	 */
	where: Prisma.ZapRunWhereUniqueInput;
};

/**
 * ZapRun deleteMany
 */
export type ZapRunDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ZapRuns to delete
	 */
	where?: Prisma.ZapRunWhereInput;
	/**
	 * Limit how many ZapRuns to delete.
	 */
	limit?: number;
};

/**
 * ZapRun.zapRunOutbox
 */
export type ZapRun$zapRunOutboxArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRunOutbox
	 */
	select?: Prisma.ZapRunOutboxSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRunOutbox
	 */
	omit?: Prisma.ZapRunOutboxOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunOutboxInclude<ExtArgs> | null;
	where?: Prisma.ZapRunOutboxWhereInput;
};

/**
 * ZapRun without action
 */
export type ZapRunDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRun
	 */
	select?: Prisma.ZapRunSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRun
	 */
	omit?: Prisma.ZapRunOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunInclude<ExtArgs> | null;
};
