/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `ZapTrigger` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ZapTrigger
 *
 */
export type ZapTriggerModel =
	runtime.Types.Result.DefaultSelection<Prisma.$ZapTriggerPayload>;

export type AggregateZapTrigger = {
	_count: ZapTriggerCountAggregateOutputType | null;
	_min: ZapTriggerMinAggregateOutputType | null;
	_max: ZapTriggerMaxAggregateOutputType | null;
};

export type ZapTriggerMinAggregateOutputType = {
	id: string | null;
	triggerId: string | null;
	zapId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ZapTriggerMaxAggregateOutputType = {
	id: string | null;
	triggerId: string | null;
	zapId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ZapTriggerCountAggregateOutputType = {
	id: number;
	metadata: number;
	triggerId: number;
	zapId: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type ZapTriggerMinAggregateInputType = {
	id?: true;
	triggerId?: true;
	zapId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ZapTriggerMaxAggregateInputType = {
	id?: true;
	triggerId?: true;
	zapId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ZapTriggerCountAggregateInputType = {
	id?: true;
	metadata?: true;
	triggerId?: true;
	zapId?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type ZapTriggerAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ZapTrigger to aggregate.
	 */
	where?: Prisma.ZapTriggerWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapTriggers to fetch.
	 */
	orderBy?:
		| Prisma.ZapTriggerOrderByWithRelationInput
		| Prisma.ZapTriggerOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.ZapTriggerWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapTriggers from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapTriggers.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned ZapTriggers
	 **/
	_count?: true | ZapTriggerCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: ZapTriggerMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: ZapTriggerMaxAggregateInputType;
};

export type GetZapTriggerAggregateType<T extends ZapTriggerAggregateArgs> = {
	[P in keyof T & keyof AggregateZapTrigger]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateZapTrigger[P]>
		: Prisma.GetScalarType<T[P], AggregateZapTrigger[P]>;
};

export type ZapTriggerGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ZapTriggerWhereInput;
	orderBy?:
		| Prisma.ZapTriggerOrderByWithAggregationInput
		| Prisma.ZapTriggerOrderByWithAggregationInput[];
	by: Prisma.ZapTriggerScalarFieldEnum[] | Prisma.ZapTriggerScalarFieldEnum;
	having?: Prisma.ZapTriggerScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: ZapTriggerCountAggregateInputType | true;
	_min?: ZapTriggerMinAggregateInputType;
	_max?: ZapTriggerMaxAggregateInputType;
};

export type ZapTriggerGroupByOutputType = {
	id: string;
	metadata: runtime.JsonValue | null;
	triggerId: string;
	zapId: string;
	createdAt: Date;
	updatedAt: Date;
	_count: ZapTriggerCountAggregateOutputType | null;
	_min: ZapTriggerMinAggregateOutputType | null;
	_max: ZapTriggerMaxAggregateOutputType | null;
};

type GetZapTriggerGroupByPayload<T extends ZapTriggerGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<ZapTriggerGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof ZapTriggerGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], ZapTriggerGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], ZapTriggerGroupByOutputType[P]>;
			}
		>
	>;

export type ZapTriggerWhereInput = {
	AND?: Prisma.ZapTriggerWhereInput | Prisma.ZapTriggerWhereInput[];
	OR?: Prisma.ZapTriggerWhereInput[];
	NOT?: Prisma.ZapTriggerWhereInput | Prisma.ZapTriggerWhereInput[];
	id?: Prisma.StringFilter<"ZapTrigger"> | string;
	metadata?: Prisma.JsonNullableFilter<"ZapTrigger">;
	triggerId?: Prisma.StringFilter<"ZapTrigger"> | string;
	zapId?: Prisma.StringFilter<"ZapTrigger"> | string;
	createdAt?: Prisma.DateTimeFilter<"ZapTrigger"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"ZapTrigger"> | Date | string;
	type?: Prisma.XOR<
		Prisma.TriggerScalarRelationFilter,
		Prisma.TriggerWhereInput
	>;
	zap?: Prisma.XOR<Prisma.ZapScalarRelationFilter, Prisma.ZapWhereInput>;
};

export type ZapTriggerOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	metadata?: Prisma.SortOrderInput | Prisma.SortOrder;
	triggerId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	type?: Prisma.TriggerOrderByWithRelationInput;
	zap?: Prisma.ZapOrderByWithRelationInput;
};

export type ZapTriggerWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		zapId?: string;
		AND?: Prisma.ZapTriggerWhereInput | Prisma.ZapTriggerWhereInput[];
		OR?: Prisma.ZapTriggerWhereInput[];
		NOT?: Prisma.ZapTriggerWhereInput | Prisma.ZapTriggerWhereInput[];
		metadata?: Prisma.JsonNullableFilter<"ZapTrigger">;
		triggerId?: Prisma.StringFilter<"ZapTrigger"> | string;
		createdAt?: Prisma.DateTimeFilter<"ZapTrigger"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"ZapTrigger"> | Date | string;
		type?: Prisma.XOR<
			Prisma.TriggerScalarRelationFilter,
			Prisma.TriggerWhereInput
		>;
		zap?: Prisma.XOR<Prisma.ZapScalarRelationFilter, Prisma.ZapWhereInput>;
	},
	"id" | "zapId"
>;

export type ZapTriggerOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	metadata?: Prisma.SortOrderInput | Prisma.SortOrder;
	triggerId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.ZapTriggerCountOrderByAggregateInput;
	_max?: Prisma.ZapTriggerMaxOrderByAggregateInput;
	_min?: Prisma.ZapTriggerMinOrderByAggregateInput;
};

export type ZapTriggerScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.ZapTriggerScalarWhereWithAggregatesInput
		| Prisma.ZapTriggerScalarWhereWithAggregatesInput[];
	OR?: Prisma.ZapTriggerScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.ZapTriggerScalarWhereWithAggregatesInput
		| Prisma.ZapTriggerScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"ZapTrigger"> | string;
	metadata?: Prisma.JsonNullableWithAggregatesFilter<"ZapTrigger">;
	triggerId?: Prisma.StringWithAggregatesFilter<"ZapTrigger"> | string;
	zapId?: Prisma.StringWithAggregatesFilter<"ZapTrigger"> | string;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"ZapTrigger"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ZapTrigger"> | Date | string;
};

export type ZapTriggerCreateInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	type: Prisma.TriggerCreateNestedOneWithoutZapTriggersInput;
	zap: Prisma.ZapCreateNestedOneWithoutZapTriggerInput;
};

export type ZapTriggerUncheckedCreateInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	triggerId: string;
	zapId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapTriggerUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	type?: Prisma.TriggerUpdateOneRequiredWithoutZapTriggersNestedInput;
	zap?: Prisma.ZapUpdateOneRequiredWithoutZapTriggerNestedInput;
};

export type ZapTriggerUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	triggerId?: Prisma.StringFieldUpdateOperationsInput | string;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapTriggerCreateManyInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	triggerId: string;
	zapId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapTriggerUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapTriggerUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	triggerId?: Prisma.StringFieldUpdateOperationsInput | string;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapTriggerNullableScalarRelationFilter = {
	is?: Prisma.ZapTriggerWhereInput | null;
	isNot?: Prisma.ZapTriggerWhereInput | null;
};

export type ZapTriggerCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	metadata?: Prisma.SortOrder;
	triggerId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapTriggerMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	triggerId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapTriggerMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	triggerId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapTriggerListRelationFilter = {
	every?: Prisma.ZapTriggerWhereInput;
	some?: Prisma.ZapTriggerWhereInput;
	none?: Prisma.ZapTriggerWhereInput;
};

export type ZapTriggerOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type ZapTriggerCreateNestedOneWithoutZapInput = {
	create?: Prisma.XOR<
		Prisma.ZapTriggerCreateWithoutZapInput,
		Prisma.ZapTriggerUncheckedCreateWithoutZapInput
	>;
	connectOrCreate?: Prisma.ZapTriggerCreateOrConnectWithoutZapInput;
	connect?: Prisma.ZapTriggerWhereUniqueInput;
};

export type ZapTriggerUncheckedCreateNestedOneWithoutZapInput = {
	create?: Prisma.XOR<
		Prisma.ZapTriggerCreateWithoutZapInput,
		Prisma.ZapTriggerUncheckedCreateWithoutZapInput
	>;
	connectOrCreate?: Prisma.ZapTriggerCreateOrConnectWithoutZapInput;
	connect?: Prisma.ZapTriggerWhereUniqueInput;
};

export type ZapTriggerUpdateOneWithoutZapNestedInput = {
	create?: Prisma.XOR<
		Prisma.ZapTriggerCreateWithoutZapInput,
		Prisma.ZapTriggerUncheckedCreateWithoutZapInput
	>;
	connectOrCreate?: Prisma.ZapTriggerCreateOrConnectWithoutZapInput;
	upsert?: Prisma.ZapTriggerUpsertWithoutZapInput;
	disconnect?: Prisma.ZapTriggerWhereInput | boolean;
	delete?: Prisma.ZapTriggerWhereInput | boolean;
	connect?: Prisma.ZapTriggerWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.ZapTriggerUpdateToOneWithWhereWithoutZapInput,
			Prisma.ZapTriggerUpdateWithoutZapInput
		>,
		Prisma.ZapTriggerUncheckedUpdateWithoutZapInput
	>;
};

export type ZapTriggerUncheckedUpdateOneWithoutZapNestedInput = {
	create?: Prisma.XOR<
		Prisma.ZapTriggerCreateWithoutZapInput,
		Prisma.ZapTriggerUncheckedCreateWithoutZapInput
	>;
	connectOrCreate?: Prisma.ZapTriggerCreateOrConnectWithoutZapInput;
	upsert?: Prisma.ZapTriggerUpsertWithoutZapInput;
	disconnect?: Prisma.ZapTriggerWhereInput | boolean;
	delete?: Prisma.ZapTriggerWhereInput | boolean;
	connect?: Prisma.ZapTriggerWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.ZapTriggerUpdateToOneWithWhereWithoutZapInput,
			Prisma.ZapTriggerUpdateWithoutZapInput
		>,
		Prisma.ZapTriggerUncheckedUpdateWithoutZapInput
	>;
};

export type ZapTriggerCreateNestedManyWithoutTypeInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapTriggerCreateWithoutTypeInput,
				Prisma.ZapTriggerUncheckedCreateWithoutTypeInput
		  >
		| Prisma.ZapTriggerCreateWithoutTypeInput[]
		| Prisma.ZapTriggerUncheckedCreateWithoutTypeInput[];
	connectOrCreate?:
		| Prisma.ZapTriggerCreateOrConnectWithoutTypeInput
		| Prisma.ZapTriggerCreateOrConnectWithoutTypeInput[];
	createMany?: Prisma.ZapTriggerCreateManyTypeInputEnvelope;
	connect?:
		| Prisma.ZapTriggerWhereUniqueInput
		| Prisma.ZapTriggerWhereUniqueInput[];
};

export type ZapTriggerUncheckedCreateNestedManyWithoutTypeInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapTriggerCreateWithoutTypeInput,
				Prisma.ZapTriggerUncheckedCreateWithoutTypeInput
		  >
		| Prisma.ZapTriggerCreateWithoutTypeInput[]
		| Prisma.ZapTriggerUncheckedCreateWithoutTypeInput[];
	connectOrCreate?:
		| Prisma.ZapTriggerCreateOrConnectWithoutTypeInput
		| Prisma.ZapTriggerCreateOrConnectWithoutTypeInput[];
	createMany?: Prisma.ZapTriggerCreateManyTypeInputEnvelope;
	connect?:
		| Prisma.ZapTriggerWhereUniqueInput
		| Prisma.ZapTriggerWhereUniqueInput[];
};

export type ZapTriggerUpdateManyWithoutTypeNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapTriggerCreateWithoutTypeInput,
				Prisma.ZapTriggerUncheckedCreateWithoutTypeInput
		  >
		| Prisma.ZapTriggerCreateWithoutTypeInput[]
		| Prisma.ZapTriggerUncheckedCreateWithoutTypeInput[];
	connectOrCreate?:
		| Prisma.ZapTriggerCreateOrConnectWithoutTypeInput
		| Prisma.ZapTriggerCreateOrConnectWithoutTypeInput[];
	upsert?:
		| Prisma.ZapTriggerUpsertWithWhereUniqueWithoutTypeInput
		| Prisma.ZapTriggerUpsertWithWhereUniqueWithoutTypeInput[];
	createMany?: Prisma.ZapTriggerCreateManyTypeInputEnvelope;
	set?: Prisma.ZapTriggerWhereUniqueInput | Prisma.ZapTriggerWhereUniqueInput[];
	disconnect?:
		| Prisma.ZapTriggerWhereUniqueInput
		| Prisma.ZapTriggerWhereUniqueInput[];
	delete?:
		| Prisma.ZapTriggerWhereUniqueInput
		| Prisma.ZapTriggerWhereUniqueInput[];
	connect?:
		| Prisma.ZapTriggerWhereUniqueInput
		| Prisma.ZapTriggerWhereUniqueInput[];
	update?:
		| Prisma.ZapTriggerUpdateWithWhereUniqueWithoutTypeInput
		| Prisma.ZapTriggerUpdateWithWhereUniqueWithoutTypeInput[];
	updateMany?:
		| Prisma.ZapTriggerUpdateManyWithWhereWithoutTypeInput
		| Prisma.ZapTriggerUpdateManyWithWhereWithoutTypeInput[];
	deleteMany?:
		| Prisma.ZapTriggerScalarWhereInput
		| Prisma.ZapTriggerScalarWhereInput[];
};

export type ZapTriggerUncheckedUpdateManyWithoutTypeNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapTriggerCreateWithoutTypeInput,
				Prisma.ZapTriggerUncheckedCreateWithoutTypeInput
		  >
		| Prisma.ZapTriggerCreateWithoutTypeInput[]
		| Prisma.ZapTriggerUncheckedCreateWithoutTypeInput[];
	connectOrCreate?:
		| Prisma.ZapTriggerCreateOrConnectWithoutTypeInput
		| Prisma.ZapTriggerCreateOrConnectWithoutTypeInput[];
	upsert?:
		| Prisma.ZapTriggerUpsertWithWhereUniqueWithoutTypeInput
		| Prisma.ZapTriggerUpsertWithWhereUniqueWithoutTypeInput[];
	createMany?: Prisma.ZapTriggerCreateManyTypeInputEnvelope;
	set?: Prisma.ZapTriggerWhereUniqueInput | Prisma.ZapTriggerWhereUniqueInput[];
	disconnect?:
		| Prisma.ZapTriggerWhereUniqueInput
		| Prisma.ZapTriggerWhereUniqueInput[];
	delete?:
		| Prisma.ZapTriggerWhereUniqueInput
		| Prisma.ZapTriggerWhereUniqueInput[];
	connect?:
		| Prisma.ZapTriggerWhereUniqueInput
		| Prisma.ZapTriggerWhereUniqueInput[];
	update?:
		| Prisma.ZapTriggerUpdateWithWhereUniqueWithoutTypeInput
		| Prisma.ZapTriggerUpdateWithWhereUniqueWithoutTypeInput[];
	updateMany?:
		| Prisma.ZapTriggerUpdateManyWithWhereWithoutTypeInput
		| Prisma.ZapTriggerUpdateManyWithWhereWithoutTypeInput[];
	deleteMany?:
		| Prisma.ZapTriggerScalarWhereInput
		| Prisma.ZapTriggerScalarWhereInput[];
};

export type ZapTriggerCreateWithoutZapInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	type: Prisma.TriggerCreateNestedOneWithoutZapTriggersInput;
};

export type ZapTriggerUncheckedCreateWithoutZapInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	triggerId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapTriggerCreateOrConnectWithoutZapInput = {
	where: Prisma.ZapTriggerWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ZapTriggerCreateWithoutZapInput,
		Prisma.ZapTriggerUncheckedCreateWithoutZapInput
	>;
};

export type ZapTriggerUpsertWithoutZapInput = {
	update: Prisma.XOR<
		Prisma.ZapTriggerUpdateWithoutZapInput,
		Prisma.ZapTriggerUncheckedUpdateWithoutZapInput
	>;
	create: Prisma.XOR<
		Prisma.ZapTriggerCreateWithoutZapInput,
		Prisma.ZapTriggerUncheckedCreateWithoutZapInput
	>;
	where?: Prisma.ZapTriggerWhereInput;
};

export type ZapTriggerUpdateToOneWithWhereWithoutZapInput = {
	where?: Prisma.ZapTriggerWhereInput;
	data: Prisma.XOR<
		Prisma.ZapTriggerUpdateWithoutZapInput,
		Prisma.ZapTriggerUncheckedUpdateWithoutZapInput
	>;
};

export type ZapTriggerUpdateWithoutZapInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	type?: Prisma.TriggerUpdateOneRequiredWithoutZapTriggersNestedInput;
};

export type ZapTriggerUncheckedUpdateWithoutZapInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	triggerId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapTriggerCreateWithoutTypeInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zap: Prisma.ZapCreateNestedOneWithoutZapTriggerInput;
};

export type ZapTriggerUncheckedCreateWithoutTypeInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	zapId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapTriggerCreateOrConnectWithoutTypeInput = {
	where: Prisma.ZapTriggerWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ZapTriggerCreateWithoutTypeInput,
		Prisma.ZapTriggerUncheckedCreateWithoutTypeInput
	>;
};

export type ZapTriggerCreateManyTypeInputEnvelope = {
	data:
		| Prisma.ZapTriggerCreateManyTypeInput
		| Prisma.ZapTriggerCreateManyTypeInput[];
	skipDuplicates?: boolean;
};

export type ZapTriggerUpsertWithWhereUniqueWithoutTypeInput = {
	where: Prisma.ZapTriggerWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ZapTriggerUpdateWithoutTypeInput,
		Prisma.ZapTriggerUncheckedUpdateWithoutTypeInput
	>;
	create: Prisma.XOR<
		Prisma.ZapTriggerCreateWithoutTypeInput,
		Prisma.ZapTriggerUncheckedCreateWithoutTypeInput
	>;
};

export type ZapTriggerUpdateWithWhereUniqueWithoutTypeInput = {
	where: Prisma.ZapTriggerWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ZapTriggerUpdateWithoutTypeInput,
		Prisma.ZapTriggerUncheckedUpdateWithoutTypeInput
	>;
};

export type ZapTriggerUpdateManyWithWhereWithoutTypeInput = {
	where: Prisma.ZapTriggerScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ZapTriggerUpdateManyMutationInput,
		Prisma.ZapTriggerUncheckedUpdateManyWithoutTypeInput
	>;
};

export type ZapTriggerScalarWhereInput = {
	AND?: Prisma.ZapTriggerScalarWhereInput | Prisma.ZapTriggerScalarWhereInput[];
	OR?: Prisma.ZapTriggerScalarWhereInput[];
	NOT?: Prisma.ZapTriggerScalarWhereInput | Prisma.ZapTriggerScalarWhereInput[];
	id?: Prisma.StringFilter<"ZapTrigger"> | string;
	metadata?: Prisma.JsonNullableFilter<"ZapTrigger">;
	triggerId?: Prisma.StringFilter<"ZapTrigger"> | string;
	zapId?: Prisma.StringFilter<"ZapTrigger"> | string;
	createdAt?: Prisma.DateTimeFilter<"ZapTrigger"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"ZapTrigger"> | Date | string;
};

export type ZapTriggerCreateManyTypeInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	zapId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapTriggerUpdateWithoutTypeInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zap?: Prisma.ZapUpdateOneRequiredWithoutZapTriggerNestedInput;
};

export type ZapTriggerUncheckedUpdateWithoutTypeInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapTriggerUncheckedUpdateManyWithoutTypeInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapTriggerSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		metadata?: boolean;
		triggerId?: boolean;
		zapId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		type?: boolean | Prisma.TriggerDefaultArgs<ExtArgs>;
		zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zapTrigger"]
>;

export type ZapTriggerSelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		metadata?: boolean;
		triggerId?: boolean;
		zapId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		type?: boolean | Prisma.TriggerDefaultArgs<ExtArgs>;
		zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zapTrigger"]
>;

export type ZapTriggerSelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		metadata?: boolean;
		triggerId?: boolean;
		zapId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		type?: boolean | Prisma.TriggerDefaultArgs<ExtArgs>;
		zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zapTrigger"]
>;

export type ZapTriggerSelectScalar = {
	id?: boolean;
	metadata?: boolean;
	triggerId?: boolean;
	zapId?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type ZapTriggerOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "metadata" | "triggerId" | "zapId" | "createdAt" | "updatedAt",
	ExtArgs["result"]["zapTrigger"]
>;
export type ZapTriggerInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	type?: boolean | Prisma.TriggerDefaultArgs<ExtArgs>;
	zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
};
export type ZapTriggerIncludeCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	type?: boolean | Prisma.TriggerDefaultArgs<ExtArgs>;
	zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
};
export type ZapTriggerIncludeUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	type?: boolean | Prisma.TriggerDefaultArgs<ExtArgs>;
	zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
};

export type $ZapTriggerPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "ZapTrigger";
	objects: {
		type: Prisma.$TriggerPayload<ExtArgs>;
		zap: Prisma.$ZapPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			metadata: runtime.JsonValue | null;
			triggerId: string;
			zapId: string;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["zapTrigger"]
	>;
	composites: {};
};

export type ZapTriggerGetPayload<
	S extends boolean | null | undefined | ZapTriggerDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ZapTriggerPayload, S>;

export type ZapTriggerCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ZapTriggerFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: ZapTriggerCountAggregateInputType | true;
};

export interface ZapTriggerDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["ZapTrigger"];
		meta: { name: "ZapTrigger" };
	};
	/**
	 * Find zero or one ZapTrigger that matches the filter.
	 * @param {ZapTriggerFindUniqueArgs} args - Arguments to find a ZapTrigger
	 * @example
	 * // Get one ZapTrigger
	 * const zapTrigger = await prisma.zapTrigger.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends ZapTriggerFindUniqueArgs>(
		args: Prisma.SelectSubset<T, ZapTriggerFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__ZapTriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapTriggerPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one ZapTrigger that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {ZapTriggerFindUniqueOrThrowArgs} args - Arguments to find a ZapTrigger
	 * @example
	 * // Get one ZapTrigger
	 * const zapTrigger = await prisma.zapTrigger.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends ZapTriggerFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, ZapTriggerFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ZapTriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapTriggerPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ZapTrigger that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapTriggerFindFirstArgs} args - Arguments to find a ZapTrigger
	 * @example
	 * // Get one ZapTrigger
	 * const zapTrigger = await prisma.zapTrigger.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends ZapTriggerFindFirstArgs>(
		args?: Prisma.SelectSubset<T, ZapTriggerFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__ZapTriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapTriggerPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ZapTrigger that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapTriggerFindFirstOrThrowArgs} args - Arguments to find a ZapTrigger
	 * @example
	 * // Get one ZapTrigger
	 * const zapTrigger = await prisma.zapTrigger.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends ZapTriggerFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, ZapTriggerFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ZapTriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapTriggerPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more ZapTriggers that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapTriggerFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all ZapTriggers
	 * const zapTriggers = await prisma.zapTrigger.findMany()
	 *
	 * // Get first 10 ZapTriggers
	 * const zapTriggers = await prisma.zapTrigger.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const zapTriggerWithIdOnly = await prisma.zapTrigger.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends ZapTriggerFindManyArgs>(
		args?: Prisma.SelectSubset<T, ZapTriggerFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapTriggerPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a ZapTrigger.
	 * @param {ZapTriggerCreateArgs} args - Arguments to create a ZapTrigger.
	 * @example
	 * // Create one ZapTrigger
	 * const ZapTrigger = await prisma.zapTrigger.create({
	 *   data: {
	 *     // ... data to create a ZapTrigger
	 *   }
	 * })
	 *
	 */
	create<T extends ZapTriggerCreateArgs>(
		args: Prisma.SelectSubset<T, ZapTriggerCreateArgs<ExtArgs>>,
	): Prisma.Prisma__ZapTriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapTriggerPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many ZapTriggers.
	 * @param {ZapTriggerCreateManyArgs} args - Arguments to create many ZapTriggers.
	 * @example
	 * // Create many ZapTriggers
	 * const zapTrigger = await prisma.zapTrigger.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends ZapTriggerCreateManyArgs>(
		args?: Prisma.SelectSubset<T, ZapTriggerCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many ZapTriggers and returns the data saved in the database.
	 * @param {ZapTriggerCreateManyAndReturnArgs} args - Arguments to create many ZapTriggers.
	 * @example
	 * // Create many ZapTriggers
	 * const zapTrigger = await prisma.zapTrigger.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many ZapTriggers and only return the `id`
	 * const zapTriggerWithIdOnly = await prisma.zapTrigger.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends ZapTriggerCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<T, ZapTriggerCreateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapTriggerPayload<ExtArgs>,
			T,
			"createManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Delete a ZapTrigger.
	 * @param {ZapTriggerDeleteArgs} args - Arguments to delete one ZapTrigger.
	 * @example
	 * // Delete one ZapTrigger
	 * const ZapTrigger = await prisma.zapTrigger.delete({
	 *   where: {
	 *     // ... filter to delete one ZapTrigger
	 *   }
	 * })
	 *
	 */
	delete<T extends ZapTriggerDeleteArgs>(
		args: Prisma.SelectSubset<T, ZapTriggerDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__ZapTriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapTriggerPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one ZapTrigger.
	 * @param {ZapTriggerUpdateArgs} args - Arguments to update one ZapTrigger.
	 * @example
	 * // Update one ZapTrigger
	 * const zapTrigger = await prisma.zapTrigger.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends ZapTriggerUpdateArgs>(
		args: Prisma.SelectSubset<T, ZapTriggerUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__ZapTriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapTriggerPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more ZapTriggers.
	 * @param {ZapTriggerDeleteManyArgs} args - Arguments to filter ZapTriggers to delete.
	 * @example
	 * // Delete a few ZapTriggers
	 * const { count } = await prisma.zapTrigger.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends ZapTriggerDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, ZapTriggerDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ZapTriggers.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapTriggerUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many ZapTriggers
	 * const zapTrigger = await prisma.zapTrigger.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends ZapTriggerUpdateManyArgs>(
		args: Prisma.SelectSubset<T, ZapTriggerUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ZapTriggers and returns the data updated in the database.
	 * @param {ZapTriggerUpdateManyAndReturnArgs} args - Arguments to update many ZapTriggers.
	 * @example
	 * // Update many ZapTriggers
	 * const zapTrigger = await prisma.zapTrigger.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more ZapTriggers and only return the `id`
	 * const zapTriggerWithIdOnly = await prisma.zapTrigger.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends ZapTriggerUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<T, ZapTriggerUpdateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapTriggerPayload<ExtArgs>,
			T,
			"updateManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create or update one ZapTrigger.
	 * @param {ZapTriggerUpsertArgs} args - Arguments to update or create a ZapTrigger.
	 * @example
	 * // Update or create a ZapTrigger
	 * const zapTrigger = await prisma.zapTrigger.upsert({
	 *   create: {
	 *     // ... data to create a ZapTrigger
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the ZapTrigger we want to update
	 *   }
	 * })
	 */
	upsert<T extends ZapTriggerUpsertArgs>(
		args: Prisma.SelectSubset<T, ZapTriggerUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__ZapTriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapTriggerPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of ZapTriggers.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapTriggerCountArgs} args - Arguments to filter ZapTriggers to count.
	 * @example
	 * // Count the number of ZapTriggers
	 * const count = await prisma.zapTrigger.count({
	 *   where: {
	 *     // ... the filter for the ZapTriggers we want to count
	 *   }
	 * })
	 **/
	count<T extends ZapTriggerCountArgs>(
		args?: Prisma.Subset<T, ZapTriggerCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], ZapTriggerCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a ZapTrigger.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapTriggerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends ZapTriggerAggregateArgs>(
		args: Prisma.Subset<T, ZapTriggerAggregateArgs>,
	): Prisma.PrismaPromise<GetZapTriggerAggregateType<T>>;

	/**
	 * Group by ZapTrigger.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapTriggerGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends ZapTriggerGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: ZapTriggerGroupByArgs["orderBy"] }
			: { orderBy?: ZapTriggerGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, ZapTriggerGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetZapTriggerGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the ZapTrigger model
	 */
	readonly fields: ZapTriggerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ZapTrigger.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ZapTriggerClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	type<T extends Prisma.TriggerDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.TriggerDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerClient<
		| runtime.Types.Result.GetResult<
				Prisma.$TriggerPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	zap<T extends Prisma.ZapDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ZapDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__ZapClient<
		| runtime.Types.Result.GetResult<
				Prisma.$ZapPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ZapTrigger model
 */
export interface ZapTriggerFieldRefs {
	readonly id: Prisma.FieldRef<"ZapTrigger", "String">;
	readonly metadata: Prisma.FieldRef<"ZapTrigger", "Json">;
	readonly triggerId: Prisma.FieldRef<"ZapTrigger", "String">;
	readonly zapId: Prisma.FieldRef<"ZapTrigger", "String">;
	readonly createdAt: Prisma.FieldRef<"ZapTrigger", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"ZapTrigger", "DateTime">;
}

// Custom InputTypes
/**
 * ZapTrigger findUnique
 */
export type ZapTriggerFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapTrigger
	 */
	select?: Prisma.ZapTriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapTrigger
	 */
	omit?: Prisma.ZapTriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapTriggerInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapTrigger to fetch.
	 */
	where: Prisma.ZapTriggerWhereUniqueInput;
};

/**
 * ZapTrigger findUniqueOrThrow
 */
export type ZapTriggerFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapTrigger
	 */
	select?: Prisma.ZapTriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapTrigger
	 */
	omit?: Prisma.ZapTriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapTriggerInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapTrigger to fetch.
	 */
	where: Prisma.ZapTriggerWhereUniqueInput;
};

/**
 * ZapTrigger findFirst
 */
export type ZapTriggerFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapTrigger
	 */
	select?: Prisma.ZapTriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapTrigger
	 */
	omit?: Prisma.ZapTriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapTriggerInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapTrigger to fetch.
	 */
	where?: Prisma.ZapTriggerWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapTriggers to fetch.
	 */
	orderBy?:
		| Prisma.ZapTriggerOrderByWithRelationInput
		| Prisma.ZapTriggerOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ZapTriggers.
	 */
	cursor?: Prisma.ZapTriggerWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapTriggers from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapTriggers.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ZapTriggers.
	 */
	distinct?:
		| Prisma.ZapTriggerScalarFieldEnum
		| Prisma.ZapTriggerScalarFieldEnum[];
};

/**
 * ZapTrigger findFirstOrThrow
 */
export type ZapTriggerFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapTrigger
	 */
	select?: Prisma.ZapTriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapTrigger
	 */
	omit?: Prisma.ZapTriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapTriggerInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapTrigger to fetch.
	 */
	where?: Prisma.ZapTriggerWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapTriggers to fetch.
	 */
	orderBy?:
		| Prisma.ZapTriggerOrderByWithRelationInput
		| Prisma.ZapTriggerOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ZapTriggers.
	 */
	cursor?: Prisma.ZapTriggerWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapTriggers from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapTriggers.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ZapTriggers.
	 */
	distinct?:
		| Prisma.ZapTriggerScalarFieldEnum
		| Prisma.ZapTriggerScalarFieldEnum[];
};

/**
 * ZapTrigger findMany
 */
export type ZapTriggerFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapTrigger
	 */
	select?: Prisma.ZapTriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapTrigger
	 */
	omit?: Prisma.ZapTriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapTriggerInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapTriggers to fetch.
	 */
	where?: Prisma.ZapTriggerWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapTriggers to fetch.
	 */
	orderBy?:
		| Prisma.ZapTriggerOrderByWithRelationInput
		| Prisma.ZapTriggerOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing ZapTriggers.
	 */
	cursor?: Prisma.ZapTriggerWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapTriggers from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapTriggers.
	 */
	skip?: number;
	distinct?:
		| Prisma.ZapTriggerScalarFieldEnum
		| Prisma.ZapTriggerScalarFieldEnum[];
};

/**
 * ZapTrigger create
 */
export type ZapTriggerCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapTrigger
	 */
	select?: Prisma.ZapTriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapTrigger
	 */
	omit?: Prisma.ZapTriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapTriggerInclude<ExtArgs> | null;
	/**
	 * The data needed to create a ZapTrigger.
	 */
	data: Prisma.XOR<
		Prisma.ZapTriggerCreateInput,
		Prisma.ZapTriggerUncheckedCreateInput
	>;
};

/**
 * ZapTrigger createMany
 */
export type ZapTriggerCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many ZapTriggers.
	 */
	data: Prisma.ZapTriggerCreateManyInput | Prisma.ZapTriggerCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * ZapTrigger createManyAndReturn
 */
export type ZapTriggerCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapTrigger
	 */
	select?: Prisma.ZapTriggerSelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapTrigger
	 */
	omit?: Prisma.ZapTriggerOmit<ExtArgs> | null;
	/**
	 * The data used to create many ZapTriggers.
	 */
	data: Prisma.ZapTriggerCreateManyInput | Prisma.ZapTriggerCreateManyInput[];
	skipDuplicates?: boolean;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapTriggerIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ZapTrigger update
 */
export type ZapTriggerUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapTrigger
	 */
	select?: Prisma.ZapTriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapTrigger
	 */
	omit?: Prisma.ZapTriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapTriggerInclude<ExtArgs> | null;
	/**
	 * The data needed to update a ZapTrigger.
	 */
	data: Prisma.XOR<
		Prisma.ZapTriggerUpdateInput,
		Prisma.ZapTriggerUncheckedUpdateInput
	>;
	/**
	 * Choose, which ZapTrigger to update.
	 */
	where: Prisma.ZapTriggerWhereUniqueInput;
};

/**
 * ZapTrigger updateMany
 */
export type ZapTriggerUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update ZapTriggers.
	 */
	data: Prisma.XOR<
		Prisma.ZapTriggerUpdateManyMutationInput,
		Prisma.ZapTriggerUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ZapTriggers to update
	 */
	where?: Prisma.ZapTriggerWhereInput;
	/**
	 * Limit how many ZapTriggers to update.
	 */
	limit?: number;
};

/**
 * ZapTrigger updateManyAndReturn
 */
export type ZapTriggerUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapTrigger
	 */
	select?: Prisma.ZapTriggerSelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapTrigger
	 */
	omit?: Prisma.ZapTriggerOmit<ExtArgs> | null;
	/**
	 * The data used to update ZapTriggers.
	 */
	data: Prisma.XOR<
		Prisma.ZapTriggerUpdateManyMutationInput,
		Prisma.ZapTriggerUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ZapTriggers to update
	 */
	where?: Prisma.ZapTriggerWhereInput;
	/**
	 * Limit how many ZapTriggers to update.
	 */
	limit?: number;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapTriggerIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ZapTrigger upsert
 */
export type ZapTriggerUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapTrigger
	 */
	select?: Prisma.ZapTriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapTrigger
	 */
	omit?: Prisma.ZapTriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapTriggerInclude<ExtArgs> | null;
	/**
	 * The filter to search for the ZapTrigger to update in case it exists.
	 */
	where: Prisma.ZapTriggerWhereUniqueInput;
	/**
	 * In case the ZapTrigger found by the `where` argument doesn't exist, create a new ZapTrigger with this data.
	 */
	create: Prisma.XOR<
		Prisma.ZapTriggerCreateInput,
		Prisma.ZapTriggerUncheckedCreateInput
	>;
	/**
	 * In case the ZapTrigger was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.ZapTriggerUpdateInput,
		Prisma.ZapTriggerUncheckedUpdateInput
	>;
};

/**
 * ZapTrigger delete
 */
export type ZapTriggerDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapTrigger
	 */
	select?: Prisma.ZapTriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapTrigger
	 */
	omit?: Prisma.ZapTriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapTriggerInclude<ExtArgs> | null;
	/**
	 * Filter which ZapTrigger to delete.
	 */
	where: Prisma.ZapTriggerWhereUniqueInput;
};

/**
 * ZapTrigger deleteMany
 */
export type ZapTriggerDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ZapTriggers to delete
	 */
	where?: Prisma.ZapTriggerWhereInput;
	/**
	 * Limit how many ZapTriggers to delete.
	 */
	limit?: number;
};

/**
 * ZapTrigger without action
 */
export type ZapTriggerDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapTrigger
	 */
	select?: Prisma.ZapTriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapTrigger
	 */
	omit?: Prisma.ZapTriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapTriggerInclude<ExtArgs> | null;
};
