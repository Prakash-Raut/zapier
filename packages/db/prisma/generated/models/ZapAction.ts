/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `ZapAction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ZapAction
 *
 */
export type ZapActionModel =
	runtime.Types.Result.DefaultSelection<Prisma.$ZapActionPayload>;

export type AggregateZapAction = {
	_count: ZapActionCountAggregateOutputType | null;
	_avg: ZapActionAvgAggregateOutputType | null;
	_sum: ZapActionSumAggregateOutputType | null;
	_min: ZapActionMinAggregateOutputType | null;
	_max: ZapActionMaxAggregateOutputType | null;
};

export type ZapActionAvgAggregateOutputType = {
	sortingOrder: number | null;
};

export type ZapActionSumAggregateOutputType = {
	sortingOrder: number | null;
};

export type ZapActionMinAggregateOutputType = {
	id: string | null;
	actionId: string | null;
	zapId: string | null;
	sortingOrder: number | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ZapActionMaxAggregateOutputType = {
	id: string | null;
	actionId: string | null;
	zapId: string | null;
	sortingOrder: number | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ZapActionCountAggregateOutputType = {
	id: number;
	metadata: number;
	actionId: number;
	zapId: number;
	sortingOrder: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type ZapActionAvgAggregateInputType = {
	sortingOrder?: true;
};

export type ZapActionSumAggregateInputType = {
	sortingOrder?: true;
};

export type ZapActionMinAggregateInputType = {
	id?: true;
	actionId?: true;
	zapId?: true;
	sortingOrder?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ZapActionMaxAggregateInputType = {
	id?: true;
	actionId?: true;
	zapId?: true;
	sortingOrder?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ZapActionCountAggregateInputType = {
	id?: true;
	metadata?: true;
	actionId?: true;
	zapId?: true;
	sortingOrder?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type ZapActionAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ZapAction to aggregate.
	 */
	where?: Prisma.ZapActionWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapActions to fetch.
	 */
	orderBy?:
		| Prisma.ZapActionOrderByWithRelationInput
		| Prisma.ZapActionOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.ZapActionWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapActions from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapActions.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned ZapActions
	 **/
	_count?: true | ZapActionCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to average
	 **/
	_avg?: ZapActionAvgAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to sum
	 **/
	_sum?: ZapActionSumAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: ZapActionMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: ZapActionMaxAggregateInputType;
};

export type GetZapActionAggregateType<T extends ZapActionAggregateArgs> = {
	[P in keyof T & keyof AggregateZapAction]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateZapAction[P]>
		: Prisma.GetScalarType<T[P], AggregateZapAction[P]>;
};

export type ZapActionGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ZapActionWhereInput;
	orderBy?:
		| Prisma.ZapActionOrderByWithAggregationInput
		| Prisma.ZapActionOrderByWithAggregationInput[];
	by: Prisma.ZapActionScalarFieldEnum[] | Prisma.ZapActionScalarFieldEnum;
	having?: Prisma.ZapActionScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: ZapActionCountAggregateInputType | true;
	_avg?: ZapActionAvgAggregateInputType;
	_sum?: ZapActionSumAggregateInputType;
	_min?: ZapActionMinAggregateInputType;
	_max?: ZapActionMaxAggregateInputType;
};

export type ZapActionGroupByOutputType = {
	id: string;
	metadata: runtime.JsonValue | null;
	actionId: string;
	zapId: string;
	sortingOrder: number;
	createdAt: Date;
	updatedAt: Date;
	_count: ZapActionCountAggregateOutputType | null;
	_avg: ZapActionAvgAggregateOutputType | null;
	_sum: ZapActionSumAggregateOutputType | null;
	_min: ZapActionMinAggregateOutputType | null;
	_max: ZapActionMaxAggregateOutputType | null;
};

type GetZapActionGroupByPayload<T extends ZapActionGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<ZapActionGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof ZapActionGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], ZapActionGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], ZapActionGroupByOutputType[P]>;
			}
		>
	>;

export type ZapActionWhereInput = {
	AND?: Prisma.ZapActionWhereInput | Prisma.ZapActionWhereInput[];
	OR?: Prisma.ZapActionWhereInput[];
	NOT?: Prisma.ZapActionWhereInput | Prisma.ZapActionWhereInput[];
	id?: Prisma.StringFilter<"ZapAction"> | string;
	metadata?: Prisma.JsonNullableFilter<"ZapAction">;
	actionId?: Prisma.StringFilter<"ZapAction"> | string;
	zapId?: Prisma.StringFilter<"ZapAction"> | string;
	sortingOrder?: Prisma.IntFilter<"ZapAction"> | number;
	createdAt?: Prisma.DateTimeFilter<"ZapAction"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"ZapAction"> | Date | string;
	type?: Prisma.XOR<Prisma.ActionScalarRelationFilter, Prisma.ActionWhereInput>;
	zap?: Prisma.XOR<Prisma.ZapScalarRelationFilter, Prisma.ZapWhereInput>;
};

export type ZapActionOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	metadata?: Prisma.SortOrderInput | Prisma.SortOrder;
	actionId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	sortingOrder?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	type?: Prisma.ActionOrderByWithRelationInput;
	zap?: Prisma.ZapOrderByWithRelationInput;
};

export type ZapActionWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.ZapActionWhereInput | Prisma.ZapActionWhereInput[];
		OR?: Prisma.ZapActionWhereInput[];
		NOT?: Prisma.ZapActionWhereInput | Prisma.ZapActionWhereInput[];
		metadata?: Prisma.JsonNullableFilter<"ZapAction">;
		actionId?: Prisma.StringFilter<"ZapAction"> | string;
		zapId?: Prisma.StringFilter<"ZapAction"> | string;
		sortingOrder?: Prisma.IntFilter<"ZapAction"> | number;
		createdAt?: Prisma.DateTimeFilter<"ZapAction"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"ZapAction"> | Date | string;
		type?: Prisma.XOR<
			Prisma.ActionScalarRelationFilter,
			Prisma.ActionWhereInput
		>;
		zap?: Prisma.XOR<Prisma.ZapScalarRelationFilter, Prisma.ZapWhereInput>;
	},
	"id"
>;

export type ZapActionOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	metadata?: Prisma.SortOrderInput | Prisma.SortOrder;
	actionId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	sortingOrder?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.ZapActionCountOrderByAggregateInput;
	_avg?: Prisma.ZapActionAvgOrderByAggregateInput;
	_max?: Prisma.ZapActionMaxOrderByAggregateInput;
	_min?: Prisma.ZapActionMinOrderByAggregateInput;
	_sum?: Prisma.ZapActionSumOrderByAggregateInput;
};

export type ZapActionScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.ZapActionScalarWhereWithAggregatesInput
		| Prisma.ZapActionScalarWhereWithAggregatesInput[];
	OR?: Prisma.ZapActionScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.ZapActionScalarWhereWithAggregatesInput
		| Prisma.ZapActionScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"ZapAction"> | string;
	metadata?: Prisma.JsonNullableWithAggregatesFilter<"ZapAction">;
	actionId?: Prisma.StringWithAggregatesFilter<"ZapAction"> | string;
	zapId?: Prisma.StringWithAggregatesFilter<"ZapAction"> | string;
	sortingOrder?: Prisma.IntWithAggregatesFilter<"ZapAction"> | number;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"ZapAction"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ZapAction"> | Date | string;
};

export type ZapActionCreateInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	sortingOrder?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	type: Prisma.ActionCreateNestedOneWithoutZapActionsInput;
	zap: Prisma.ZapCreateNestedOneWithoutZapActionsInput;
};

export type ZapActionUncheckedCreateInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	actionId: string;
	zapId: string;
	sortingOrder?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapActionUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	sortingOrder?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	type?: Prisma.ActionUpdateOneRequiredWithoutZapActionsNestedInput;
	zap?: Prisma.ZapUpdateOneRequiredWithoutZapActionsNestedInput;
};

export type ZapActionUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	actionId?: Prisma.StringFieldUpdateOperationsInput | string;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	sortingOrder?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapActionCreateManyInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	actionId: string;
	zapId: string;
	sortingOrder?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapActionUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	sortingOrder?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapActionUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	actionId?: Prisma.StringFieldUpdateOperationsInput | string;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	sortingOrder?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapActionListRelationFilter = {
	every?: Prisma.ZapActionWhereInput;
	some?: Prisma.ZapActionWhereInput;
	none?: Prisma.ZapActionWhereInput;
};

export type ZapActionOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type ZapActionCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	metadata?: Prisma.SortOrder;
	actionId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	sortingOrder?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapActionAvgOrderByAggregateInput = {
	sortingOrder?: Prisma.SortOrder;
};

export type ZapActionMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	actionId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	sortingOrder?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapActionMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	actionId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	sortingOrder?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapActionSumOrderByAggregateInput = {
	sortingOrder?: Prisma.SortOrder;
};

export type ZapActionCreateNestedManyWithoutZapInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapActionCreateWithoutZapInput,
				Prisma.ZapActionUncheckedCreateWithoutZapInput
		  >
		| Prisma.ZapActionCreateWithoutZapInput[]
		| Prisma.ZapActionUncheckedCreateWithoutZapInput[];
	connectOrCreate?:
		| Prisma.ZapActionCreateOrConnectWithoutZapInput
		| Prisma.ZapActionCreateOrConnectWithoutZapInput[];
	createMany?: Prisma.ZapActionCreateManyZapInputEnvelope;
	connect?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
};

export type ZapActionUncheckedCreateNestedManyWithoutZapInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapActionCreateWithoutZapInput,
				Prisma.ZapActionUncheckedCreateWithoutZapInput
		  >
		| Prisma.ZapActionCreateWithoutZapInput[]
		| Prisma.ZapActionUncheckedCreateWithoutZapInput[];
	connectOrCreate?:
		| Prisma.ZapActionCreateOrConnectWithoutZapInput
		| Prisma.ZapActionCreateOrConnectWithoutZapInput[];
	createMany?: Prisma.ZapActionCreateManyZapInputEnvelope;
	connect?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
};

export type ZapActionUpdateManyWithoutZapNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapActionCreateWithoutZapInput,
				Prisma.ZapActionUncheckedCreateWithoutZapInput
		  >
		| Prisma.ZapActionCreateWithoutZapInput[]
		| Prisma.ZapActionUncheckedCreateWithoutZapInput[];
	connectOrCreate?:
		| Prisma.ZapActionCreateOrConnectWithoutZapInput
		| Prisma.ZapActionCreateOrConnectWithoutZapInput[];
	upsert?:
		| Prisma.ZapActionUpsertWithWhereUniqueWithoutZapInput
		| Prisma.ZapActionUpsertWithWhereUniqueWithoutZapInput[];
	createMany?: Prisma.ZapActionCreateManyZapInputEnvelope;
	set?: Prisma.ZapActionWhereUniqueInput | Prisma.ZapActionWhereUniqueInput[];
	disconnect?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
	delete?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
	connect?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
	update?:
		| Prisma.ZapActionUpdateWithWhereUniqueWithoutZapInput
		| Prisma.ZapActionUpdateWithWhereUniqueWithoutZapInput[];
	updateMany?:
		| Prisma.ZapActionUpdateManyWithWhereWithoutZapInput
		| Prisma.ZapActionUpdateManyWithWhereWithoutZapInput[];
	deleteMany?:
		| Prisma.ZapActionScalarWhereInput
		| Prisma.ZapActionScalarWhereInput[];
};

export type ZapActionUncheckedUpdateManyWithoutZapNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapActionCreateWithoutZapInput,
				Prisma.ZapActionUncheckedCreateWithoutZapInput
		  >
		| Prisma.ZapActionCreateWithoutZapInput[]
		| Prisma.ZapActionUncheckedCreateWithoutZapInput[];
	connectOrCreate?:
		| Prisma.ZapActionCreateOrConnectWithoutZapInput
		| Prisma.ZapActionCreateOrConnectWithoutZapInput[];
	upsert?:
		| Prisma.ZapActionUpsertWithWhereUniqueWithoutZapInput
		| Prisma.ZapActionUpsertWithWhereUniqueWithoutZapInput[];
	createMany?: Prisma.ZapActionCreateManyZapInputEnvelope;
	set?: Prisma.ZapActionWhereUniqueInput | Prisma.ZapActionWhereUniqueInput[];
	disconnect?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
	delete?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
	connect?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
	update?:
		| Prisma.ZapActionUpdateWithWhereUniqueWithoutZapInput
		| Prisma.ZapActionUpdateWithWhereUniqueWithoutZapInput[];
	updateMany?:
		| Prisma.ZapActionUpdateManyWithWhereWithoutZapInput
		| Prisma.ZapActionUpdateManyWithWhereWithoutZapInput[];
	deleteMany?:
		| Prisma.ZapActionScalarWhereInput
		| Prisma.ZapActionScalarWhereInput[];
};

export type IntFieldUpdateOperationsInput = {
	set?: number;
	increment?: number;
	decrement?: number;
	multiply?: number;
	divide?: number;
};

export type ZapActionCreateNestedManyWithoutTypeInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapActionCreateWithoutTypeInput,
				Prisma.ZapActionUncheckedCreateWithoutTypeInput
		  >
		| Prisma.ZapActionCreateWithoutTypeInput[]
		| Prisma.ZapActionUncheckedCreateWithoutTypeInput[];
	connectOrCreate?:
		| Prisma.ZapActionCreateOrConnectWithoutTypeInput
		| Prisma.ZapActionCreateOrConnectWithoutTypeInput[];
	createMany?: Prisma.ZapActionCreateManyTypeInputEnvelope;
	connect?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
};

export type ZapActionUncheckedCreateNestedManyWithoutTypeInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapActionCreateWithoutTypeInput,
				Prisma.ZapActionUncheckedCreateWithoutTypeInput
		  >
		| Prisma.ZapActionCreateWithoutTypeInput[]
		| Prisma.ZapActionUncheckedCreateWithoutTypeInput[];
	connectOrCreate?:
		| Prisma.ZapActionCreateOrConnectWithoutTypeInput
		| Prisma.ZapActionCreateOrConnectWithoutTypeInput[];
	createMany?: Prisma.ZapActionCreateManyTypeInputEnvelope;
	connect?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
};

export type ZapActionUpdateManyWithoutTypeNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapActionCreateWithoutTypeInput,
				Prisma.ZapActionUncheckedCreateWithoutTypeInput
		  >
		| Prisma.ZapActionCreateWithoutTypeInput[]
		| Prisma.ZapActionUncheckedCreateWithoutTypeInput[];
	connectOrCreate?:
		| Prisma.ZapActionCreateOrConnectWithoutTypeInput
		| Prisma.ZapActionCreateOrConnectWithoutTypeInput[];
	upsert?:
		| Prisma.ZapActionUpsertWithWhereUniqueWithoutTypeInput
		| Prisma.ZapActionUpsertWithWhereUniqueWithoutTypeInput[];
	createMany?: Prisma.ZapActionCreateManyTypeInputEnvelope;
	set?: Prisma.ZapActionWhereUniqueInput | Prisma.ZapActionWhereUniqueInput[];
	disconnect?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
	delete?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
	connect?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
	update?:
		| Prisma.ZapActionUpdateWithWhereUniqueWithoutTypeInput
		| Prisma.ZapActionUpdateWithWhereUniqueWithoutTypeInput[];
	updateMany?:
		| Prisma.ZapActionUpdateManyWithWhereWithoutTypeInput
		| Prisma.ZapActionUpdateManyWithWhereWithoutTypeInput[];
	deleteMany?:
		| Prisma.ZapActionScalarWhereInput
		| Prisma.ZapActionScalarWhereInput[];
};

export type ZapActionUncheckedUpdateManyWithoutTypeNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapActionCreateWithoutTypeInput,
				Prisma.ZapActionUncheckedCreateWithoutTypeInput
		  >
		| Prisma.ZapActionCreateWithoutTypeInput[]
		| Prisma.ZapActionUncheckedCreateWithoutTypeInput[];
	connectOrCreate?:
		| Prisma.ZapActionCreateOrConnectWithoutTypeInput
		| Prisma.ZapActionCreateOrConnectWithoutTypeInput[];
	upsert?:
		| Prisma.ZapActionUpsertWithWhereUniqueWithoutTypeInput
		| Prisma.ZapActionUpsertWithWhereUniqueWithoutTypeInput[];
	createMany?: Prisma.ZapActionCreateManyTypeInputEnvelope;
	set?: Prisma.ZapActionWhereUniqueInput | Prisma.ZapActionWhereUniqueInput[];
	disconnect?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
	delete?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
	connect?:
		| Prisma.ZapActionWhereUniqueInput
		| Prisma.ZapActionWhereUniqueInput[];
	update?:
		| Prisma.ZapActionUpdateWithWhereUniqueWithoutTypeInput
		| Prisma.ZapActionUpdateWithWhereUniqueWithoutTypeInput[];
	updateMany?:
		| Prisma.ZapActionUpdateManyWithWhereWithoutTypeInput
		| Prisma.ZapActionUpdateManyWithWhereWithoutTypeInput[];
	deleteMany?:
		| Prisma.ZapActionScalarWhereInput
		| Prisma.ZapActionScalarWhereInput[];
};

export type ZapActionCreateWithoutZapInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	sortingOrder?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	type: Prisma.ActionCreateNestedOneWithoutZapActionsInput;
};

export type ZapActionUncheckedCreateWithoutZapInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	actionId: string;
	sortingOrder?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapActionCreateOrConnectWithoutZapInput = {
	where: Prisma.ZapActionWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ZapActionCreateWithoutZapInput,
		Prisma.ZapActionUncheckedCreateWithoutZapInput
	>;
};

export type ZapActionCreateManyZapInputEnvelope = {
	data:
		| Prisma.ZapActionCreateManyZapInput
		| Prisma.ZapActionCreateManyZapInput[];
	skipDuplicates?: boolean;
};

export type ZapActionUpsertWithWhereUniqueWithoutZapInput = {
	where: Prisma.ZapActionWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ZapActionUpdateWithoutZapInput,
		Prisma.ZapActionUncheckedUpdateWithoutZapInput
	>;
	create: Prisma.XOR<
		Prisma.ZapActionCreateWithoutZapInput,
		Prisma.ZapActionUncheckedCreateWithoutZapInput
	>;
};

export type ZapActionUpdateWithWhereUniqueWithoutZapInput = {
	where: Prisma.ZapActionWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ZapActionUpdateWithoutZapInput,
		Prisma.ZapActionUncheckedUpdateWithoutZapInput
	>;
};

export type ZapActionUpdateManyWithWhereWithoutZapInput = {
	where: Prisma.ZapActionScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ZapActionUpdateManyMutationInput,
		Prisma.ZapActionUncheckedUpdateManyWithoutZapInput
	>;
};

export type ZapActionScalarWhereInput = {
	AND?: Prisma.ZapActionScalarWhereInput | Prisma.ZapActionScalarWhereInput[];
	OR?: Prisma.ZapActionScalarWhereInput[];
	NOT?: Prisma.ZapActionScalarWhereInput | Prisma.ZapActionScalarWhereInput[];
	id?: Prisma.StringFilter<"ZapAction"> | string;
	metadata?: Prisma.JsonNullableFilter<"ZapAction">;
	actionId?: Prisma.StringFilter<"ZapAction"> | string;
	zapId?: Prisma.StringFilter<"ZapAction"> | string;
	sortingOrder?: Prisma.IntFilter<"ZapAction"> | number;
	createdAt?: Prisma.DateTimeFilter<"ZapAction"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"ZapAction"> | Date | string;
};

export type ZapActionCreateWithoutTypeInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	sortingOrder?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zap: Prisma.ZapCreateNestedOneWithoutZapActionsInput;
};

export type ZapActionUncheckedCreateWithoutTypeInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	zapId: string;
	sortingOrder?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapActionCreateOrConnectWithoutTypeInput = {
	where: Prisma.ZapActionWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ZapActionCreateWithoutTypeInput,
		Prisma.ZapActionUncheckedCreateWithoutTypeInput
	>;
};

export type ZapActionCreateManyTypeInputEnvelope = {
	data:
		| Prisma.ZapActionCreateManyTypeInput
		| Prisma.ZapActionCreateManyTypeInput[];
	skipDuplicates?: boolean;
};

export type ZapActionUpsertWithWhereUniqueWithoutTypeInput = {
	where: Prisma.ZapActionWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ZapActionUpdateWithoutTypeInput,
		Prisma.ZapActionUncheckedUpdateWithoutTypeInput
	>;
	create: Prisma.XOR<
		Prisma.ZapActionCreateWithoutTypeInput,
		Prisma.ZapActionUncheckedCreateWithoutTypeInput
	>;
};

export type ZapActionUpdateWithWhereUniqueWithoutTypeInput = {
	where: Prisma.ZapActionWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ZapActionUpdateWithoutTypeInput,
		Prisma.ZapActionUncheckedUpdateWithoutTypeInput
	>;
};

export type ZapActionUpdateManyWithWhereWithoutTypeInput = {
	where: Prisma.ZapActionScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ZapActionUpdateManyMutationInput,
		Prisma.ZapActionUncheckedUpdateManyWithoutTypeInput
	>;
};

export type ZapActionCreateManyZapInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	actionId: string;
	sortingOrder?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapActionUpdateWithoutZapInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	sortingOrder?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	type?: Prisma.ActionUpdateOneRequiredWithoutZapActionsNestedInput;
};

export type ZapActionUncheckedUpdateWithoutZapInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	actionId?: Prisma.StringFieldUpdateOperationsInput | string;
	sortingOrder?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapActionUncheckedUpdateManyWithoutZapInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	actionId?: Prisma.StringFieldUpdateOperationsInput | string;
	sortingOrder?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapActionCreateManyTypeInput = {
	id?: string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	zapId: string;
	sortingOrder?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapActionUpdateWithoutTypeInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	sortingOrder?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zap?: Prisma.ZapUpdateOneRequiredWithoutZapActionsNestedInput;
};

export type ZapActionUncheckedUpdateWithoutTypeInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	sortingOrder?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapActionUncheckedUpdateManyWithoutTypeInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	sortingOrder?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapActionSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		metadata?: boolean;
		actionId?: boolean;
		zapId?: boolean;
		sortingOrder?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		type?: boolean | Prisma.ActionDefaultArgs<ExtArgs>;
		zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zapAction"]
>;

export type ZapActionSelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		metadata?: boolean;
		actionId?: boolean;
		zapId?: boolean;
		sortingOrder?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		type?: boolean | Prisma.ActionDefaultArgs<ExtArgs>;
		zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zapAction"]
>;

export type ZapActionSelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		metadata?: boolean;
		actionId?: boolean;
		zapId?: boolean;
		sortingOrder?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		type?: boolean | Prisma.ActionDefaultArgs<ExtArgs>;
		zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zapAction"]
>;

export type ZapActionSelectScalar = {
	id?: boolean;
	metadata?: boolean;
	actionId?: boolean;
	zapId?: boolean;
	sortingOrder?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type ZapActionOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	| "id"
	| "metadata"
	| "actionId"
	| "zapId"
	| "sortingOrder"
	| "createdAt"
	| "updatedAt",
	ExtArgs["result"]["zapAction"]
>;
export type ZapActionInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	type?: boolean | Prisma.ActionDefaultArgs<ExtArgs>;
	zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
};
export type ZapActionIncludeCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	type?: boolean | Prisma.ActionDefaultArgs<ExtArgs>;
	zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
};
export type ZapActionIncludeUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	type?: boolean | Prisma.ActionDefaultArgs<ExtArgs>;
	zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
};

export type $ZapActionPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "ZapAction";
	objects: {
		type: Prisma.$ActionPayload<ExtArgs>;
		zap: Prisma.$ZapPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			metadata: runtime.JsonValue | null;
			actionId: string;
			zapId: string;
			sortingOrder: number;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["zapAction"]
	>;
	composites: {};
};

export type ZapActionGetPayload<
	S extends boolean | null | undefined | ZapActionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ZapActionPayload, S>;

export type ZapActionCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ZapActionFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: ZapActionCountAggregateInputType | true;
};

export interface ZapActionDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["ZapAction"];
		meta: { name: "ZapAction" };
	};
	/**
	 * Find zero or one ZapAction that matches the filter.
	 * @param {ZapActionFindUniqueArgs} args - Arguments to find a ZapAction
	 * @example
	 * // Get one ZapAction
	 * const zapAction = await prisma.zapAction.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends ZapActionFindUniqueArgs>(
		args: Prisma.SelectSubset<T, ZapActionFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__ZapActionClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapActionPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one ZapAction that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {ZapActionFindUniqueOrThrowArgs} args - Arguments to find a ZapAction
	 * @example
	 * // Get one ZapAction
	 * const zapAction = await prisma.zapAction.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends ZapActionFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, ZapActionFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ZapActionClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapActionPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ZapAction that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapActionFindFirstArgs} args - Arguments to find a ZapAction
	 * @example
	 * // Get one ZapAction
	 * const zapAction = await prisma.zapAction.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends ZapActionFindFirstArgs>(
		args?: Prisma.SelectSubset<T, ZapActionFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__ZapActionClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapActionPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ZapAction that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapActionFindFirstOrThrowArgs} args - Arguments to find a ZapAction
	 * @example
	 * // Get one ZapAction
	 * const zapAction = await prisma.zapAction.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends ZapActionFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, ZapActionFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ZapActionClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapActionPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more ZapActions that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapActionFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all ZapActions
	 * const zapActions = await prisma.zapAction.findMany()
	 *
	 * // Get first 10 ZapActions
	 * const zapActions = await prisma.zapAction.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const zapActionWithIdOnly = await prisma.zapAction.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends ZapActionFindManyArgs>(
		args?: Prisma.SelectSubset<T, ZapActionFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapActionPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a ZapAction.
	 * @param {ZapActionCreateArgs} args - Arguments to create a ZapAction.
	 * @example
	 * // Create one ZapAction
	 * const ZapAction = await prisma.zapAction.create({
	 *   data: {
	 *     // ... data to create a ZapAction
	 *   }
	 * })
	 *
	 */
	create<T extends ZapActionCreateArgs>(
		args: Prisma.SelectSubset<T, ZapActionCreateArgs<ExtArgs>>,
	): Prisma.Prisma__ZapActionClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapActionPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many ZapActions.
	 * @param {ZapActionCreateManyArgs} args - Arguments to create many ZapActions.
	 * @example
	 * // Create many ZapActions
	 * const zapAction = await prisma.zapAction.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends ZapActionCreateManyArgs>(
		args?: Prisma.SelectSubset<T, ZapActionCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many ZapActions and returns the data saved in the database.
	 * @param {ZapActionCreateManyAndReturnArgs} args - Arguments to create many ZapActions.
	 * @example
	 * // Create many ZapActions
	 * const zapAction = await prisma.zapAction.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many ZapActions and only return the `id`
	 * const zapActionWithIdOnly = await prisma.zapAction.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends ZapActionCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<T, ZapActionCreateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapActionPayload<ExtArgs>,
			T,
			"createManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Delete a ZapAction.
	 * @param {ZapActionDeleteArgs} args - Arguments to delete one ZapAction.
	 * @example
	 * // Delete one ZapAction
	 * const ZapAction = await prisma.zapAction.delete({
	 *   where: {
	 *     // ... filter to delete one ZapAction
	 *   }
	 * })
	 *
	 */
	delete<T extends ZapActionDeleteArgs>(
		args: Prisma.SelectSubset<T, ZapActionDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__ZapActionClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapActionPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one ZapAction.
	 * @param {ZapActionUpdateArgs} args - Arguments to update one ZapAction.
	 * @example
	 * // Update one ZapAction
	 * const zapAction = await prisma.zapAction.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends ZapActionUpdateArgs>(
		args: Prisma.SelectSubset<T, ZapActionUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__ZapActionClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapActionPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more ZapActions.
	 * @param {ZapActionDeleteManyArgs} args - Arguments to filter ZapActions to delete.
	 * @example
	 * // Delete a few ZapActions
	 * const { count } = await prisma.zapAction.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends ZapActionDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, ZapActionDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ZapActions.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapActionUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many ZapActions
	 * const zapAction = await prisma.zapAction.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends ZapActionUpdateManyArgs>(
		args: Prisma.SelectSubset<T, ZapActionUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ZapActions and returns the data updated in the database.
	 * @param {ZapActionUpdateManyAndReturnArgs} args - Arguments to update many ZapActions.
	 * @example
	 * // Update many ZapActions
	 * const zapAction = await prisma.zapAction.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more ZapActions and only return the `id`
	 * const zapActionWithIdOnly = await prisma.zapAction.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends ZapActionUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<T, ZapActionUpdateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapActionPayload<ExtArgs>,
			T,
			"updateManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create or update one ZapAction.
	 * @param {ZapActionUpsertArgs} args - Arguments to update or create a ZapAction.
	 * @example
	 * // Update or create a ZapAction
	 * const zapAction = await prisma.zapAction.upsert({
	 *   create: {
	 *     // ... data to create a ZapAction
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the ZapAction we want to update
	 *   }
	 * })
	 */
	upsert<T extends ZapActionUpsertArgs>(
		args: Prisma.SelectSubset<T, ZapActionUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__ZapActionClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapActionPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of ZapActions.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapActionCountArgs} args - Arguments to filter ZapActions to count.
	 * @example
	 * // Count the number of ZapActions
	 * const count = await prisma.zapAction.count({
	 *   where: {
	 *     // ... the filter for the ZapActions we want to count
	 *   }
	 * })
	 **/
	count<T extends ZapActionCountArgs>(
		args?: Prisma.Subset<T, ZapActionCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], ZapActionCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a ZapAction.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends ZapActionAggregateArgs>(
		args: Prisma.Subset<T, ZapActionAggregateArgs>,
	): Prisma.PrismaPromise<GetZapActionAggregateType<T>>;

	/**
	 * Group by ZapAction.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapActionGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends ZapActionGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: ZapActionGroupByArgs["orderBy"] }
			: { orderBy?: ZapActionGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, ZapActionGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetZapActionGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the ZapAction model
	 */
	readonly fields: ZapActionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ZapAction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ZapActionClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	type<T extends Prisma.ActionDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ActionDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__ActionClient<
		| runtime.Types.Result.GetResult<
				Prisma.$ActionPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	zap<T extends Prisma.ZapDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ZapDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__ZapClient<
		| runtime.Types.Result.GetResult<
				Prisma.$ZapPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ZapAction model
 */
export interface ZapActionFieldRefs {
	readonly id: Prisma.FieldRef<"ZapAction", "String">;
	readonly metadata: Prisma.FieldRef<"ZapAction", "Json">;
	readonly actionId: Prisma.FieldRef<"ZapAction", "String">;
	readonly zapId: Prisma.FieldRef<"ZapAction", "String">;
	readonly sortingOrder: Prisma.FieldRef<"ZapAction", "Int">;
	readonly createdAt: Prisma.FieldRef<"ZapAction", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"ZapAction", "DateTime">;
}

// Custom InputTypes
/**
 * ZapAction findUnique
 */
export type ZapActionFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapAction
	 */
	select?: Prisma.ZapActionSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapAction
	 */
	omit?: Prisma.ZapActionOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapActionInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapAction to fetch.
	 */
	where: Prisma.ZapActionWhereUniqueInput;
};

/**
 * ZapAction findUniqueOrThrow
 */
export type ZapActionFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapAction
	 */
	select?: Prisma.ZapActionSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapAction
	 */
	omit?: Prisma.ZapActionOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapActionInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapAction to fetch.
	 */
	where: Prisma.ZapActionWhereUniqueInput;
};

/**
 * ZapAction findFirst
 */
export type ZapActionFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapAction
	 */
	select?: Prisma.ZapActionSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapAction
	 */
	omit?: Prisma.ZapActionOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapActionInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapAction to fetch.
	 */
	where?: Prisma.ZapActionWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapActions to fetch.
	 */
	orderBy?:
		| Prisma.ZapActionOrderByWithRelationInput
		| Prisma.ZapActionOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ZapActions.
	 */
	cursor?: Prisma.ZapActionWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapActions from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapActions.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ZapActions.
	 */
	distinct?:
		| Prisma.ZapActionScalarFieldEnum
		| Prisma.ZapActionScalarFieldEnum[];
};

/**
 * ZapAction findFirstOrThrow
 */
export type ZapActionFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapAction
	 */
	select?: Prisma.ZapActionSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapAction
	 */
	omit?: Prisma.ZapActionOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapActionInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapAction to fetch.
	 */
	where?: Prisma.ZapActionWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapActions to fetch.
	 */
	orderBy?:
		| Prisma.ZapActionOrderByWithRelationInput
		| Prisma.ZapActionOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ZapActions.
	 */
	cursor?: Prisma.ZapActionWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapActions from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapActions.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ZapActions.
	 */
	distinct?:
		| Prisma.ZapActionScalarFieldEnum
		| Prisma.ZapActionScalarFieldEnum[];
};

/**
 * ZapAction findMany
 */
export type ZapActionFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapAction
	 */
	select?: Prisma.ZapActionSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapAction
	 */
	omit?: Prisma.ZapActionOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapActionInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapActions to fetch.
	 */
	where?: Prisma.ZapActionWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapActions to fetch.
	 */
	orderBy?:
		| Prisma.ZapActionOrderByWithRelationInput
		| Prisma.ZapActionOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing ZapActions.
	 */
	cursor?: Prisma.ZapActionWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapActions from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapActions.
	 */
	skip?: number;
	distinct?:
		| Prisma.ZapActionScalarFieldEnum
		| Prisma.ZapActionScalarFieldEnum[];
};

/**
 * ZapAction create
 */
export type ZapActionCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapAction
	 */
	select?: Prisma.ZapActionSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapAction
	 */
	omit?: Prisma.ZapActionOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapActionInclude<ExtArgs> | null;
	/**
	 * The data needed to create a ZapAction.
	 */
	data: Prisma.XOR<
		Prisma.ZapActionCreateInput,
		Prisma.ZapActionUncheckedCreateInput
	>;
};

/**
 * ZapAction createMany
 */
export type ZapActionCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many ZapActions.
	 */
	data: Prisma.ZapActionCreateManyInput | Prisma.ZapActionCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * ZapAction createManyAndReturn
 */
export type ZapActionCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapAction
	 */
	select?: Prisma.ZapActionSelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapAction
	 */
	omit?: Prisma.ZapActionOmit<ExtArgs> | null;
	/**
	 * The data used to create many ZapActions.
	 */
	data: Prisma.ZapActionCreateManyInput | Prisma.ZapActionCreateManyInput[];
	skipDuplicates?: boolean;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapActionIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ZapAction update
 */
export type ZapActionUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapAction
	 */
	select?: Prisma.ZapActionSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapAction
	 */
	omit?: Prisma.ZapActionOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapActionInclude<ExtArgs> | null;
	/**
	 * The data needed to update a ZapAction.
	 */
	data: Prisma.XOR<
		Prisma.ZapActionUpdateInput,
		Prisma.ZapActionUncheckedUpdateInput
	>;
	/**
	 * Choose, which ZapAction to update.
	 */
	where: Prisma.ZapActionWhereUniqueInput;
};

/**
 * ZapAction updateMany
 */
export type ZapActionUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update ZapActions.
	 */
	data: Prisma.XOR<
		Prisma.ZapActionUpdateManyMutationInput,
		Prisma.ZapActionUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ZapActions to update
	 */
	where?: Prisma.ZapActionWhereInput;
	/**
	 * Limit how many ZapActions to update.
	 */
	limit?: number;
};

/**
 * ZapAction updateManyAndReturn
 */
export type ZapActionUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapAction
	 */
	select?: Prisma.ZapActionSelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapAction
	 */
	omit?: Prisma.ZapActionOmit<ExtArgs> | null;
	/**
	 * The data used to update ZapActions.
	 */
	data: Prisma.XOR<
		Prisma.ZapActionUpdateManyMutationInput,
		Prisma.ZapActionUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ZapActions to update
	 */
	where?: Prisma.ZapActionWhereInput;
	/**
	 * Limit how many ZapActions to update.
	 */
	limit?: number;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapActionIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ZapAction upsert
 */
export type ZapActionUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapAction
	 */
	select?: Prisma.ZapActionSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapAction
	 */
	omit?: Prisma.ZapActionOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapActionInclude<ExtArgs> | null;
	/**
	 * The filter to search for the ZapAction to update in case it exists.
	 */
	where: Prisma.ZapActionWhereUniqueInput;
	/**
	 * In case the ZapAction found by the `where` argument doesn't exist, create a new ZapAction with this data.
	 */
	create: Prisma.XOR<
		Prisma.ZapActionCreateInput,
		Prisma.ZapActionUncheckedCreateInput
	>;
	/**
	 * In case the ZapAction was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.ZapActionUpdateInput,
		Prisma.ZapActionUncheckedUpdateInput
	>;
};

/**
 * ZapAction delete
 */
export type ZapActionDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapAction
	 */
	select?: Prisma.ZapActionSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapAction
	 */
	omit?: Prisma.ZapActionOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapActionInclude<ExtArgs> | null;
	/**
	 * Filter which ZapAction to delete.
	 */
	where: Prisma.ZapActionWhereUniqueInput;
};

/**
 * ZapAction deleteMany
 */
export type ZapActionDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ZapActions to delete
	 */
	where?: Prisma.ZapActionWhereInput;
	/**
	 * Limit how many ZapActions to delete.
	 */
	limit?: number;
};

/**
 * ZapAction without action
 */
export type ZapActionDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapAction
	 */
	select?: Prisma.ZapActionSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapAction
	 */
	omit?: Prisma.ZapActionOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapActionInclude<ExtArgs> | null;
};
