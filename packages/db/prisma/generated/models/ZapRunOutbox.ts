/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `ZapRunOutbox` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ZapRunOutbox
 *
 */
export type ZapRunOutboxModel =
	runtime.Types.Result.DefaultSelection<Prisma.$ZapRunOutboxPayload>;

export type AggregateZapRunOutbox = {
	_count: ZapRunOutboxCountAggregateOutputType | null;
	_min: ZapRunOutboxMinAggregateOutputType | null;
	_max: ZapRunOutboxMaxAggregateOutputType | null;
};

export type ZapRunOutboxMinAggregateOutputType = {
	id: string | null;
	zapRunId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ZapRunOutboxMaxAggregateOutputType = {
	id: string | null;
	zapRunId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ZapRunOutboxCountAggregateOutputType = {
	id: number;
	zapRunId: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type ZapRunOutboxMinAggregateInputType = {
	id?: true;
	zapRunId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ZapRunOutboxMaxAggregateInputType = {
	id?: true;
	zapRunId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ZapRunOutboxCountAggregateInputType = {
	id?: true;
	zapRunId?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type ZapRunOutboxAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ZapRunOutbox to aggregate.
	 */
	where?: Prisma.ZapRunOutboxWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapRunOutboxes to fetch.
	 */
	orderBy?:
		| Prisma.ZapRunOutboxOrderByWithRelationInput
		| Prisma.ZapRunOutboxOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.ZapRunOutboxWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapRunOutboxes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapRunOutboxes.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned ZapRunOutboxes
	 **/
	_count?: true | ZapRunOutboxCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: ZapRunOutboxMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: ZapRunOutboxMaxAggregateInputType;
};

export type GetZapRunOutboxAggregateType<T extends ZapRunOutboxAggregateArgs> =
	{
		[P in keyof T & keyof AggregateZapRunOutbox]: P extends "_count" | "count"
			? T[P] extends true
				? number
				: Prisma.GetScalarType<T[P], AggregateZapRunOutbox[P]>
			: Prisma.GetScalarType<T[P], AggregateZapRunOutbox[P]>;
	};

export type ZapRunOutboxGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ZapRunOutboxWhereInput;
	orderBy?:
		| Prisma.ZapRunOutboxOrderByWithAggregationInput
		| Prisma.ZapRunOutboxOrderByWithAggregationInput[];
	by: Prisma.ZapRunOutboxScalarFieldEnum[] | Prisma.ZapRunOutboxScalarFieldEnum;
	having?: Prisma.ZapRunOutboxScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: ZapRunOutboxCountAggregateInputType | true;
	_min?: ZapRunOutboxMinAggregateInputType;
	_max?: ZapRunOutboxMaxAggregateInputType;
};

export type ZapRunOutboxGroupByOutputType = {
	id: string;
	zapRunId: string;
	createdAt: Date;
	updatedAt: Date;
	_count: ZapRunOutboxCountAggregateOutputType | null;
	_min: ZapRunOutboxMinAggregateOutputType | null;
	_max: ZapRunOutboxMaxAggregateOutputType | null;
};

type GetZapRunOutboxGroupByPayload<T extends ZapRunOutboxGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<ZapRunOutboxGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof ZapRunOutboxGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], ZapRunOutboxGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], ZapRunOutboxGroupByOutputType[P]>;
			}
		>
	>;

export type ZapRunOutboxWhereInput = {
	AND?: Prisma.ZapRunOutboxWhereInput | Prisma.ZapRunOutboxWhereInput[];
	OR?: Prisma.ZapRunOutboxWhereInput[];
	NOT?: Prisma.ZapRunOutboxWhereInput | Prisma.ZapRunOutboxWhereInput[];
	id?: Prisma.StringFilter<"ZapRunOutbox"> | string;
	zapRunId?: Prisma.StringFilter<"ZapRunOutbox"> | string;
	createdAt?: Prisma.DateTimeFilter<"ZapRunOutbox"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"ZapRunOutbox"> | Date | string;
	zapRun?: Prisma.XOR<
		Prisma.ZapRunScalarRelationFilter,
		Prisma.ZapRunWhereInput
	>;
};

export type ZapRunOutboxOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	zapRunId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	zapRun?: Prisma.ZapRunOrderByWithRelationInput;
};

export type ZapRunOutboxWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		zapRunId?: string;
		AND?: Prisma.ZapRunOutboxWhereInput | Prisma.ZapRunOutboxWhereInput[];
		OR?: Prisma.ZapRunOutboxWhereInput[];
		NOT?: Prisma.ZapRunOutboxWhereInput | Prisma.ZapRunOutboxWhereInput[];
		createdAt?: Prisma.DateTimeFilter<"ZapRunOutbox"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"ZapRunOutbox"> | Date | string;
		zapRun?: Prisma.XOR<
			Prisma.ZapRunScalarRelationFilter,
			Prisma.ZapRunWhereInput
		>;
	},
	"id" | "zapRunId"
>;

export type ZapRunOutboxOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	zapRunId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.ZapRunOutboxCountOrderByAggregateInput;
	_max?: Prisma.ZapRunOutboxMaxOrderByAggregateInput;
	_min?: Prisma.ZapRunOutboxMinOrderByAggregateInput;
};

export type ZapRunOutboxScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.ZapRunOutboxScalarWhereWithAggregatesInput
		| Prisma.ZapRunOutboxScalarWhereWithAggregatesInput[];
	OR?: Prisma.ZapRunOutboxScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.ZapRunOutboxScalarWhereWithAggregatesInput
		| Prisma.ZapRunOutboxScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"ZapRunOutbox"> | string;
	zapRunId?: Prisma.StringWithAggregatesFilter<"ZapRunOutbox"> | string;
	createdAt?:
		| Prisma.DateTimeWithAggregatesFilter<"ZapRunOutbox">
		| Date
		| string;
	updatedAt?:
		| Prisma.DateTimeWithAggregatesFilter<"ZapRunOutbox">
		| Date
		| string;
};

export type ZapRunOutboxCreateInput = {
	id?: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zapRun: Prisma.ZapRunCreateNestedOneWithoutZapRunOutboxInput;
};

export type ZapRunOutboxUncheckedCreateInput = {
	id?: string;
	zapRunId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapRunOutboxUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zapRun?: Prisma.ZapRunUpdateOneRequiredWithoutZapRunOutboxNestedInput;
};

export type ZapRunOutboxUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	zapRunId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapRunOutboxCreateManyInput = {
	id?: string;
	zapRunId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapRunOutboxUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapRunOutboxUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	zapRunId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapRunOutboxNullableScalarRelationFilter = {
	is?: Prisma.ZapRunOutboxWhereInput | null;
	isNot?: Prisma.ZapRunOutboxWhereInput | null;
};

export type ZapRunOutboxCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	zapRunId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapRunOutboxMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	zapRunId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapRunOutboxMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	zapRunId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapRunOutboxCreateNestedOneWithoutZapRunInput = {
	create?: Prisma.XOR<
		Prisma.ZapRunOutboxCreateWithoutZapRunInput,
		Prisma.ZapRunOutboxUncheckedCreateWithoutZapRunInput
	>;
	connectOrCreate?: Prisma.ZapRunOutboxCreateOrConnectWithoutZapRunInput;
	connect?: Prisma.ZapRunOutboxWhereUniqueInput;
};

export type ZapRunOutboxUncheckedCreateNestedOneWithoutZapRunInput = {
	create?: Prisma.XOR<
		Prisma.ZapRunOutboxCreateWithoutZapRunInput,
		Prisma.ZapRunOutboxUncheckedCreateWithoutZapRunInput
	>;
	connectOrCreate?: Prisma.ZapRunOutboxCreateOrConnectWithoutZapRunInput;
	connect?: Prisma.ZapRunOutboxWhereUniqueInput;
};

export type ZapRunOutboxUpdateOneWithoutZapRunNestedInput = {
	create?: Prisma.XOR<
		Prisma.ZapRunOutboxCreateWithoutZapRunInput,
		Prisma.ZapRunOutboxUncheckedCreateWithoutZapRunInput
	>;
	connectOrCreate?: Prisma.ZapRunOutboxCreateOrConnectWithoutZapRunInput;
	upsert?: Prisma.ZapRunOutboxUpsertWithoutZapRunInput;
	disconnect?: Prisma.ZapRunOutboxWhereInput | boolean;
	delete?: Prisma.ZapRunOutboxWhereInput | boolean;
	connect?: Prisma.ZapRunOutboxWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.ZapRunOutboxUpdateToOneWithWhereWithoutZapRunInput,
			Prisma.ZapRunOutboxUpdateWithoutZapRunInput
		>,
		Prisma.ZapRunOutboxUncheckedUpdateWithoutZapRunInput
	>;
};

export type ZapRunOutboxUncheckedUpdateOneWithoutZapRunNestedInput = {
	create?: Prisma.XOR<
		Prisma.ZapRunOutboxCreateWithoutZapRunInput,
		Prisma.ZapRunOutboxUncheckedCreateWithoutZapRunInput
	>;
	connectOrCreate?: Prisma.ZapRunOutboxCreateOrConnectWithoutZapRunInput;
	upsert?: Prisma.ZapRunOutboxUpsertWithoutZapRunInput;
	disconnect?: Prisma.ZapRunOutboxWhereInput | boolean;
	delete?: Prisma.ZapRunOutboxWhereInput | boolean;
	connect?: Prisma.ZapRunOutboxWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.ZapRunOutboxUpdateToOneWithWhereWithoutZapRunInput,
			Prisma.ZapRunOutboxUpdateWithoutZapRunInput
		>,
		Prisma.ZapRunOutboxUncheckedUpdateWithoutZapRunInput
	>;
};

export type ZapRunOutboxCreateWithoutZapRunInput = {
	id?: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapRunOutboxUncheckedCreateWithoutZapRunInput = {
	id?: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapRunOutboxCreateOrConnectWithoutZapRunInput = {
	where: Prisma.ZapRunOutboxWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ZapRunOutboxCreateWithoutZapRunInput,
		Prisma.ZapRunOutboxUncheckedCreateWithoutZapRunInput
	>;
};

export type ZapRunOutboxUpsertWithoutZapRunInput = {
	update: Prisma.XOR<
		Prisma.ZapRunOutboxUpdateWithoutZapRunInput,
		Prisma.ZapRunOutboxUncheckedUpdateWithoutZapRunInput
	>;
	create: Prisma.XOR<
		Prisma.ZapRunOutboxCreateWithoutZapRunInput,
		Prisma.ZapRunOutboxUncheckedCreateWithoutZapRunInput
	>;
	where?: Prisma.ZapRunOutboxWhereInput;
};

export type ZapRunOutboxUpdateToOneWithWhereWithoutZapRunInput = {
	where?: Prisma.ZapRunOutboxWhereInput;
	data: Prisma.XOR<
		Prisma.ZapRunOutboxUpdateWithoutZapRunInput,
		Prisma.ZapRunOutboxUncheckedUpdateWithoutZapRunInput
	>;
};

export type ZapRunOutboxUpdateWithoutZapRunInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapRunOutboxUncheckedUpdateWithoutZapRunInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapRunOutboxSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		zapRunId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		zapRun?: boolean | Prisma.ZapRunDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zapRunOutbox"]
>;

export type ZapRunOutboxSelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		zapRunId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		zapRun?: boolean | Prisma.ZapRunDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zapRunOutbox"]
>;

export type ZapRunOutboxSelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		zapRunId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		zapRun?: boolean | Prisma.ZapRunDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zapRunOutbox"]
>;

export type ZapRunOutboxSelectScalar = {
	id?: boolean;
	zapRunId?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type ZapRunOutboxOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "zapRunId" | "createdAt" | "updatedAt",
	ExtArgs["result"]["zapRunOutbox"]
>;
export type ZapRunOutboxInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	zapRun?: boolean | Prisma.ZapRunDefaultArgs<ExtArgs>;
};
export type ZapRunOutboxIncludeCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	zapRun?: boolean | Prisma.ZapRunDefaultArgs<ExtArgs>;
};
export type ZapRunOutboxIncludeUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	zapRun?: boolean | Prisma.ZapRunDefaultArgs<ExtArgs>;
};

export type $ZapRunOutboxPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "ZapRunOutbox";
	objects: {
		zapRun: Prisma.$ZapRunPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			zapRunId: string;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["zapRunOutbox"]
	>;
	composites: {};
};

export type ZapRunOutboxGetPayload<
	S extends boolean | null | undefined | ZapRunOutboxDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ZapRunOutboxPayload, S>;

export type ZapRunOutboxCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
	ZapRunOutboxFindManyArgs,
	"select" | "include" | "distinct" | "omit"
> & {
	select?: ZapRunOutboxCountAggregateInputType | true;
};

export interface ZapRunOutboxDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["ZapRunOutbox"];
		meta: { name: "ZapRunOutbox" };
	};
	/**
	 * Find zero or one ZapRunOutbox that matches the filter.
	 * @param {ZapRunOutboxFindUniqueArgs} args - Arguments to find a ZapRunOutbox
	 * @example
	 * // Get one ZapRunOutbox
	 * const zapRunOutbox = await prisma.zapRunOutbox.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends ZapRunOutboxFindUniqueArgs>(
		args: Prisma.SelectSubset<T, ZapRunOutboxFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunOutboxClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunOutboxPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one ZapRunOutbox that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {ZapRunOutboxFindUniqueOrThrowArgs} args - Arguments to find a ZapRunOutbox
	 * @example
	 * // Get one ZapRunOutbox
	 * const zapRunOutbox = await prisma.zapRunOutbox.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends ZapRunOutboxFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, ZapRunOutboxFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunOutboxClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunOutboxPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ZapRunOutbox that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunOutboxFindFirstArgs} args - Arguments to find a ZapRunOutbox
	 * @example
	 * // Get one ZapRunOutbox
	 * const zapRunOutbox = await prisma.zapRunOutbox.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends ZapRunOutboxFindFirstArgs>(
		args?: Prisma.SelectSubset<T, ZapRunOutboxFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunOutboxClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunOutboxPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ZapRunOutbox that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunOutboxFindFirstOrThrowArgs} args - Arguments to find a ZapRunOutbox
	 * @example
	 * // Get one ZapRunOutbox
	 * const zapRunOutbox = await prisma.zapRunOutbox.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends ZapRunOutboxFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, ZapRunOutboxFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunOutboxClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunOutboxPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more ZapRunOutboxes that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunOutboxFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all ZapRunOutboxes
	 * const zapRunOutboxes = await prisma.zapRunOutbox.findMany()
	 *
	 * // Get first 10 ZapRunOutboxes
	 * const zapRunOutboxes = await prisma.zapRunOutbox.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const zapRunOutboxWithIdOnly = await prisma.zapRunOutbox.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends ZapRunOutboxFindManyArgs>(
		args?: Prisma.SelectSubset<T, ZapRunOutboxFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunOutboxPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a ZapRunOutbox.
	 * @param {ZapRunOutboxCreateArgs} args - Arguments to create a ZapRunOutbox.
	 * @example
	 * // Create one ZapRunOutbox
	 * const ZapRunOutbox = await prisma.zapRunOutbox.create({
	 *   data: {
	 *     // ... data to create a ZapRunOutbox
	 *   }
	 * })
	 *
	 */
	create<T extends ZapRunOutboxCreateArgs>(
		args: Prisma.SelectSubset<T, ZapRunOutboxCreateArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunOutboxClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunOutboxPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many ZapRunOutboxes.
	 * @param {ZapRunOutboxCreateManyArgs} args - Arguments to create many ZapRunOutboxes.
	 * @example
	 * // Create many ZapRunOutboxes
	 * const zapRunOutbox = await prisma.zapRunOutbox.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends ZapRunOutboxCreateManyArgs>(
		args?: Prisma.SelectSubset<T, ZapRunOutboxCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many ZapRunOutboxes and returns the data saved in the database.
	 * @param {ZapRunOutboxCreateManyAndReturnArgs} args - Arguments to create many ZapRunOutboxes.
	 * @example
	 * // Create many ZapRunOutboxes
	 * const zapRunOutbox = await prisma.zapRunOutbox.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many ZapRunOutboxes and only return the `id`
	 * const zapRunOutboxWithIdOnly = await prisma.zapRunOutbox.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends ZapRunOutboxCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<T, ZapRunOutboxCreateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunOutboxPayload<ExtArgs>,
			T,
			"createManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Delete a ZapRunOutbox.
	 * @param {ZapRunOutboxDeleteArgs} args - Arguments to delete one ZapRunOutbox.
	 * @example
	 * // Delete one ZapRunOutbox
	 * const ZapRunOutbox = await prisma.zapRunOutbox.delete({
	 *   where: {
	 *     // ... filter to delete one ZapRunOutbox
	 *   }
	 * })
	 *
	 */
	delete<T extends ZapRunOutboxDeleteArgs>(
		args: Prisma.SelectSubset<T, ZapRunOutboxDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunOutboxClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunOutboxPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one ZapRunOutbox.
	 * @param {ZapRunOutboxUpdateArgs} args - Arguments to update one ZapRunOutbox.
	 * @example
	 * // Update one ZapRunOutbox
	 * const zapRunOutbox = await prisma.zapRunOutbox.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends ZapRunOutboxUpdateArgs>(
		args: Prisma.SelectSubset<T, ZapRunOutboxUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunOutboxClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunOutboxPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more ZapRunOutboxes.
	 * @param {ZapRunOutboxDeleteManyArgs} args - Arguments to filter ZapRunOutboxes to delete.
	 * @example
	 * // Delete a few ZapRunOutboxes
	 * const { count } = await prisma.zapRunOutbox.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends ZapRunOutboxDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, ZapRunOutboxDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ZapRunOutboxes.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunOutboxUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many ZapRunOutboxes
	 * const zapRunOutbox = await prisma.zapRunOutbox.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends ZapRunOutboxUpdateManyArgs>(
		args: Prisma.SelectSubset<T, ZapRunOutboxUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ZapRunOutboxes and returns the data updated in the database.
	 * @param {ZapRunOutboxUpdateManyAndReturnArgs} args - Arguments to update many ZapRunOutboxes.
	 * @example
	 * // Update many ZapRunOutboxes
	 * const zapRunOutbox = await prisma.zapRunOutbox.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more ZapRunOutboxes and only return the `id`
	 * const zapRunOutboxWithIdOnly = await prisma.zapRunOutbox.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends ZapRunOutboxUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<T, ZapRunOutboxUpdateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunOutboxPayload<ExtArgs>,
			T,
			"updateManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create or update one ZapRunOutbox.
	 * @param {ZapRunOutboxUpsertArgs} args - Arguments to update or create a ZapRunOutbox.
	 * @example
	 * // Update or create a ZapRunOutbox
	 * const zapRunOutbox = await prisma.zapRunOutbox.upsert({
	 *   create: {
	 *     // ... data to create a ZapRunOutbox
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the ZapRunOutbox we want to update
	 *   }
	 * })
	 */
	upsert<T extends ZapRunOutboxUpsertArgs>(
		args: Prisma.SelectSubset<T, ZapRunOutboxUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunOutboxClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapRunOutboxPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of ZapRunOutboxes.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunOutboxCountArgs} args - Arguments to filter ZapRunOutboxes to count.
	 * @example
	 * // Count the number of ZapRunOutboxes
	 * const count = await prisma.zapRunOutbox.count({
	 *   where: {
	 *     // ... the filter for the ZapRunOutboxes we want to count
	 *   }
	 * })
	 **/
	count<T extends ZapRunOutboxCountArgs>(
		args?: Prisma.Subset<T, ZapRunOutboxCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<
						T["select"],
						ZapRunOutboxCountAggregateOutputType
					>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a ZapRunOutbox.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunOutboxAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends ZapRunOutboxAggregateArgs>(
		args: Prisma.Subset<T, ZapRunOutboxAggregateArgs>,
	): Prisma.PrismaPromise<GetZapRunOutboxAggregateType<T>>;

	/**
	 * Group by ZapRunOutbox.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapRunOutboxGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends ZapRunOutboxGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: ZapRunOutboxGroupByArgs["orderBy"] }
			: { orderBy?: ZapRunOutboxGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, ZapRunOutboxGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetZapRunOutboxGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the ZapRunOutbox model
	 */
	readonly fields: ZapRunOutboxFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ZapRunOutbox.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ZapRunOutboxClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	zapRun<T extends Prisma.ZapRunDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ZapRunDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__ZapRunClient<
		| runtime.Types.Result.GetResult<
				Prisma.$ZapRunPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ZapRunOutbox model
 */
export interface ZapRunOutboxFieldRefs {
	readonly id: Prisma.FieldRef<"ZapRunOutbox", "String">;
	readonly zapRunId: Prisma.FieldRef<"ZapRunOutbox", "String">;
	readonly createdAt: Prisma.FieldRef<"ZapRunOutbox", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"ZapRunOutbox", "DateTime">;
}

// Custom InputTypes
/**
 * ZapRunOutbox findUnique
 */
export type ZapRunOutboxFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRunOutbox
	 */
	select?: Prisma.ZapRunOutboxSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRunOutbox
	 */
	omit?: Prisma.ZapRunOutboxOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunOutboxInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapRunOutbox to fetch.
	 */
	where: Prisma.ZapRunOutboxWhereUniqueInput;
};

/**
 * ZapRunOutbox findUniqueOrThrow
 */
export type ZapRunOutboxFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRunOutbox
	 */
	select?: Prisma.ZapRunOutboxSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRunOutbox
	 */
	omit?: Prisma.ZapRunOutboxOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunOutboxInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapRunOutbox to fetch.
	 */
	where: Prisma.ZapRunOutboxWhereUniqueInput;
};

/**
 * ZapRunOutbox findFirst
 */
export type ZapRunOutboxFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRunOutbox
	 */
	select?: Prisma.ZapRunOutboxSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRunOutbox
	 */
	omit?: Prisma.ZapRunOutboxOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunOutboxInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapRunOutbox to fetch.
	 */
	where?: Prisma.ZapRunOutboxWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapRunOutboxes to fetch.
	 */
	orderBy?:
		| Prisma.ZapRunOutboxOrderByWithRelationInput
		| Prisma.ZapRunOutboxOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ZapRunOutboxes.
	 */
	cursor?: Prisma.ZapRunOutboxWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapRunOutboxes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapRunOutboxes.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ZapRunOutboxes.
	 */
	distinct?:
		| Prisma.ZapRunOutboxScalarFieldEnum
		| Prisma.ZapRunOutboxScalarFieldEnum[];
};

/**
 * ZapRunOutbox findFirstOrThrow
 */
export type ZapRunOutboxFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRunOutbox
	 */
	select?: Prisma.ZapRunOutboxSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRunOutbox
	 */
	omit?: Prisma.ZapRunOutboxOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunOutboxInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapRunOutbox to fetch.
	 */
	where?: Prisma.ZapRunOutboxWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapRunOutboxes to fetch.
	 */
	orderBy?:
		| Prisma.ZapRunOutboxOrderByWithRelationInput
		| Prisma.ZapRunOutboxOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ZapRunOutboxes.
	 */
	cursor?: Prisma.ZapRunOutboxWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapRunOutboxes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapRunOutboxes.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ZapRunOutboxes.
	 */
	distinct?:
		| Prisma.ZapRunOutboxScalarFieldEnum
		| Prisma.ZapRunOutboxScalarFieldEnum[];
};

/**
 * ZapRunOutbox findMany
 */
export type ZapRunOutboxFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRunOutbox
	 */
	select?: Prisma.ZapRunOutboxSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRunOutbox
	 */
	omit?: Prisma.ZapRunOutboxOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunOutboxInclude<ExtArgs> | null;
	/**
	 * Filter, which ZapRunOutboxes to fetch.
	 */
	where?: Prisma.ZapRunOutboxWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ZapRunOutboxes to fetch.
	 */
	orderBy?:
		| Prisma.ZapRunOutboxOrderByWithRelationInput
		| Prisma.ZapRunOutboxOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing ZapRunOutboxes.
	 */
	cursor?: Prisma.ZapRunOutboxWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ZapRunOutboxes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ZapRunOutboxes.
	 */
	skip?: number;
	distinct?:
		| Prisma.ZapRunOutboxScalarFieldEnum
		| Prisma.ZapRunOutboxScalarFieldEnum[];
};

/**
 * ZapRunOutbox create
 */
export type ZapRunOutboxCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRunOutbox
	 */
	select?: Prisma.ZapRunOutboxSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRunOutbox
	 */
	omit?: Prisma.ZapRunOutboxOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunOutboxInclude<ExtArgs> | null;
	/**
	 * The data needed to create a ZapRunOutbox.
	 */
	data: Prisma.XOR<
		Prisma.ZapRunOutboxCreateInput,
		Prisma.ZapRunOutboxUncheckedCreateInput
	>;
};

/**
 * ZapRunOutbox createMany
 */
export type ZapRunOutboxCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many ZapRunOutboxes.
	 */
	data:
		| Prisma.ZapRunOutboxCreateManyInput
		| Prisma.ZapRunOutboxCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * ZapRunOutbox createManyAndReturn
 */
export type ZapRunOutboxCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRunOutbox
	 */
	select?: Prisma.ZapRunOutboxSelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRunOutbox
	 */
	omit?: Prisma.ZapRunOutboxOmit<ExtArgs> | null;
	/**
	 * The data used to create many ZapRunOutboxes.
	 */
	data:
		| Prisma.ZapRunOutboxCreateManyInput
		| Prisma.ZapRunOutboxCreateManyInput[];
	skipDuplicates?: boolean;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunOutboxIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ZapRunOutbox update
 */
export type ZapRunOutboxUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRunOutbox
	 */
	select?: Prisma.ZapRunOutboxSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRunOutbox
	 */
	omit?: Prisma.ZapRunOutboxOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunOutboxInclude<ExtArgs> | null;
	/**
	 * The data needed to update a ZapRunOutbox.
	 */
	data: Prisma.XOR<
		Prisma.ZapRunOutboxUpdateInput,
		Prisma.ZapRunOutboxUncheckedUpdateInput
	>;
	/**
	 * Choose, which ZapRunOutbox to update.
	 */
	where: Prisma.ZapRunOutboxWhereUniqueInput;
};

/**
 * ZapRunOutbox updateMany
 */
export type ZapRunOutboxUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update ZapRunOutboxes.
	 */
	data: Prisma.XOR<
		Prisma.ZapRunOutboxUpdateManyMutationInput,
		Prisma.ZapRunOutboxUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ZapRunOutboxes to update
	 */
	where?: Prisma.ZapRunOutboxWhereInput;
	/**
	 * Limit how many ZapRunOutboxes to update.
	 */
	limit?: number;
};

/**
 * ZapRunOutbox updateManyAndReturn
 */
export type ZapRunOutboxUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRunOutbox
	 */
	select?: Prisma.ZapRunOutboxSelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRunOutbox
	 */
	omit?: Prisma.ZapRunOutboxOmit<ExtArgs> | null;
	/**
	 * The data used to update ZapRunOutboxes.
	 */
	data: Prisma.XOR<
		Prisma.ZapRunOutboxUpdateManyMutationInput,
		Prisma.ZapRunOutboxUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ZapRunOutboxes to update
	 */
	where?: Prisma.ZapRunOutboxWhereInput;
	/**
	 * Limit how many ZapRunOutboxes to update.
	 */
	limit?: number;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunOutboxIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ZapRunOutbox upsert
 */
export type ZapRunOutboxUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRunOutbox
	 */
	select?: Prisma.ZapRunOutboxSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRunOutbox
	 */
	omit?: Prisma.ZapRunOutboxOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunOutboxInclude<ExtArgs> | null;
	/**
	 * The filter to search for the ZapRunOutbox to update in case it exists.
	 */
	where: Prisma.ZapRunOutboxWhereUniqueInput;
	/**
	 * In case the ZapRunOutbox found by the `where` argument doesn't exist, create a new ZapRunOutbox with this data.
	 */
	create: Prisma.XOR<
		Prisma.ZapRunOutboxCreateInput,
		Prisma.ZapRunOutboxUncheckedCreateInput
	>;
	/**
	 * In case the ZapRunOutbox was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.ZapRunOutboxUpdateInput,
		Prisma.ZapRunOutboxUncheckedUpdateInput
	>;
};

/**
 * ZapRunOutbox delete
 */
export type ZapRunOutboxDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRunOutbox
	 */
	select?: Prisma.ZapRunOutboxSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRunOutbox
	 */
	omit?: Prisma.ZapRunOutboxOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunOutboxInclude<ExtArgs> | null;
	/**
	 * Filter which ZapRunOutbox to delete.
	 */
	where: Prisma.ZapRunOutboxWhereUniqueInput;
};

/**
 * ZapRunOutbox deleteMany
 */
export type ZapRunOutboxDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ZapRunOutboxes to delete
	 */
	where?: Prisma.ZapRunOutboxWhereInput;
	/**
	 * Limit how many ZapRunOutboxes to delete.
	 */
	limit?: number;
};

/**
 * ZapRunOutbox without action
 */
export type ZapRunOutboxDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRunOutbox
	 */
	select?: Prisma.ZapRunOutboxSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRunOutbox
	 */
	omit?: Prisma.ZapRunOutboxOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunOutboxInclude<ExtArgs> | null;
};
