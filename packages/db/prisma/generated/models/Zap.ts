/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Zap` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Zap
 *
 */
export type ZapModel =
	runtime.Types.Result.DefaultSelection<Prisma.$ZapPayload>;

export type AggregateZap = {
	_count: ZapCountAggregateOutputType | null;
	_min: ZapMinAggregateOutputType | null;
	_max: ZapMaxAggregateOutputType | null;
};

export type ZapMinAggregateOutputType = {
	id: string | null;
	name: string | null;
	description: string | null;
	userId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ZapMaxAggregateOutputType = {
	id: string | null;
	name: string | null;
	description: string | null;
	userId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ZapCountAggregateOutputType = {
	id: number;
	name: number;
	description: number;
	userId: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type ZapMinAggregateInputType = {
	id?: true;
	name?: true;
	description?: true;
	userId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ZapMaxAggregateInputType = {
	id?: true;
	name?: true;
	description?: true;
	userId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ZapCountAggregateInputType = {
	id?: true;
	name?: true;
	description?: true;
	userId?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type ZapAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Zap to aggregate.
	 */
	where?: Prisma.ZapWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Zaps to fetch.
	 */
	orderBy?:
		| Prisma.ZapOrderByWithRelationInput
		| Prisma.ZapOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.ZapWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Zaps from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Zaps.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned Zaps
	 **/
	_count?: true | ZapCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: ZapMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: ZapMaxAggregateInputType;
};

export type GetZapAggregateType<T extends ZapAggregateArgs> = {
	[P in keyof T & keyof AggregateZap]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateZap[P]>
		: Prisma.GetScalarType<T[P], AggregateZap[P]>;
};

export type ZapGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ZapWhereInput;
	orderBy?:
		| Prisma.ZapOrderByWithAggregationInput
		| Prisma.ZapOrderByWithAggregationInput[];
	by: Prisma.ZapScalarFieldEnum[] | Prisma.ZapScalarFieldEnum;
	having?: Prisma.ZapScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: ZapCountAggregateInputType | true;
	_min?: ZapMinAggregateInputType;
	_max?: ZapMaxAggregateInputType;
};

export type ZapGroupByOutputType = {
	id: string;
	name: string;
	description: string | null;
	userId: string;
	createdAt: Date;
	updatedAt: Date;
	_count: ZapCountAggregateOutputType | null;
	_min: ZapMinAggregateOutputType | null;
	_max: ZapMaxAggregateOutputType | null;
};

type GetZapGroupByPayload<T extends ZapGroupByArgs> = Prisma.PrismaPromise<
	Array<
		Prisma.PickEnumerable<ZapGroupByOutputType, T["by"]> & {
			[P in keyof T & keyof ZapGroupByOutputType]: P extends "_count"
				? T[P] extends boolean
					? number
					: Prisma.GetScalarType<T[P], ZapGroupByOutputType[P]>
				: Prisma.GetScalarType<T[P], ZapGroupByOutputType[P]>;
		}
	>
>;

export type ZapWhereInput = {
	AND?: Prisma.ZapWhereInput | Prisma.ZapWhereInput[];
	OR?: Prisma.ZapWhereInput[];
	NOT?: Prisma.ZapWhereInput | Prisma.ZapWhereInput[];
	id?: Prisma.StringFilter<"Zap"> | string;
	name?: Prisma.StringFilter<"Zap"> | string;
	description?: Prisma.StringNullableFilter<"Zap"> | string | null;
	userId?: Prisma.StringFilter<"Zap"> | string;
	createdAt?: Prisma.DateTimeFilter<"Zap"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Zap"> | Date | string;
	user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
	zapTrigger?: Prisma.XOR<
		Prisma.ZapTriggerNullableScalarRelationFilter,
		Prisma.ZapTriggerWhereInput
	> | null;
	zapActions?: Prisma.ZapActionListRelationFilter;
	zapRuns?: Prisma.ZapRunListRelationFilter;
};

export type ZapOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	description?: Prisma.SortOrderInput | Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	user?: Prisma.UserOrderByWithRelationInput;
	zapTrigger?: Prisma.ZapTriggerOrderByWithRelationInput;
	zapActions?: Prisma.ZapActionOrderByRelationAggregateInput;
	zapRuns?: Prisma.ZapRunOrderByRelationAggregateInput;
};

export type ZapWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.ZapWhereInput | Prisma.ZapWhereInput[];
		OR?: Prisma.ZapWhereInput[];
		NOT?: Prisma.ZapWhereInput | Prisma.ZapWhereInput[];
		name?: Prisma.StringFilter<"Zap"> | string;
		description?: Prisma.StringNullableFilter<"Zap"> | string | null;
		userId?: Prisma.StringFilter<"Zap"> | string;
		createdAt?: Prisma.DateTimeFilter<"Zap"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"Zap"> | Date | string;
		user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
		zapTrigger?: Prisma.XOR<
			Prisma.ZapTriggerNullableScalarRelationFilter,
			Prisma.ZapTriggerWhereInput
		> | null;
		zapActions?: Prisma.ZapActionListRelationFilter;
		zapRuns?: Prisma.ZapRunListRelationFilter;
	},
	"id"
>;

export type ZapOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	description?: Prisma.SortOrderInput | Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.ZapCountOrderByAggregateInput;
	_max?: Prisma.ZapMaxOrderByAggregateInput;
	_min?: Prisma.ZapMinOrderByAggregateInput;
};

export type ZapScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.ZapScalarWhereWithAggregatesInput
		| Prisma.ZapScalarWhereWithAggregatesInput[];
	OR?: Prisma.ZapScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.ZapScalarWhereWithAggregatesInput
		| Prisma.ZapScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"Zap"> | string;
	name?: Prisma.StringWithAggregatesFilter<"Zap"> | string;
	description?:
		| Prisma.StringNullableWithAggregatesFilter<"Zap">
		| string
		| null;
	userId?: Prisma.StringWithAggregatesFilter<"Zap"> | string;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"Zap"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Zap"> | Date | string;
};

export type ZapCreateInput = {
	id?: string;
	name: string;
	description?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutZapsInput;
	zapTrigger?: Prisma.ZapTriggerCreateNestedOneWithoutZapInput;
	zapActions?: Prisma.ZapActionCreateNestedManyWithoutZapInput;
	zapRuns?: Prisma.ZapRunCreateNestedManyWithoutZapInput;
};

export type ZapUncheckedCreateInput = {
	id?: string;
	name: string;
	description?: string | null;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zapTrigger?: Prisma.ZapTriggerUncheckedCreateNestedOneWithoutZapInput;
	zapActions?: Prisma.ZapActionUncheckedCreateNestedManyWithoutZapInput;
	zapRuns?: Prisma.ZapRunUncheckedCreateNestedManyWithoutZapInput;
};

export type ZapUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutZapsNestedInput;
	zapTrigger?: Prisma.ZapTriggerUpdateOneWithoutZapNestedInput;
	zapActions?: Prisma.ZapActionUpdateManyWithoutZapNestedInput;
	zapRuns?: Prisma.ZapRunUpdateManyWithoutZapNestedInput;
};

export type ZapUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zapTrigger?: Prisma.ZapTriggerUncheckedUpdateOneWithoutZapNestedInput;
	zapActions?: Prisma.ZapActionUncheckedUpdateManyWithoutZapNestedInput;
	zapRuns?: Prisma.ZapRunUncheckedUpdateManyWithoutZapNestedInput;
};

export type ZapCreateManyInput = {
	id?: string;
	name: string;
	description?: string | null;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ZapListRelationFilter = {
	every?: Prisma.ZapWhereInput;
	some?: Prisma.ZapWhereInput;
	none?: Prisma.ZapWhereInput;
};

export type ZapOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type ZapCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ZapScalarRelationFilter = {
	is?: Prisma.ZapWhereInput;
	isNot?: Prisma.ZapWhereInput;
};

export type ZapCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapCreateWithoutUserInput,
				Prisma.ZapUncheckedCreateWithoutUserInput
		  >
		| Prisma.ZapCreateWithoutUserInput[]
		| Prisma.ZapUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.ZapCreateOrConnectWithoutUserInput
		| Prisma.ZapCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.ZapCreateManyUserInputEnvelope;
	connect?: Prisma.ZapWhereUniqueInput | Prisma.ZapWhereUniqueInput[];
};

export type ZapUncheckedCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapCreateWithoutUserInput,
				Prisma.ZapUncheckedCreateWithoutUserInput
		  >
		| Prisma.ZapCreateWithoutUserInput[]
		| Prisma.ZapUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.ZapCreateOrConnectWithoutUserInput
		| Prisma.ZapCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.ZapCreateManyUserInputEnvelope;
	connect?: Prisma.ZapWhereUniqueInput | Prisma.ZapWhereUniqueInput[];
};

export type ZapUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapCreateWithoutUserInput,
				Prisma.ZapUncheckedCreateWithoutUserInput
		  >
		| Prisma.ZapCreateWithoutUserInput[]
		| Prisma.ZapUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.ZapCreateOrConnectWithoutUserInput
		| Prisma.ZapCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.ZapUpsertWithWhereUniqueWithoutUserInput
		| Prisma.ZapUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.ZapCreateManyUserInputEnvelope;
	set?: Prisma.ZapWhereUniqueInput | Prisma.ZapWhereUniqueInput[];
	disconnect?: Prisma.ZapWhereUniqueInput | Prisma.ZapWhereUniqueInput[];
	delete?: Prisma.ZapWhereUniqueInput | Prisma.ZapWhereUniqueInput[];
	connect?: Prisma.ZapWhereUniqueInput | Prisma.ZapWhereUniqueInput[];
	update?:
		| Prisma.ZapUpdateWithWhereUniqueWithoutUserInput
		| Prisma.ZapUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.ZapUpdateManyWithWhereWithoutUserInput
		| Prisma.ZapUpdateManyWithWhereWithoutUserInput[];
	deleteMany?: Prisma.ZapScalarWhereInput | Prisma.ZapScalarWhereInput[];
};

export type ZapUncheckedUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ZapCreateWithoutUserInput,
				Prisma.ZapUncheckedCreateWithoutUserInput
		  >
		| Prisma.ZapCreateWithoutUserInput[]
		| Prisma.ZapUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.ZapCreateOrConnectWithoutUserInput
		| Prisma.ZapCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.ZapUpsertWithWhereUniqueWithoutUserInput
		| Prisma.ZapUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.ZapCreateManyUserInputEnvelope;
	set?: Prisma.ZapWhereUniqueInput | Prisma.ZapWhereUniqueInput[];
	disconnect?: Prisma.ZapWhereUniqueInput | Prisma.ZapWhereUniqueInput[];
	delete?: Prisma.ZapWhereUniqueInput | Prisma.ZapWhereUniqueInput[];
	connect?: Prisma.ZapWhereUniqueInput | Prisma.ZapWhereUniqueInput[];
	update?:
		| Prisma.ZapUpdateWithWhereUniqueWithoutUserInput
		| Prisma.ZapUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.ZapUpdateManyWithWhereWithoutUserInput
		| Prisma.ZapUpdateManyWithWhereWithoutUserInput[];
	deleteMany?: Prisma.ZapScalarWhereInput | Prisma.ZapScalarWhereInput[];
};

export type ZapCreateNestedOneWithoutZapTriggerInput = {
	create?: Prisma.XOR<
		Prisma.ZapCreateWithoutZapTriggerInput,
		Prisma.ZapUncheckedCreateWithoutZapTriggerInput
	>;
	connectOrCreate?: Prisma.ZapCreateOrConnectWithoutZapTriggerInput;
	connect?: Prisma.ZapWhereUniqueInput;
};

export type ZapUpdateOneRequiredWithoutZapTriggerNestedInput = {
	create?: Prisma.XOR<
		Prisma.ZapCreateWithoutZapTriggerInput,
		Prisma.ZapUncheckedCreateWithoutZapTriggerInput
	>;
	connectOrCreate?: Prisma.ZapCreateOrConnectWithoutZapTriggerInput;
	upsert?: Prisma.ZapUpsertWithoutZapTriggerInput;
	connect?: Prisma.ZapWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.ZapUpdateToOneWithWhereWithoutZapTriggerInput,
			Prisma.ZapUpdateWithoutZapTriggerInput
		>,
		Prisma.ZapUncheckedUpdateWithoutZapTriggerInput
	>;
};

export type ZapCreateNestedOneWithoutZapActionsInput = {
	create?: Prisma.XOR<
		Prisma.ZapCreateWithoutZapActionsInput,
		Prisma.ZapUncheckedCreateWithoutZapActionsInput
	>;
	connectOrCreate?: Prisma.ZapCreateOrConnectWithoutZapActionsInput;
	connect?: Prisma.ZapWhereUniqueInput;
};

export type ZapUpdateOneRequiredWithoutZapActionsNestedInput = {
	create?: Prisma.XOR<
		Prisma.ZapCreateWithoutZapActionsInput,
		Prisma.ZapUncheckedCreateWithoutZapActionsInput
	>;
	connectOrCreate?: Prisma.ZapCreateOrConnectWithoutZapActionsInput;
	upsert?: Prisma.ZapUpsertWithoutZapActionsInput;
	connect?: Prisma.ZapWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.ZapUpdateToOneWithWhereWithoutZapActionsInput,
			Prisma.ZapUpdateWithoutZapActionsInput
		>,
		Prisma.ZapUncheckedUpdateWithoutZapActionsInput
	>;
};

export type ZapCreateNestedOneWithoutZapRunsInput = {
	create?: Prisma.XOR<
		Prisma.ZapCreateWithoutZapRunsInput,
		Prisma.ZapUncheckedCreateWithoutZapRunsInput
	>;
	connectOrCreate?: Prisma.ZapCreateOrConnectWithoutZapRunsInput;
	connect?: Prisma.ZapWhereUniqueInput;
};

export type ZapUpdateOneRequiredWithoutZapRunsNestedInput = {
	create?: Prisma.XOR<
		Prisma.ZapCreateWithoutZapRunsInput,
		Prisma.ZapUncheckedCreateWithoutZapRunsInput
	>;
	connectOrCreate?: Prisma.ZapCreateOrConnectWithoutZapRunsInput;
	upsert?: Prisma.ZapUpsertWithoutZapRunsInput;
	connect?: Prisma.ZapWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.ZapUpdateToOneWithWhereWithoutZapRunsInput,
			Prisma.ZapUpdateWithoutZapRunsInput
		>,
		Prisma.ZapUncheckedUpdateWithoutZapRunsInput
	>;
};

export type ZapCreateWithoutUserInput = {
	id?: string;
	name: string;
	description?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zapTrigger?: Prisma.ZapTriggerCreateNestedOneWithoutZapInput;
	zapActions?: Prisma.ZapActionCreateNestedManyWithoutZapInput;
	zapRuns?: Prisma.ZapRunCreateNestedManyWithoutZapInput;
};

export type ZapUncheckedCreateWithoutUserInput = {
	id?: string;
	name: string;
	description?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zapTrigger?: Prisma.ZapTriggerUncheckedCreateNestedOneWithoutZapInput;
	zapActions?: Prisma.ZapActionUncheckedCreateNestedManyWithoutZapInput;
	zapRuns?: Prisma.ZapRunUncheckedCreateNestedManyWithoutZapInput;
};

export type ZapCreateOrConnectWithoutUserInput = {
	where: Prisma.ZapWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ZapCreateWithoutUserInput,
		Prisma.ZapUncheckedCreateWithoutUserInput
	>;
};

export type ZapCreateManyUserInputEnvelope = {
	data: Prisma.ZapCreateManyUserInput | Prisma.ZapCreateManyUserInput[];
	skipDuplicates?: boolean;
};

export type ZapUpsertWithWhereUniqueWithoutUserInput = {
	where: Prisma.ZapWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ZapUpdateWithoutUserInput,
		Prisma.ZapUncheckedUpdateWithoutUserInput
	>;
	create: Prisma.XOR<
		Prisma.ZapCreateWithoutUserInput,
		Prisma.ZapUncheckedCreateWithoutUserInput
	>;
};

export type ZapUpdateWithWhereUniqueWithoutUserInput = {
	where: Prisma.ZapWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ZapUpdateWithoutUserInput,
		Prisma.ZapUncheckedUpdateWithoutUserInput
	>;
};

export type ZapUpdateManyWithWhereWithoutUserInput = {
	where: Prisma.ZapScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ZapUpdateManyMutationInput,
		Prisma.ZapUncheckedUpdateManyWithoutUserInput
	>;
};

export type ZapScalarWhereInput = {
	AND?: Prisma.ZapScalarWhereInput | Prisma.ZapScalarWhereInput[];
	OR?: Prisma.ZapScalarWhereInput[];
	NOT?: Prisma.ZapScalarWhereInput | Prisma.ZapScalarWhereInput[];
	id?: Prisma.StringFilter<"Zap"> | string;
	name?: Prisma.StringFilter<"Zap"> | string;
	description?: Prisma.StringNullableFilter<"Zap"> | string | null;
	userId?: Prisma.StringFilter<"Zap"> | string;
	createdAt?: Prisma.DateTimeFilter<"Zap"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Zap"> | Date | string;
};

export type ZapCreateWithoutZapTriggerInput = {
	id?: string;
	name: string;
	description?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutZapsInput;
	zapActions?: Prisma.ZapActionCreateNestedManyWithoutZapInput;
	zapRuns?: Prisma.ZapRunCreateNestedManyWithoutZapInput;
};

export type ZapUncheckedCreateWithoutZapTriggerInput = {
	id?: string;
	name: string;
	description?: string | null;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zapActions?: Prisma.ZapActionUncheckedCreateNestedManyWithoutZapInput;
	zapRuns?: Prisma.ZapRunUncheckedCreateNestedManyWithoutZapInput;
};

export type ZapCreateOrConnectWithoutZapTriggerInput = {
	where: Prisma.ZapWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ZapCreateWithoutZapTriggerInput,
		Prisma.ZapUncheckedCreateWithoutZapTriggerInput
	>;
};

export type ZapUpsertWithoutZapTriggerInput = {
	update: Prisma.XOR<
		Prisma.ZapUpdateWithoutZapTriggerInput,
		Prisma.ZapUncheckedUpdateWithoutZapTriggerInput
	>;
	create: Prisma.XOR<
		Prisma.ZapCreateWithoutZapTriggerInput,
		Prisma.ZapUncheckedCreateWithoutZapTriggerInput
	>;
	where?: Prisma.ZapWhereInput;
};

export type ZapUpdateToOneWithWhereWithoutZapTriggerInput = {
	where?: Prisma.ZapWhereInput;
	data: Prisma.XOR<
		Prisma.ZapUpdateWithoutZapTriggerInput,
		Prisma.ZapUncheckedUpdateWithoutZapTriggerInput
	>;
};

export type ZapUpdateWithoutZapTriggerInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutZapsNestedInput;
	zapActions?: Prisma.ZapActionUpdateManyWithoutZapNestedInput;
	zapRuns?: Prisma.ZapRunUpdateManyWithoutZapNestedInput;
};

export type ZapUncheckedUpdateWithoutZapTriggerInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zapActions?: Prisma.ZapActionUncheckedUpdateManyWithoutZapNestedInput;
	zapRuns?: Prisma.ZapRunUncheckedUpdateManyWithoutZapNestedInput;
};

export type ZapCreateWithoutZapActionsInput = {
	id?: string;
	name: string;
	description?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutZapsInput;
	zapTrigger?: Prisma.ZapTriggerCreateNestedOneWithoutZapInput;
	zapRuns?: Prisma.ZapRunCreateNestedManyWithoutZapInput;
};

export type ZapUncheckedCreateWithoutZapActionsInput = {
	id?: string;
	name: string;
	description?: string | null;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zapTrigger?: Prisma.ZapTriggerUncheckedCreateNestedOneWithoutZapInput;
	zapRuns?: Prisma.ZapRunUncheckedCreateNestedManyWithoutZapInput;
};

export type ZapCreateOrConnectWithoutZapActionsInput = {
	where: Prisma.ZapWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ZapCreateWithoutZapActionsInput,
		Prisma.ZapUncheckedCreateWithoutZapActionsInput
	>;
};

export type ZapUpsertWithoutZapActionsInput = {
	update: Prisma.XOR<
		Prisma.ZapUpdateWithoutZapActionsInput,
		Prisma.ZapUncheckedUpdateWithoutZapActionsInput
	>;
	create: Prisma.XOR<
		Prisma.ZapCreateWithoutZapActionsInput,
		Prisma.ZapUncheckedCreateWithoutZapActionsInput
	>;
	where?: Prisma.ZapWhereInput;
};

export type ZapUpdateToOneWithWhereWithoutZapActionsInput = {
	where?: Prisma.ZapWhereInput;
	data: Prisma.XOR<
		Prisma.ZapUpdateWithoutZapActionsInput,
		Prisma.ZapUncheckedUpdateWithoutZapActionsInput
	>;
};

export type ZapUpdateWithoutZapActionsInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutZapsNestedInput;
	zapTrigger?: Prisma.ZapTriggerUpdateOneWithoutZapNestedInput;
	zapRuns?: Prisma.ZapRunUpdateManyWithoutZapNestedInput;
};

export type ZapUncheckedUpdateWithoutZapActionsInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zapTrigger?: Prisma.ZapTriggerUncheckedUpdateOneWithoutZapNestedInput;
	zapRuns?: Prisma.ZapRunUncheckedUpdateManyWithoutZapNestedInput;
};

export type ZapCreateWithoutZapRunsInput = {
	id?: string;
	name: string;
	description?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutZapsInput;
	zapTrigger?: Prisma.ZapTriggerCreateNestedOneWithoutZapInput;
	zapActions?: Prisma.ZapActionCreateNestedManyWithoutZapInput;
};

export type ZapUncheckedCreateWithoutZapRunsInput = {
	id?: string;
	name: string;
	description?: string | null;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zapTrigger?: Prisma.ZapTriggerUncheckedCreateNestedOneWithoutZapInput;
	zapActions?: Prisma.ZapActionUncheckedCreateNestedManyWithoutZapInput;
};

export type ZapCreateOrConnectWithoutZapRunsInput = {
	where: Prisma.ZapWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ZapCreateWithoutZapRunsInput,
		Prisma.ZapUncheckedCreateWithoutZapRunsInput
	>;
};

export type ZapUpsertWithoutZapRunsInput = {
	update: Prisma.XOR<
		Prisma.ZapUpdateWithoutZapRunsInput,
		Prisma.ZapUncheckedUpdateWithoutZapRunsInput
	>;
	create: Prisma.XOR<
		Prisma.ZapCreateWithoutZapRunsInput,
		Prisma.ZapUncheckedCreateWithoutZapRunsInput
	>;
	where?: Prisma.ZapWhereInput;
};

export type ZapUpdateToOneWithWhereWithoutZapRunsInput = {
	where?: Prisma.ZapWhereInput;
	data: Prisma.XOR<
		Prisma.ZapUpdateWithoutZapRunsInput,
		Prisma.ZapUncheckedUpdateWithoutZapRunsInput
	>;
};

export type ZapUpdateWithoutZapRunsInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutZapsNestedInput;
	zapTrigger?: Prisma.ZapTriggerUpdateOneWithoutZapNestedInput;
	zapActions?: Prisma.ZapActionUpdateManyWithoutZapNestedInput;
};

export type ZapUncheckedUpdateWithoutZapRunsInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zapTrigger?: Prisma.ZapTriggerUncheckedUpdateOneWithoutZapNestedInput;
	zapActions?: Prisma.ZapActionUncheckedUpdateManyWithoutZapNestedInput;
};

export type ZapCreateManyUserInput = {
	id?: string;
	name: string;
	description?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ZapUpdateWithoutUserInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zapTrigger?: Prisma.ZapTriggerUpdateOneWithoutZapNestedInput;
	zapActions?: Prisma.ZapActionUpdateManyWithoutZapNestedInput;
	zapRuns?: Prisma.ZapRunUpdateManyWithoutZapNestedInput;
};

export type ZapUncheckedUpdateWithoutUserInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zapTrigger?: Prisma.ZapTriggerUncheckedUpdateOneWithoutZapNestedInput;
	zapActions?: Prisma.ZapActionUncheckedUpdateManyWithoutZapNestedInput;
	zapRuns?: Prisma.ZapRunUncheckedUpdateManyWithoutZapNestedInput;
};

export type ZapUncheckedUpdateManyWithoutUserInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type ZapCountOutputType
 */

export type ZapCountOutputType = {
	zapActions: number;
	zapRuns: number;
};

export type ZapCountOutputTypeSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	zapActions?: boolean | ZapCountOutputTypeCountZapActionsArgs;
	zapRuns?: boolean | ZapCountOutputTypeCountZapRunsArgs;
};

/**
 * ZapCountOutputType without action
 */
export type ZapCountOutputTypeDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapCountOutputType
	 */
	select?: Prisma.ZapCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ZapCountOutputType without action
 */
export type ZapCountOutputTypeCountZapActionsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ZapActionWhereInput;
};

/**
 * ZapCountOutputType without action
 */
export type ZapCountOutputTypeCountZapRunsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ZapRunWhereInput;
};

export type ZapSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		description?: boolean;
		userId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
		zapTrigger?: boolean | Prisma.Zap$zapTriggerArgs<ExtArgs>;
		zapActions?: boolean | Prisma.Zap$zapActionsArgs<ExtArgs>;
		zapRuns?: boolean | Prisma.Zap$zapRunsArgs<ExtArgs>;
		_count?: boolean | Prisma.ZapCountOutputTypeDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zap"]
>;

export type ZapSelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		description?: boolean;
		userId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zap"]
>;

export type ZapSelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		description?: boolean;
		userId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["zap"]
>;

export type ZapSelectScalar = {
	id?: boolean;
	name?: boolean;
	description?: boolean;
	userId?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type ZapOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "name" | "description" | "userId" | "createdAt" | "updatedAt",
	ExtArgs["result"]["zap"]
>;
export type ZapInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	zapTrigger?: boolean | Prisma.Zap$zapTriggerArgs<ExtArgs>;
	zapActions?: boolean | Prisma.Zap$zapActionsArgs<ExtArgs>;
	zapRuns?: boolean | Prisma.Zap$zapRunsArgs<ExtArgs>;
	_count?: boolean | Prisma.ZapCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ZapIncludeCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type ZapIncludeUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $ZapPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "Zap";
	objects: {
		user: Prisma.$UserPayload<ExtArgs>;
		zapTrigger: Prisma.$ZapTriggerPayload<ExtArgs> | null;
		zapActions: Prisma.$ZapActionPayload<ExtArgs>[];
		zapRuns: Prisma.$ZapRunPayload<ExtArgs>[];
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			name: string;
			description: string | null;
			userId: string;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["zap"]
	>;
	composites: {};
};

export type ZapGetPayload<
	S extends boolean | null | undefined | ZapDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ZapPayload, S>;

export type ZapCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ZapFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: ZapCountAggregateInputType | true;
};

export interface ZapDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["Zap"];
		meta: { name: "Zap" };
	};
	/**
	 * Find zero or one Zap that matches the filter.
	 * @param {ZapFindUniqueArgs} args - Arguments to find a Zap
	 * @example
	 * // Get one Zap
	 * const zap = await prisma.zap.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends ZapFindUniqueArgs>(
		args: Prisma.SelectSubset<T, ZapFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__ZapClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one Zap that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {ZapFindUniqueOrThrowArgs} args - Arguments to find a Zap
	 * @example
	 * // Get one Zap
	 * const zap = await prisma.zap.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends ZapFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, ZapFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ZapClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Zap that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapFindFirstArgs} args - Arguments to find a Zap
	 * @example
	 * // Get one Zap
	 * const zap = await prisma.zap.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends ZapFindFirstArgs>(
		args?: Prisma.SelectSubset<T, ZapFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__ZapClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Zap that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapFindFirstOrThrowArgs} args - Arguments to find a Zap
	 * @example
	 * // Get one Zap
	 * const zap = await prisma.zap.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends ZapFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, ZapFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ZapClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Zaps that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all Zaps
	 * const zaps = await prisma.zap.findMany()
	 *
	 * // Get first 10 Zaps
	 * const zaps = await prisma.zap.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const zapWithIdOnly = await prisma.zap.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends ZapFindManyArgs>(
		args?: Prisma.SelectSubset<T, ZapFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a Zap.
	 * @param {ZapCreateArgs} args - Arguments to create a Zap.
	 * @example
	 * // Create one Zap
	 * const Zap = await prisma.zap.create({
	 *   data: {
	 *     // ... data to create a Zap
	 *   }
	 * })
	 *
	 */
	create<T extends ZapCreateArgs>(
		args: Prisma.SelectSubset<T, ZapCreateArgs<ExtArgs>>,
	): Prisma.Prisma__ZapClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many Zaps.
	 * @param {ZapCreateManyArgs} args - Arguments to create many Zaps.
	 * @example
	 * // Create many Zaps
	 * const zap = await prisma.zap.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends ZapCreateManyArgs>(
		args?: Prisma.SelectSubset<T, ZapCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many Zaps and returns the data saved in the database.
	 * @param {ZapCreateManyAndReturnArgs} args - Arguments to create many Zaps.
	 * @example
	 * // Create many Zaps
	 * const zap = await prisma.zap.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many Zaps and only return the `id`
	 * const zapWithIdOnly = await prisma.zap.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends ZapCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<T, ZapCreateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapPayload<ExtArgs>,
			T,
			"createManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Delete a Zap.
	 * @param {ZapDeleteArgs} args - Arguments to delete one Zap.
	 * @example
	 * // Delete one Zap
	 * const Zap = await prisma.zap.delete({
	 *   where: {
	 *     // ... filter to delete one Zap
	 *   }
	 * })
	 *
	 */
	delete<T extends ZapDeleteArgs>(
		args: Prisma.SelectSubset<T, ZapDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__ZapClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one Zap.
	 * @param {ZapUpdateArgs} args - Arguments to update one Zap.
	 * @example
	 * // Update one Zap
	 * const zap = await prisma.zap.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends ZapUpdateArgs>(
		args: Prisma.SelectSubset<T, ZapUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__ZapClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more Zaps.
	 * @param {ZapDeleteManyArgs} args - Arguments to filter Zaps to delete.
	 * @example
	 * // Delete a few Zaps
	 * const { count } = await prisma.zap.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends ZapDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, ZapDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Zaps.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many Zaps
	 * const zap = await prisma.zap.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends ZapUpdateManyArgs>(
		args: Prisma.SelectSubset<T, ZapUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Zaps and returns the data updated in the database.
	 * @param {ZapUpdateManyAndReturnArgs} args - Arguments to update many Zaps.
	 * @example
	 * // Update many Zaps
	 * const zap = await prisma.zap.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more Zaps and only return the `id`
	 * const zapWithIdOnly = await prisma.zap.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends ZapUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<T, ZapUpdateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ZapPayload<ExtArgs>,
			T,
			"updateManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create or update one Zap.
	 * @param {ZapUpsertArgs} args - Arguments to update or create a Zap.
	 * @example
	 * // Update or create a Zap
	 * const zap = await prisma.zap.upsert({
	 *   create: {
	 *     // ... data to create a Zap
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the Zap we want to update
	 *   }
	 * })
	 */
	upsert<T extends ZapUpsertArgs>(
		args: Prisma.SelectSubset<T, ZapUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__ZapClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of Zaps.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapCountArgs} args - Arguments to filter Zaps to count.
	 * @example
	 * // Count the number of Zaps
	 * const count = await prisma.zap.count({
	 *   where: {
	 *     // ... the filter for the Zaps we want to count
	 *   }
	 * })
	 **/
	count<T extends ZapCountArgs>(
		args?: Prisma.Subset<T, ZapCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], ZapCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a Zap.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends ZapAggregateArgs>(
		args: Prisma.Subset<T, ZapAggregateArgs>,
	): Prisma.PrismaPromise<GetZapAggregateType<T>>;

	/**
	 * Group by Zap.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ZapGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends ZapGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: ZapGroupByArgs["orderBy"] }
			: { orderBy?: ZapGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, ZapGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetZapGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the Zap model
	 */
	readonly fields: ZapFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Zap.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ZapClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	zapTrigger<T extends Prisma.Zap$zapTriggerArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Zap$zapTriggerArgs<ExtArgs>>,
	): Prisma.Prisma__ZapTriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$ZapTriggerPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;
	zapActions<T extends Prisma.Zap$zapActionsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Zap$zapActionsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ZapActionPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	zapRuns<T extends Prisma.Zap$zapRunsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Zap$zapRunsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ZapRunPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Zap model
 */
export interface ZapFieldRefs {
	readonly id: Prisma.FieldRef<"Zap", "String">;
	readonly name: Prisma.FieldRef<"Zap", "String">;
	readonly description: Prisma.FieldRef<"Zap", "String">;
	readonly userId: Prisma.FieldRef<"Zap", "String">;
	readonly createdAt: Prisma.FieldRef<"Zap", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"Zap", "DateTime">;
}

// Custom InputTypes
/**
 * Zap findUnique
 */
export type ZapFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Zap
	 */
	select?: Prisma.ZapSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Zap
	 */
	omit?: Prisma.ZapOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapInclude<ExtArgs> | null;
	/**
	 * Filter, which Zap to fetch.
	 */
	where: Prisma.ZapWhereUniqueInput;
};

/**
 * Zap findUniqueOrThrow
 */
export type ZapFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Zap
	 */
	select?: Prisma.ZapSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Zap
	 */
	omit?: Prisma.ZapOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapInclude<ExtArgs> | null;
	/**
	 * Filter, which Zap to fetch.
	 */
	where: Prisma.ZapWhereUniqueInput;
};

/**
 * Zap findFirst
 */
export type ZapFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Zap
	 */
	select?: Prisma.ZapSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Zap
	 */
	omit?: Prisma.ZapOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapInclude<ExtArgs> | null;
	/**
	 * Filter, which Zap to fetch.
	 */
	where?: Prisma.ZapWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Zaps to fetch.
	 */
	orderBy?:
		| Prisma.ZapOrderByWithRelationInput
		| Prisma.ZapOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Zaps.
	 */
	cursor?: Prisma.ZapWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Zaps from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Zaps.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Zaps.
	 */
	distinct?: Prisma.ZapScalarFieldEnum | Prisma.ZapScalarFieldEnum[];
};

/**
 * Zap findFirstOrThrow
 */
export type ZapFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Zap
	 */
	select?: Prisma.ZapSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Zap
	 */
	omit?: Prisma.ZapOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapInclude<ExtArgs> | null;
	/**
	 * Filter, which Zap to fetch.
	 */
	where?: Prisma.ZapWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Zaps to fetch.
	 */
	orderBy?:
		| Prisma.ZapOrderByWithRelationInput
		| Prisma.ZapOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Zaps.
	 */
	cursor?: Prisma.ZapWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Zaps from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Zaps.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Zaps.
	 */
	distinct?: Prisma.ZapScalarFieldEnum | Prisma.ZapScalarFieldEnum[];
};

/**
 * Zap findMany
 */
export type ZapFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Zap
	 */
	select?: Prisma.ZapSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Zap
	 */
	omit?: Prisma.ZapOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapInclude<ExtArgs> | null;
	/**
	 * Filter, which Zaps to fetch.
	 */
	where?: Prisma.ZapWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Zaps to fetch.
	 */
	orderBy?:
		| Prisma.ZapOrderByWithRelationInput
		| Prisma.ZapOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing Zaps.
	 */
	cursor?: Prisma.ZapWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Zaps from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Zaps.
	 */
	skip?: number;
	distinct?: Prisma.ZapScalarFieldEnum | Prisma.ZapScalarFieldEnum[];
};

/**
 * Zap create
 */
export type ZapCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Zap
	 */
	select?: Prisma.ZapSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Zap
	 */
	omit?: Prisma.ZapOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapInclude<ExtArgs> | null;
	/**
	 * The data needed to create a Zap.
	 */
	data: Prisma.XOR<Prisma.ZapCreateInput, Prisma.ZapUncheckedCreateInput>;
};

/**
 * Zap createMany
 */
export type ZapCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many Zaps.
	 */
	data: Prisma.ZapCreateManyInput | Prisma.ZapCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * Zap createManyAndReturn
 */
export type ZapCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Zap
	 */
	select?: Prisma.ZapSelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the Zap
	 */
	omit?: Prisma.ZapOmit<ExtArgs> | null;
	/**
	 * The data used to create many Zaps.
	 */
	data: Prisma.ZapCreateManyInput | Prisma.ZapCreateManyInput[];
	skipDuplicates?: boolean;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Zap update
 */
export type ZapUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Zap
	 */
	select?: Prisma.ZapSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Zap
	 */
	omit?: Prisma.ZapOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapInclude<ExtArgs> | null;
	/**
	 * The data needed to update a Zap.
	 */
	data: Prisma.XOR<Prisma.ZapUpdateInput, Prisma.ZapUncheckedUpdateInput>;
	/**
	 * Choose, which Zap to update.
	 */
	where: Prisma.ZapWhereUniqueInput;
};

/**
 * Zap updateMany
 */
export type ZapUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update Zaps.
	 */
	data: Prisma.XOR<
		Prisma.ZapUpdateManyMutationInput,
		Prisma.ZapUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Zaps to update
	 */
	where?: Prisma.ZapWhereInput;
	/**
	 * Limit how many Zaps to update.
	 */
	limit?: number;
};

/**
 * Zap updateManyAndReturn
 */
export type ZapUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Zap
	 */
	select?: Prisma.ZapSelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the Zap
	 */
	omit?: Prisma.ZapOmit<ExtArgs> | null;
	/**
	 * The data used to update Zaps.
	 */
	data: Prisma.XOR<
		Prisma.ZapUpdateManyMutationInput,
		Prisma.ZapUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Zaps to update
	 */
	where?: Prisma.ZapWhereInput;
	/**
	 * Limit how many Zaps to update.
	 */
	limit?: number;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Zap upsert
 */
export type ZapUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Zap
	 */
	select?: Prisma.ZapSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Zap
	 */
	omit?: Prisma.ZapOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapInclude<ExtArgs> | null;
	/**
	 * The filter to search for the Zap to update in case it exists.
	 */
	where: Prisma.ZapWhereUniqueInput;
	/**
	 * In case the Zap found by the `where` argument doesn't exist, create a new Zap with this data.
	 */
	create: Prisma.XOR<Prisma.ZapCreateInput, Prisma.ZapUncheckedCreateInput>;
	/**
	 * In case the Zap was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<Prisma.ZapUpdateInput, Prisma.ZapUncheckedUpdateInput>;
};

/**
 * Zap delete
 */
export type ZapDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Zap
	 */
	select?: Prisma.ZapSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Zap
	 */
	omit?: Prisma.ZapOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapInclude<ExtArgs> | null;
	/**
	 * Filter which Zap to delete.
	 */
	where: Prisma.ZapWhereUniqueInput;
};

/**
 * Zap deleteMany
 */
export type ZapDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Zaps to delete
	 */
	where?: Prisma.ZapWhereInput;
	/**
	 * Limit how many Zaps to delete.
	 */
	limit?: number;
};

/**
 * Zap.zapTrigger
 */
export type Zap$zapTriggerArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapTrigger
	 */
	select?: Prisma.ZapTriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapTrigger
	 */
	omit?: Prisma.ZapTriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapTriggerInclude<ExtArgs> | null;
	where?: Prisma.ZapTriggerWhereInput;
};

/**
 * Zap.zapActions
 */
export type Zap$zapActionsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapAction
	 */
	select?: Prisma.ZapActionSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapAction
	 */
	omit?: Prisma.ZapActionOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapActionInclude<ExtArgs> | null;
	where?: Prisma.ZapActionWhereInput;
	orderBy?:
		| Prisma.ZapActionOrderByWithRelationInput
		| Prisma.ZapActionOrderByWithRelationInput[];
	cursor?: Prisma.ZapActionWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.ZapActionScalarFieldEnum
		| Prisma.ZapActionScalarFieldEnum[];
};

/**
 * Zap.zapRuns
 */
export type Zap$zapRunsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ZapRun
	 */
	select?: Prisma.ZapRunSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ZapRun
	 */
	omit?: Prisma.ZapRunOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapRunInclude<ExtArgs> | null;
	where?: Prisma.ZapRunWhereInput;
	orderBy?:
		| Prisma.ZapRunOrderByWithRelationInput
		| Prisma.ZapRunOrderByWithRelationInput[];
	cursor?: Prisma.ZapRunWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.ZapRunScalarFieldEnum | Prisma.ZapRunScalarFieldEnum[];
};

/**
 * Zap without action
 */
export type ZapDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Zap
	 */
	select?: Prisma.ZapSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Zap
	 */
	omit?: Prisma.ZapOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ZapInclude<ExtArgs> | null;
};
