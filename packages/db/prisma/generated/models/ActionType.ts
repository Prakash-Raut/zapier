/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `ActionType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ActionType
 *
 */
export type ActionTypeModel =
	runtime.Types.Result.DefaultSelection<Prisma.$ActionTypePayload>;

export type AggregateActionType = {
	_count: ActionTypeCountAggregateOutputType | null;
	_min: ActionTypeMinAggregateOutputType | null;
	_max: ActionTypeMaxAggregateOutputType | null;
};

export type ActionTypeMinAggregateOutputType = {
	id: string | null;
	name: string | null;
	image: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ActionTypeMaxAggregateOutputType = {
	id: string | null;
	name: string | null;
	image: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ActionTypeCountAggregateOutputType = {
	id: number;
	name: number;
	image: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type ActionTypeMinAggregateInputType = {
	id?: true;
	name?: true;
	image?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ActionTypeMaxAggregateInputType = {
	id?: true;
	name?: true;
	image?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ActionTypeCountAggregateInputType = {
	id?: true;
	name?: true;
	image?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type ActionTypeAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ActionType to aggregate.
	 */
	where?: Prisma.ActionTypeWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ActionTypes to fetch.
	 */
	orderBy?:
		| Prisma.ActionTypeOrderByWithRelationInput
		| Prisma.ActionTypeOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.ActionTypeWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ActionTypes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ActionTypes.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned ActionTypes
	 **/
	_count?: true | ActionTypeCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: ActionTypeMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: ActionTypeMaxAggregateInputType;
};

export type GetActionTypeAggregateType<T extends ActionTypeAggregateArgs> = {
	[P in keyof T & keyof AggregateActionType]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateActionType[P]>
		: Prisma.GetScalarType<T[P], AggregateActionType[P]>;
};

export type ActionTypeGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ActionTypeWhereInput;
	orderBy?:
		| Prisma.ActionTypeOrderByWithAggregationInput
		| Prisma.ActionTypeOrderByWithAggregationInput[];
	by: Prisma.ActionTypeScalarFieldEnum[] | Prisma.ActionTypeScalarFieldEnum;
	having?: Prisma.ActionTypeScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: ActionTypeCountAggregateInputType | true;
	_min?: ActionTypeMinAggregateInputType;
	_max?: ActionTypeMaxAggregateInputType;
};

export type ActionTypeGroupByOutputType = {
	id: string;
	name: string;
	image: string;
	createdAt: Date;
	updatedAt: Date;
	_count: ActionTypeCountAggregateOutputType | null;
	_min: ActionTypeMinAggregateOutputType | null;
	_max: ActionTypeMaxAggregateOutputType | null;
};

type GetActionTypeGroupByPayload<T extends ActionTypeGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<ActionTypeGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof ActionTypeGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], ActionTypeGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], ActionTypeGroupByOutputType[P]>;
			}
		>
	>;

export type ActionTypeWhereInput = {
	AND?: Prisma.ActionTypeWhereInput | Prisma.ActionTypeWhereInput[];
	OR?: Prisma.ActionTypeWhereInput[];
	NOT?: Prisma.ActionTypeWhereInput | Prisma.ActionTypeWhereInput[];
	id?: Prisma.StringFilter<"ActionType"> | string;
	name?: Prisma.StringFilter<"ActionType"> | string;
	image?: Prisma.StringFilter<"ActionType"> | string;
	createdAt?: Prisma.DateTimeFilter<"ActionType"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"ActionType"> | Date | string;
	actions?: Prisma.ActionListRelationFilter;
};

export type ActionTypeOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	actions?: Prisma.ActionOrderByRelationAggregateInput;
};

export type ActionTypeWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.ActionTypeWhereInput | Prisma.ActionTypeWhereInput[];
		OR?: Prisma.ActionTypeWhereInput[];
		NOT?: Prisma.ActionTypeWhereInput | Prisma.ActionTypeWhereInput[];
		name?: Prisma.StringFilter<"ActionType"> | string;
		image?: Prisma.StringFilter<"ActionType"> | string;
		createdAt?: Prisma.DateTimeFilter<"ActionType"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"ActionType"> | Date | string;
		actions?: Prisma.ActionListRelationFilter;
	},
	"id"
>;

export type ActionTypeOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.ActionTypeCountOrderByAggregateInput;
	_max?: Prisma.ActionTypeMaxOrderByAggregateInput;
	_min?: Prisma.ActionTypeMinOrderByAggregateInput;
};

export type ActionTypeScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.ActionTypeScalarWhereWithAggregatesInput
		| Prisma.ActionTypeScalarWhereWithAggregatesInput[];
	OR?: Prisma.ActionTypeScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.ActionTypeScalarWhereWithAggregatesInput
		| Prisma.ActionTypeScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"ActionType"> | string;
	name?: Prisma.StringWithAggregatesFilter<"ActionType"> | string;
	image?: Prisma.StringWithAggregatesFilter<"ActionType"> | string;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"ActionType"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ActionType"> | Date | string;
};

export type ActionTypeCreateInput = {
	id?: string;
	name: string;
	image: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	actions?: Prisma.ActionCreateNestedManyWithoutTypeInput;
};

export type ActionTypeUncheckedCreateInput = {
	id?: string;
	name: string;
	image: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	actions?: Prisma.ActionUncheckedCreateNestedManyWithoutTypeInput;
};

export type ActionTypeUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	image?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	actions?: Prisma.ActionUpdateManyWithoutTypeNestedInput;
};

export type ActionTypeUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	image?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	actions?: Prisma.ActionUncheckedUpdateManyWithoutTypeNestedInput;
};

export type ActionTypeCreateManyInput = {
	id?: string;
	name: string;
	image: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ActionTypeUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	image?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ActionTypeUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	image?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ActionTypeScalarRelationFilter = {
	is?: Prisma.ActionTypeWhereInput;
	isNot?: Prisma.ActionTypeWhereInput;
};

export type ActionTypeCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ActionTypeMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ActionTypeMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ActionTypeCreateNestedOneWithoutActionsInput = {
	create?: Prisma.XOR<
		Prisma.ActionTypeCreateWithoutActionsInput,
		Prisma.ActionTypeUncheckedCreateWithoutActionsInput
	>;
	connectOrCreate?: Prisma.ActionTypeCreateOrConnectWithoutActionsInput;
	connect?: Prisma.ActionTypeWhereUniqueInput;
};

export type ActionTypeUpdateOneRequiredWithoutActionsNestedInput = {
	create?: Prisma.XOR<
		Prisma.ActionTypeCreateWithoutActionsInput,
		Prisma.ActionTypeUncheckedCreateWithoutActionsInput
	>;
	connectOrCreate?: Prisma.ActionTypeCreateOrConnectWithoutActionsInput;
	upsert?: Prisma.ActionTypeUpsertWithoutActionsInput;
	connect?: Prisma.ActionTypeWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.ActionTypeUpdateToOneWithWhereWithoutActionsInput,
			Prisma.ActionTypeUpdateWithoutActionsInput
		>,
		Prisma.ActionTypeUncheckedUpdateWithoutActionsInput
	>;
};

export type ActionTypeCreateWithoutActionsInput = {
	id?: string;
	name: string;
	image: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ActionTypeUncheckedCreateWithoutActionsInput = {
	id?: string;
	name: string;
	image: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ActionTypeCreateOrConnectWithoutActionsInput = {
	where: Prisma.ActionTypeWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ActionTypeCreateWithoutActionsInput,
		Prisma.ActionTypeUncheckedCreateWithoutActionsInput
	>;
};

export type ActionTypeUpsertWithoutActionsInput = {
	update: Prisma.XOR<
		Prisma.ActionTypeUpdateWithoutActionsInput,
		Prisma.ActionTypeUncheckedUpdateWithoutActionsInput
	>;
	create: Prisma.XOR<
		Prisma.ActionTypeCreateWithoutActionsInput,
		Prisma.ActionTypeUncheckedCreateWithoutActionsInput
	>;
	where?: Prisma.ActionTypeWhereInput;
};

export type ActionTypeUpdateToOneWithWhereWithoutActionsInput = {
	where?: Prisma.ActionTypeWhereInput;
	data: Prisma.XOR<
		Prisma.ActionTypeUpdateWithoutActionsInput,
		Prisma.ActionTypeUncheckedUpdateWithoutActionsInput
	>;
};

export type ActionTypeUpdateWithoutActionsInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	image?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ActionTypeUncheckedUpdateWithoutActionsInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	image?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type ActionTypeCountOutputType
 */

export type ActionTypeCountOutputType = {
	actions: number;
};

export type ActionTypeCountOutputTypeSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	actions?: boolean | ActionTypeCountOutputTypeCountActionsArgs;
};

/**
 * ActionTypeCountOutputType without action
 */
export type ActionTypeCountOutputTypeDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ActionTypeCountOutputType
	 */
	select?: Prisma.ActionTypeCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ActionTypeCountOutputType without action
 */
export type ActionTypeCountOutputTypeCountActionsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ActionWhereInput;
};

export type ActionTypeSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		image?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		actions?: boolean | Prisma.ActionType$actionsArgs<ExtArgs>;
		_count?: boolean | Prisma.ActionTypeCountOutputTypeDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["actionType"]
>;

export type ActionTypeSelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		image?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
	},
	ExtArgs["result"]["actionType"]
>;

export type ActionTypeSelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		image?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
	},
	ExtArgs["result"]["actionType"]
>;

export type ActionTypeSelectScalar = {
	id?: boolean;
	name?: boolean;
	image?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type ActionTypeOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "name" | "image" | "createdAt" | "updatedAt",
	ExtArgs["result"]["actionType"]
>;
export type ActionTypeInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	actions?: boolean | Prisma.ActionType$actionsArgs<ExtArgs>;
	_count?: boolean | Prisma.ActionTypeCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ActionTypeIncludeCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type ActionTypeIncludeUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $ActionTypePayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "ActionType";
	objects: {
		actions: Prisma.$ActionPayload<ExtArgs>[];
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			name: string;
			image: string;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["actionType"]
	>;
	composites: {};
};

export type ActionTypeGetPayload<
	S extends boolean | null | undefined | ActionTypeDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ActionTypePayload, S>;

export type ActionTypeCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ActionTypeFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: ActionTypeCountAggregateInputType | true;
};

export interface ActionTypeDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["ActionType"];
		meta: { name: "ActionType" };
	};
	/**
	 * Find zero or one ActionType that matches the filter.
	 * @param {ActionTypeFindUniqueArgs} args - Arguments to find a ActionType
	 * @example
	 * // Get one ActionType
	 * const actionType = await prisma.actionType.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends ActionTypeFindUniqueArgs>(
		args: Prisma.SelectSubset<T, ActionTypeFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__ActionTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$ActionTypePayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one ActionType that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {ActionTypeFindUniqueOrThrowArgs} args - Arguments to find a ActionType
	 * @example
	 * // Get one ActionType
	 * const actionType = await prisma.actionType.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends ActionTypeFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, ActionTypeFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ActionTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$ActionTypePayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ActionType that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ActionTypeFindFirstArgs} args - Arguments to find a ActionType
	 * @example
	 * // Get one ActionType
	 * const actionType = await prisma.actionType.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends ActionTypeFindFirstArgs>(
		args?: Prisma.SelectSubset<T, ActionTypeFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__ActionTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$ActionTypePayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ActionType that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ActionTypeFindFirstOrThrowArgs} args - Arguments to find a ActionType
	 * @example
	 * // Get one ActionType
	 * const actionType = await prisma.actionType.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends ActionTypeFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, ActionTypeFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ActionTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$ActionTypePayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more ActionTypes that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ActionTypeFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all ActionTypes
	 * const actionTypes = await prisma.actionType.findMany()
	 *
	 * // Get first 10 ActionTypes
	 * const actionTypes = await prisma.actionType.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const actionTypeWithIdOnly = await prisma.actionType.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends ActionTypeFindManyArgs>(
		args?: Prisma.SelectSubset<T, ActionTypeFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ActionTypePayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a ActionType.
	 * @param {ActionTypeCreateArgs} args - Arguments to create a ActionType.
	 * @example
	 * // Create one ActionType
	 * const ActionType = await prisma.actionType.create({
	 *   data: {
	 *     // ... data to create a ActionType
	 *   }
	 * })
	 *
	 */
	create<T extends ActionTypeCreateArgs>(
		args: Prisma.SelectSubset<T, ActionTypeCreateArgs<ExtArgs>>,
	): Prisma.Prisma__ActionTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$ActionTypePayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many ActionTypes.
	 * @param {ActionTypeCreateManyArgs} args - Arguments to create many ActionTypes.
	 * @example
	 * // Create many ActionTypes
	 * const actionType = await prisma.actionType.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends ActionTypeCreateManyArgs>(
		args?: Prisma.SelectSubset<T, ActionTypeCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many ActionTypes and returns the data saved in the database.
	 * @param {ActionTypeCreateManyAndReturnArgs} args - Arguments to create many ActionTypes.
	 * @example
	 * // Create many ActionTypes
	 * const actionType = await prisma.actionType.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many ActionTypes and only return the `id`
	 * const actionTypeWithIdOnly = await prisma.actionType.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends ActionTypeCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<T, ActionTypeCreateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ActionTypePayload<ExtArgs>,
			T,
			"createManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Delete a ActionType.
	 * @param {ActionTypeDeleteArgs} args - Arguments to delete one ActionType.
	 * @example
	 * // Delete one ActionType
	 * const ActionType = await prisma.actionType.delete({
	 *   where: {
	 *     // ... filter to delete one ActionType
	 *   }
	 * })
	 *
	 */
	delete<T extends ActionTypeDeleteArgs>(
		args: Prisma.SelectSubset<T, ActionTypeDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__ActionTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$ActionTypePayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one ActionType.
	 * @param {ActionTypeUpdateArgs} args - Arguments to update one ActionType.
	 * @example
	 * // Update one ActionType
	 * const actionType = await prisma.actionType.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends ActionTypeUpdateArgs>(
		args: Prisma.SelectSubset<T, ActionTypeUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__ActionTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$ActionTypePayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more ActionTypes.
	 * @param {ActionTypeDeleteManyArgs} args - Arguments to filter ActionTypes to delete.
	 * @example
	 * // Delete a few ActionTypes
	 * const { count } = await prisma.actionType.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends ActionTypeDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, ActionTypeDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ActionTypes.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ActionTypeUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many ActionTypes
	 * const actionType = await prisma.actionType.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends ActionTypeUpdateManyArgs>(
		args: Prisma.SelectSubset<T, ActionTypeUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ActionTypes and returns the data updated in the database.
	 * @param {ActionTypeUpdateManyAndReturnArgs} args - Arguments to update many ActionTypes.
	 * @example
	 * // Update many ActionTypes
	 * const actionType = await prisma.actionType.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more ActionTypes and only return the `id`
	 * const actionTypeWithIdOnly = await prisma.actionType.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends ActionTypeUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<T, ActionTypeUpdateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ActionTypePayload<ExtArgs>,
			T,
			"updateManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create or update one ActionType.
	 * @param {ActionTypeUpsertArgs} args - Arguments to update or create a ActionType.
	 * @example
	 * // Update or create a ActionType
	 * const actionType = await prisma.actionType.upsert({
	 *   create: {
	 *     // ... data to create a ActionType
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the ActionType we want to update
	 *   }
	 * })
	 */
	upsert<T extends ActionTypeUpsertArgs>(
		args: Prisma.SelectSubset<T, ActionTypeUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__ActionTypeClient<
		runtime.Types.Result.GetResult<
			Prisma.$ActionTypePayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of ActionTypes.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ActionTypeCountArgs} args - Arguments to filter ActionTypes to count.
	 * @example
	 * // Count the number of ActionTypes
	 * const count = await prisma.actionType.count({
	 *   where: {
	 *     // ... the filter for the ActionTypes we want to count
	 *   }
	 * })
	 **/
	count<T extends ActionTypeCountArgs>(
		args?: Prisma.Subset<T, ActionTypeCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], ActionTypeCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a ActionType.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ActionTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends ActionTypeAggregateArgs>(
		args: Prisma.Subset<T, ActionTypeAggregateArgs>,
	): Prisma.PrismaPromise<GetActionTypeAggregateType<T>>;

	/**
	 * Group by ActionType.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ActionTypeGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends ActionTypeGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: ActionTypeGroupByArgs["orderBy"] }
			: { orderBy?: ActionTypeGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, ActionTypeGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetActionTypeGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the ActionType model
	 */
	readonly fields: ActionTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ActionType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ActionTypeClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	actions<T extends Prisma.ActionType$actionsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ActionType$actionsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ActionPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ActionType model
 */
export interface ActionTypeFieldRefs {
	readonly id: Prisma.FieldRef<"ActionType", "String">;
	readonly name: Prisma.FieldRef<"ActionType", "String">;
	readonly image: Prisma.FieldRef<"ActionType", "String">;
	readonly createdAt: Prisma.FieldRef<"ActionType", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"ActionType", "DateTime">;
}

// Custom InputTypes
/**
 * ActionType findUnique
 */
export type ActionTypeFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ActionType
	 */
	select?: Prisma.ActionTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ActionType
	 */
	omit?: Prisma.ActionTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ActionTypeInclude<ExtArgs> | null;
	/**
	 * Filter, which ActionType to fetch.
	 */
	where: Prisma.ActionTypeWhereUniqueInput;
};

/**
 * ActionType findUniqueOrThrow
 */
export type ActionTypeFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ActionType
	 */
	select?: Prisma.ActionTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ActionType
	 */
	omit?: Prisma.ActionTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ActionTypeInclude<ExtArgs> | null;
	/**
	 * Filter, which ActionType to fetch.
	 */
	where: Prisma.ActionTypeWhereUniqueInput;
};

/**
 * ActionType findFirst
 */
export type ActionTypeFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ActionType
	 */
	select?: Prisma.ActionTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ActionType
	 */
	omit?: Prisma.ActionTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ActionTypeInclude<ExtArgs> | null;
	/**
	 * Filter, which ActionType to fetch.
	 */
	where?: Prisma.ActionTypeWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ActionTypes to fetch.
	 */
	orderBy?:
		| Prisma.ActionTypeOrderByWithRelationInput
		| Prisma.ActionTypeOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ActionTypes.
	 */
	cursor?: Prisma.ActionTypeWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ActionTypes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ActionTypes.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ActionTypes.
	 */
	distinct?:
		| Prisma.ActionTypeScalarFieldEnum
		| Prisma.ActionTypeScalarFieldEnum[];
};

/**
 * ActionType findFirstOrThrow
 */
export type ActionTypeFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ActionType
	 */
	select?: Prisma.ActionTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ActionType
	 */
	omit?: Prisma.ActionTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ActionTypeInclude<ExtArgs> | null;
	/**
	 * Filter, which ActionType to fetch.
	 */
	where?: Prisma.ActionTypeWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ActionTypes to fetch.
	 */
	orderBy?:
		| Prisma.ActionTypeOrderByWithRelationInput
		| Prisma.ActionTypeOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ActionTypes.
	 */
	cursor?: Prisma.ActionTypeWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ActionTypes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ActionTypes.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ActionTypes.
	 */
	distinct?:
		| Prisma.ActionTypeScalarFieldEnum
		| Prisma.ActionTypeScalarFieldEnum[];
};

/**
 * ActionType findMany
 */
export type ActionTypeFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ActionType
	 */
	select?: Prisma.ActionTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ActionType
	 */
	omit?: Prisma.ActionTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ActionTypeInclude<ExtArgs> | null;
	/**
	 * Filter, which ActionTypes to fetch.
	 */
	where?: Prisma.ActionTypeWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ActionTypes to fetch.
	 */
	orderBy?:
		| Prisma.ActionTypeOrderByWithRelationInput
		| Prisma.ActionTypeOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing ActionTypes.
	 */
	cursor?: Prisma.ActionTypeWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ActionTypes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ActionTypes.
	 */
	skip?: number;
	distinct?:
		| Prisma.ActionTypeScalarFieldEnum
		| Prisma.ActionTypeScalarFieldEnum[];
};

/**
 * ActionType create
 */
export type ActionTypeCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ActionType
	 */
	select?: Prisma.ActionTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ActionType
	 */
	omit?: Prisma.ActionTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ActionTypeInclude<ExtArgs> | null;
	/**
	 * The data needed to create a ActionType.
	 */
	data: Prisma.XOR<
		Prisma.ActionTypeCreateInput,
		Prisma.ActionTypeUncheckedCreateInput
	>;
};

/**
 * ActionType createMany
 */
export type ActionTypeCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many ActionTypes.
	 */
	data: Prisma.ActionTypeCreateManyInput | Prisma.ActionTypeCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * ActionType createManyAndReturn
 */
export type ActionTypeCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ActionType
	 */
	select?: Prisma.ActionTypeSelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ActionType
	 */
	omit?: Prisma.ActionTypeOmit<ExtArgs> | null;
	/**
	 * The data used to create many ActionTypes.
	 */
	data: Prisma.ActionTypeCreateManyInput | Prisma.ActionTypeCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * ActionType update
 */
export type ActionTypeUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ActionType
	 */
	select?: Prisma.ActionTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ActionType
	 */
	omit?: Prisma.ActionTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ActionTypeInclude<ExtArgs> | null;
	/**
	 * The data needed to update a ActionType.
	 */
	data: Prisma.XOR<
		Prisma.ActionTypeUpdateInput,
		Prisma.ActionTypeUncheckedUpdateInput
	>;
	/**
	 * Choose, which ActionType to update.
	 */
	where: Prisma.ActionTypeWhereUniqueInput;
};

/**
 * ActionType updateMany
 */
export type ActionTypeUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update ActionTypes.
	 */
	data: Prisma.XOR<
		Prisma.ActionTypeUpdateManyMutationInput,
		Prisma.ActionTypeUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ActionTypes to update
	 */
	where?: Prisma.ActionTypeWhereInput;
	/**
	 * Limit how many ActionTypes to update.
	 */
	limit?: number;
};

/**
 * ActionType updateManyAndReturn
 */
export type ActionTypeUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ActionType
	 */
	select?: Prisma.ActionTypeSelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ActionType
	 */
	omit?: Prisma.ActionTypeOmit<ExtArgs> | null;
	/**
	 * The data used to update ActionTypes.
	 */
	data: Prisma.XOR<
		Prisma.ActionTypeUpdateManyMutationInput,
		Prisma.ActionTypeUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ActionTypes to update
	 */
	where?: Prisma.ActionTypeWhereInput;
	/**
	 * Limit how many ActionTypes to update.
	 */
	limit?: number;
};

/**
 * ActionType upsert
 */
export type ActionTypeUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ActionType
	 */
	select?: Prisma.ActionTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ActionType
	 */
	omit?: Prisma.ActionTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ActionTypeInclude<ExtArgs> | null;
	/**
	 * The filter to search for the ActionType to update in case it exists.
	 */
	where: Prisma.ActionTypeWhereUniqueInput;
	/**
	 * In case the ActionType found by the `where` argument doesn't exist, create a new ActionType with this data.
	 */
	create: Prisma.XOR<
		Prisma.ActionTypeCreateInput,
		Prisma.ActionTypeUncheckedCreateInput
	>;
	/**
	 * In case the ActionType was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.ActionTypeUpdateInput,
		Prisma.ActionTypeUncheckedUpdateInput
	>;
};

/**
 * ActionType delete
 */
export type ActionTypeDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ActionType
	 */
	select?: Prisma.ActionTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ActionType
	 */
	omit?: Prisma.ActionTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ActionTypeInclude<ExtArgs> | null;
	/**
	 * Filter which ActionType to delete.
	 */
	where: Prisma.ActionTypeWhereUniqueInput;
};

/**
 * ActionType deleteMany
 */
export type ActionTypeDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ActionTypes to delete
	 */
	where?: Prisma.ActionTypeWhereInput;
	/**
	 * Limit how many ActionTypes to delete.
	 */
	limit?: number;
};

/**
 * ActionType.actions
 */
export type ActionType$actionsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Action
	 */
	select?: Prisma.ActionSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Action
	 */
	omit?: Prisma.ActionOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ActionInclude<ExtArgs> | null;
	where?: Prisma.ActionWhereInput;
	orderBy?:
		| Prisma.ActionOrderByWithRelationInput
		| Prisma.ActionOrderByWithRelationInput[];
	cursor?: Prisma.ActionWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.ActionScalarFieldEnum | Prisma.ActionScalarFieldEnum[];
};

/**
 * ActionType without action
 */
export type ActionTypeDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ActionType
	 */
	select?: Prisma.ActionTypeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ActionType
	 */
	omit?: Prisma.ActionTypeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ActionTypeInclude<ExtArgs> | null;
};
