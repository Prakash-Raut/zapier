/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Trigger` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Trigger
 *
 */
export type TriggerModel =
	runtime.Types.Result.DefaultSelection<Prisma.$TriggerPayload>;

export type AggregateTrigger = {
	_count: TriggerCountAggregateOutputType | null;
	_min: TriggerMinAggregateOutputType | null;
	_max: TriggerMaxAggregateOutputType | null;
};

export type TriggerMinAggregateOutputType = {
	id: string | null;
	triggerTypeId: string | null;
	zapId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type TriggerMaxAggregateOutputType = {
	id: string | null;
	triggerTypeId: string | null;
	zapId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type TriggerCountAggregateOutputType = {
	id: number;
	metadata: number;
	triggerTypeId: number;
	zapId: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type TriggerMinAggregateInputType = {
	id?: true;
	triggerTypeId?: true;
	zapId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type TriggerMaxAggregateInputType = {
	id?: true;
	triggerTypeId?: true;
	zapId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type TriggerCountAggregateInputType = {
	id?: true;
	metadata?: true;
	triggerTypeId?: true;
	zapId?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type TriggerAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Trigger to aggregate.
	 */
	where?: Prisma.TriggerWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Triggers to fetch.
	 */
	orderBy?:
		| Prisma.TriggerOrderByWithRelationInput
		| Prisma.TriggerOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.TriggerWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Triggers from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Triggers.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned Triggers
	 **/
	_count?: true | TriggerCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: TriggerMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: TriggerMaxAggregateInputType;
};

export type GetTriggerAggregateType<T extends TriggerAggregateArgs> = {
	[P in keyof T & keyof AggregateTrigger]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateTrigger[P]>
		: Prisma.GetScalarType<T[P], AggregateTrigger[P]>;
};

export type TriggerGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.TriggerWhereInput;
	orderBy?:
		| Prisma.TriggerOrderByWithAggregationInput
		| Prisma.TriggerOrderByWithAggregationInput[];
	by: Prisma.TriggerScalarFieldEnum[] | Prisma.TriggerScalarFieldEnum;
	having?: Prisma.TriggerScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: TriggerCountAggregateInputType | true;
	_min?: TriggerMinAggregateInputType;
	_max?: TriggerMaxAggregateInputType;
};

export type TriggerGroupByOutputType = {
	id: string;
	metadata: runtime.JsonValue;
	triggerTypeId: string;
	zapId: string;
	createdAt: Date;
	updatedAt: Date;
	_count: TriggerCountAggregateOutputType | null;
	_min: TriggerMinAggregateOutputType | null;
	_max: TriggerMaxAggregateOutputType | null;
};

type GetTriggerGroupByPayload<T extends TriggerGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<TriggerGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof TriggerGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], TriggerGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], TriggerGroupByOutputType[P]>;
			}
		>
	>;

export type TriggerWhereInput = {
	AND?: Prisma.TriggerWhereInput | Prisma.TriggerWhereInput[];
	OR?: Prisma.TriggerWhereInput[];
	NOT?: Prisma.TriggerWhereInput | Prisma.TriggerWhereInput[];
	id?: Prisma.StringFilter<"Trigger"> | string;
	metadata?: Prisma.JsonFilter<"Trigger">;
	triggerTypeId?: Prisma.StringFilter<"Trigger"> | string;
	zapId?: Prisma.StringFilter<"Trigger"> | string;
	createdAt?: Prisma.DateTimeFilter<"Trigger"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Trigger"> | Date | string;
	type?: Prisma.XOR<
		Prisma.TriggerTypeScalarRelationFilter,
		Prisma.TriggerTypeWhereInput
	>;
	zap?: Prisma.XOR<Prisma.ZapScalarRelationFilter, Prisma.ZapWhereInput>;
};

export type TriggerOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	metadata?: Prisma.SortOrder;
	triggerTypeId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	type?: Prisma.TriggerTypeOrderByWithRelationInput;
	zap?: Prisma.ZapOrderByWithRelationInput;
};

export type TriggerWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		zapId?: string;
		AND?: Prisma.TriggerWhereInput | Prisma.TriggerWhereInput[];
		OR?: Prisma.TriggerWhereInput[];
		NOT?: Prisma.TriggerWhereInput | Prisma.TriggerWhereInput[];
		metadata?: Prisma.JsonFilter<"Trigger">;
		triggerTypeId?: Prisma.StringFilter<"Trigger"> | string;
		createdAt?: Prisma.DateTimeFilter<"Trigger"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"Trigger"> | Date | string;
		type?: Prisma.XOR<
			Prisma.TriggerTypeScalarRelationFilter,
			Prisma.TriggerTypeWhereInput
		>;
		zap?: Prisma.XOR<Prisma.ZapScalarRelationFilter, Prisma.ZapWhereInput>;
	},
	"id" | "zapId"
>;

export type TriggerOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	metadata?: Prisma.SortOrder;
	triggerTypeId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.TriggerCountOrderByAggregateInput;
	_max?: Prisma.TriggerMaxOrderByAggregateInput;
	_min?: Prisma.TriggerMinOrderByAggregateInput;
};

export type TriggerScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.TriggerScalarWhereWithAggregatesInput
		| Prisma.TriggerScalarWhereWithAggregatesInput[];
	OR?: Prisma.TriggerScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.TriggerScalarWhereWithAggregatesInput
		| Prisma.TriggerScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"Trigger"> | string;
	metadata?: Prisma.JsonWithAggregatesFilter<"Trigger">;
	triggerTypeId?: Prisma.StringWithAggregatesFilter<"Trigger"> | string;
	zapId?: Prisma.StringWithAggregatesFilter<"Trigger"> | string;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"Trigger"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Trigger"> | Date | string;
};

export type TriggerCreateInput = {
	id?: string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	type: Prisma.TriggerTypeCreateNestedOneWithoutTriggersInput;
	zap: Prisma.ZapCreateNestedOneWithoutTriggerInput;
};

export type TriggerUncheckedCreateInput = {
	id?: string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	triggerTypeId: string;
	zapId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type TriggerUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	type?: Prisma.TriggerTypeUpdateOneRequiredWithoutTriggersNestedInput;
	zap?: Prisma.ZapUpdateOneRequiredWithoutTriggerNestedInput;
};

export type TriggerUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	triggerTypeId?: Prisma.StringFieldUpdateOperationsInput | string;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TriggerCreateManyInput = {
	id?: string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	triggerTypeId: string;
	zapId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type TriggerUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TriggerUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	triggerTypeId?: Prisma.StringFieldUpdateOperationsInput | string;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TriggerNullableScalarRelationFilter = {
	is?: Prisma.TriggerWhereInput | null;
	isNot?: Prisma.TriggerWhereInput | null;
};

export type TriggerCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	metadata?: Prisma.SortOrder;
	triggerTypeId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type TriggerMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	triggerTypeId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type TriggerMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	triggerTypeId?: Prisma.SortOrder;
	zapId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type TriggerListRelationFilter = {
	every?: Prisma.TriggerWhereInput;
	some?: Prisma.TriggerWhereInput;
	none?: Prisma.TriggerWhereInput;
};

export type TriggerOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type TriggerCreateNestedOneWithoutZapInput = {
	create?: Prisma.XOR<
		Prisma.TriggerCreateWithoutZapInput,
		Prisma.TriggerUncheckedCreateWithoutZapInput
	>;
	connectOrCreate?: Prisma.TriggerCreateOrConnectWithoutZapInput;
	connect?: Prisma.TriggerWhereUniqueInput;
};

export type TriggerUncheckedCreateNestedOneWithoutZapInput = {
	create?: Prisma.XOR<
		Prisma.TriggerCreateWithoutZapInput,
		Prisma.TriggerUncheckedCreateWithoutZapInput
	>;
	connectOrCreate?: Prisma.TriggerCreateOrConnectWithoutZapInput;
	connect?: Prisma.TriggerWhereUniqueInput;
};

export type TriggerUpdateOneWithoutZapNestedInput = {
	create?: Prisma.XOR<
		Prisma.TriggerCreateWithoutZapInput,
		Prisma.TriggerUncheckedCreateWithoutZapInput
	>;
	connectOrCreate?: Prisma.TriggerCreateOrConnectWithoutZapInput;
	upsert?: Prisma.TriggerUpsertWithoutZapInput;
	disconnect?: Prisma.TriggerWhereInput | boolean;
	delete?: Prisma.TriggerWhereInput | boolean;
	connect?: Prisma.TriggerWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.TriggerUpdateToOneWithWhereWithoutZapInput,
			Prisma.TriggerUpdateWithoutZapInput
		>,
		Prisma.TriggerUncheckedUpdateWithoutZapInput
	>;
};

export type TriggerUncheckedUpdateOneWithoutZapNestedInput = {
	create?: Prisma.XOR<
		Prisma.TriggerCreateWithoutZapInput,
		Prisma.TriggerUncheckedCreateWithoutZapInput
	>;
	connectOrCreate?: Prisma.TriggerCreateOrConnectWithoutZapInput;
	upsert?: Prisma.TriggerUpsertWithoutZapInput;
	disconnect?: Prisma.TriggerWhereInput | boolean;
	delete?: Prisma.TriggerWhereInput | boolean;
	connect?: Prisma.TriggerWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.TriggerUpdateToOneWithWhereWithoutZapInput,
			Prisma.TriggerUpdateWithoutZapInput
		>,
		Prisma.TriggerUncheckedUpdateWithoutZapInput
	>;
};

export type TriggerCreateNestedManyWithoutTypeInput = {
	create?:
		| Prisma.XOR<
				Prisma.TriggerCreateWithoutTypeInput,
				Prisma.TriggerUncheckedCreateWithoutTypeInput
		  >
		| Prisma.TriggerCreateWithoutTypeInput[]
		| Prisma.TriggerUncheckedCreateWithoutTypeInput[];
	connectOrCreate?:
		| Prisma.TriggerCreateOrConnectWithoutTypeInput
		| Prisma.TriggerCreateOrConnectWithoutTypeInput[];
	createMany?: Prisma.TriggerCreateManyTypeInputEnvelope;
	connect?: Prisma.TriggerWhereUniqueInput | Prisma.TriggerWhereUniqueInput[];
};

export type TriggerUncheckedCreateNestedManyWithoutTypeInput = {
	create?:
		| Prisma.XOR<
				Prisma.TriggerCreateWithoutTypeInput,
				Prisma.TriggerUncheckedCreateWithoutTypeInput
		  >
		| Prisma.TriggerCreateWithoutTypeInput[]
		| Prisma.TriggerUncheckedCreateWithoutTypeInput[];
	connectOrCreate?:
		| Prisma.TriggerCreateOrConnectWithoutTypeInput
		| Prisma.TriggerCreateOrConnectWithoutTypeInput[];
	createMany?: Prisma.TriggerCreateManyTypeInputEnvelope;
	connect?: Prisma.TriggerWhereUniqueInput | Prisma.TriggerWhereUniqueInput[];
};

export type TriggerUpdateManyWithoutTypeNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.TriggerCreateWithoutTypeInput,
				Prisma.TriggerUncheckedCreateWithoutTypeInput
		  >
		| Prisma.TriggerCreateWithoutTypeInput[]
		| Prisma.TriggerUncheckedCreateWithoutTypeInput[];
	connectOrCreate?:
		| Prisma.TriggerCreateOrConnectWithoutTypeInput
		| Prisma.TriggerCreateOrConnectWithoutTypeInput[];
	upsert?:
		| Prisma.TriggerUpsertWithWhereUniqueWithoutTypeInput
		| Prisma.TriggerUpsertWithWhereUniqueWithoutTypeInput[];
	createMany?: Prisma.TriggerCreateManyTypeInputEnvelope;
	set?: Prisma.TriggerWhereUniqueInput | Prisma.TriggerWhereUniqueInput[];
	disconnect?:
		| Prisma.TriggerWhereUniqueInput
		| Prisma.TriggerWhereUniqueInput[];
	delete?: Prisma.TriggerWhereUniqueInput | Prisma.TriggerWhereUniqueInput[];
	connect?: Prisma.TriggerWhereUniqueInput | Prisma.TriggerWhereUniqueInput[];
	update?:
		| Prisma.TriggerUpdateWithWhereUniqueWithoutTypeInput
		| Prisma.TriggerUpdateWithWhereUniqueWithoutTypeInput[];
	updateMany?:
		| Prisma.TriggerUpdateManyWithWhereWithoutTypeInput
		| Prisma.TriggerUpdateManyWithWhereWithoutTypeInput[];
	deleteMany?:
		| Prisma.TriggerScalarWhereInput
		| Prisma.TriggerScalarWhereInput[];
};

export type TriggerUncheckedUpdateManyWithoutTypeNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.TriggerCreateWithoutTypeInput,
				Prisma.TriggerUncheckedCreateWithoutTypeInput
		  >
		| Prisma.TriggerCreateWithoutTypeInput[]
		| Prisma.TriggerUncheckedCreateWithoutTypeInput[];
	connectOrCreate?:
		| Prisma.TriggerCreateOrConnectWithoutTypeInput
		| Prisma.TriggerCreateOrConnectWithoutTypeInput[];
	upsert?:
		| Prisma.TriggerUpsertWithWhereUniqueWithoutTypeInput
		| Prisma.TriggerUpsertWithWhereUniqueWithoutTypeInput[];
	createMany?: Prisma.TriggerCreateManyTypeInputEnvelope;
	set?: Prisma.TriggerWhereUniqueInput | Prisma.TriggerWhereUniqueInput[];
	disconnect?:
		| Prisma.TriggerWhereUniqueInput
		| Prisma.TriggerWhereUniqueInput[];
	delete?: Prisma.TriggerWhereUniqueInput | Prisma.TriggerWhereUniqueInput[];
	connect?: Prisma.TriggerWhereUniqueInput | Prisma.TriggerWhereUniqueInput[];
	update?:
		| Prisma.TriggerUpdateWithWhereUniqueWithoutTypeInput
		| Prisma.TriggerUpdateWithWhereUniqueWithoutTypeInput[];
	updateMany?:
		| Prisma.TriggerUpdateManyWithWhereWithoutTypeInput
		| Prisma.TriggerUpdateManyWithWhereWithoutTypeInput[];
	deleteMany?:
		| Prisma.TriggerScalarWhereInput
		| Prisma.TriggerScalarWhereInput[];
};

export type TriggerCreateWithoutZapInput = {
	id?: string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	type: Prisma.TriggerTypeCreateNestedOneWithoutTriggersInput;
};

export type TriggerUncheckedCreateWithoutZapInput = {
	id?: string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	triggerTypeId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type TriggerCreateOrConnectWithoutZapInput = {
	where: Prisma.TriggerWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.TriggerCreateWithoutZapInput,
		Prisma.TriggerUncheckedCreateWithoutZapInput
	>;
};

export type TriggerUpsertWithoutZapInput = {
	update: Prisma.XOR<
		Prisma.TriggerUpdateWithoutZapInput,
		Prisma.TriggerUncheckedUpdateWithoutZapInput
	>;
	create: Prisma.XOR<
		Prisma.TriggerCreateWithoutZapInput,
		Prisma.TriggerUncheckedCreateWithoutZapInput
	>;
	where?: Prisma.TriggerWhereInput;
};

export type TriggerUpdateToOneWithWhereWithoutZapInput = {
	where?: Prisma.TriggerWhereInput;
	data: Prisma.XOR<
		Prisma.TriggerUpdateWithoutZapInput,
		Prisma.TriggerUncheckedUpdateWithoutZapInput
	>;
};

export type TriggerUpdateWithoutZapInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	type?: Prisma.TriggerTypeUpdateOneRequiredWithoutTriggersNestedInput;
};

export type TriggerUncheckedUpdateWithoutZapInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	triggerTypeId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TriggerCreateWithoutTypeInput = {
	id?: string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	zap: Prisma.ZapCreateNestedOneWithoutTriggerInput;
};

export type TriggerUncheckedCreateWithoutTypeInput = {
	id?: string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	zapId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type TriggerCreateOrConnectWithoutTypeInput = {
	where: Prisma.TriggerWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.TriggerCreateWithoutTypeInput,
		Prisma.TriggerUncheckedCreateWithoutTypeInput
	>;
};

export type TriggerCreateManyTypeInputEnvelope = {
	data: Prisma.TriggerCreateManyTypeInput | Prisma.TriggerCreateManyTypeInput[];
	skipDuplicates?: boolean;
};

export type TriggerUpsertWithWhereUniqueWithoutTypeInput = {
	where: Prisma.TriggerWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.TriggerUpdateWithoutTypeInput,
		Prisma.TriggerUncheckedUpdateWithoutTypeInput
	>;
	create: Prisma.XOR<
		Prisma.TriggerCreateWithoutTypeInput,
		Prisma.TriggerUncheckedCreateWithoutTypeInput
	>;
};

export type TriggerUpdateWithWhereUniqueWithoutTypeInput = {
	where: Prisma.TriggerWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.TriggerUpdateWithoutTypeInput,
		Prisma.TriggerUncheckedUpdateWithoutTypeInput
	>;
};

export type TriggerUpdateManyWithWhereWithoutTypeInput = {
	where: Prisma.TriggerScalarWhereInput;
	data: Prisma.XOR<
		Prisma.TriggerUpdateManyMutationInput,
		Prisma.TriggerUncheckedUpdateManyWithoutTypeInput
	>;
};

export type TriggerScalarWhereInput = {
	AND?: Prisma.TriggerScalarWhereInput | Prisma.TriggerScalarWhereInput[];
	OR?: Prisma.TriggerScalarWhereInput[];
	NOT?: Prisma.TriggerScalarWhereInput | Prisma.TriggerScalarWhereInput[];
	id?: Prisma.StringFilter<"Trigger"> | string;
	metadata?: Prisma.JsonFilter<"Trigger">;
	triggerTypeId?: Prisma.StringFilter<"Trigger"> | string;
	zapId?: Prisma.StringFilter<"Trigger"> | string;
	createdAt?: Prisma.DateTimeFilter<"Trigger"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Trigger"> | Date | string;
};

export type TriggerCreateManyTypeInput = {
	id?: string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	zapId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type TriggerUpdateWithoutTypeInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	zap?: Prisma.ZapUpdateOneRequiredWithoutTriggerNestedInput;
};

export type TriggerUncheckedUpdateWithoutTypeInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TriggerUncheckedUpdateManyWithoutTypeInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	metadata?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
	zapId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TriggerSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		metadata?: boolean;
		triggerTypeId?: boolean;
		zapId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		type?: boolean | Prisma.TriggerTypeDefaultArgs<ExtArgs>;
		zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["trigger"]
>;

export type TriggerSelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		metadata?: boolean;
		triggerTypeId?: boolean;
		zapId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		type?: boolean | Prisma.TriggerTypeDefaultArgs<ExtArgs>;
		zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["trigger"]
>;

export type TriggerSelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		metadata?: boolean;
		triggerTypeId?: boolean;
		zapId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		type?: boolean | Prisma.TriggerTypeDefaultArgs<ExtArgs>;
		zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["trigger"]
>;

export type TriggerSelectScalar = {
	id?: boolean;
	metadata?: boolean;
	triggerTypeId?: boolean;
	zapId?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type TriggerOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "metadata" | "triggerTypeId" | "zapId" | "createdAt" | "updatedAt",
	ExtArgs["result"]["trigger"]
>;
export type TriggerInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	type?: boolean | Prisma.TriggerTypeDefaultArgs<ExtArgs>;
	zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
};
export type TriggerIncludeCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	type?: boolean | Prisma.TriggerTypeDefaultArgs<ExtArgs>;
	zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
};
export type TriggerIncludeUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	type?: boolean | Prisma.TriggerTypeDefaultArgs<ExtArgs>;
	zap?: boolean | Prisma.ZapDefaultArgs<ExtArgs>;
};

export type $TriggerPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "Trigger";
	objects: {
		type: Prisma.$TriggerTypePayload<ExtArgs>;
		zap: Prisma.$ZapPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			metadata: runtime.JsonValue;
			triggerTypeId: string;
			zapId: string;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["trigger"]
	>;
	composites: {};
};

export type TriggerGetPayload<
	S extends boolean | null | undefined | TriggerDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$TriggerPayload, S>;

export type TriggerCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<TriggerFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: TriggerCountAggregateInputType | true;
};

export interface TriggerDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["Trigger"];
		meta: { name: "Trigger" };
	};
	/**
	 * Find zero or one Trigger that matches the filter.
	 * @param {TriggerFindUniqueArgs} args - Arguments to find a Trigger
	 * @example
	 * // Get one Trigger
	 * const trigger = await prisma.trigger.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends TriggerFindUniqueArgs>(
		args: Prisma.SelectSubset<T, TriggerFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one Trigger that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {TriggerFindUniqueOrThrowArgs} args - Arguments to find a Trigger
	 * @example
	 * // Get one Trigger
	 * const trigger = await prisma.trigger.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends TriggerFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, TriggerFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Trigger that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerFindFirstArgs} args - Arguments to find a Trigger
	 * @example
	 * // Get one Trigger
	 * const trigger = await prisma.trigger.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends TriggerFindFirstArgs>(
		args?: Prisma.SelectSubset<T, TriggerFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Trigger that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerFindFirstOrThrowArgs} args - Arguments to find a Trigger
	 * @example
	 * // Get one Trigger
	 * const trigger = await prisma.trigger.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends TriggerFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, TriggerFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Triggers that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all Triggers
	 * const triggers = await prisma.trigger.findMany()
	 *
	 * // Get first 10 Triggers
	 * const triggers = await prisma.trigger.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const triggerWithIdOnly = await prisma.trigger.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends TriggerFindManyArgs>(
		args?: Prisma.SelectSubset<T, TriggerFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a Trigger.
	 * @param {TriggerCreateArgs} args - Arguments to create a Trigger.
	 * @example
	 * // Create one Trigger
	 * const Trigger = await prisma.trigger.create({
	 *   data: {
	 *     // ... data to create a Trigger
	 *   }
	 * })
	 *
	 */
	create<T extends TriggerCreateArgs>(
		args: Prisma.SelectSubset<T, TriggerCreateArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many Triggers.
	 * @param {TriggerCreateManyArgs} args - Arguments to create many Triggers.
	 * @example
	 * // Create many Triggers
	 * const trigger = await prisma.trigger.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends TriggerCreateManyArgs>(
		args?: Prisma.SelectSubset<T, TriggerCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many Triggers and returns the data saved in the database.
	 * @param {TriggerCreateManyAndReturnArgs} args - Arguments to create many Triggers.
	 * @example
	 * // Create many Triggers
	 * const trigger = await prisma.trigger.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many Triggers and only return the `id`
	 * const triggerWithIdOnly = await prisma.trigger.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends TriggerCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<T, TriggerCreateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerPayload<ExtArgs>,
			T,
			"createManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Delete a Trigger.
	 * @param {TriggerDeleteArgs} args - Arguments to delete one Trigger.
	 * @example
	 * // Delete one Trigger
	 * const Trigger = await prisma.trigger.delete({
	 *   where: {
	 *     // ... filter to delete one Trigger
	 *   }
	 * })
	 *
	 */
	delete<T extends TriggerDeleteArgs>(
		args: Prisma.SelectSubset<T, TriggerDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one Trigger.
	 * @param {TriggerUpdateArgs} args - Arguments to update one Trigger.
	 * @example
	 * // Update one Trigger
	 * const trigger = await prisma.trigger.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends TriggerUpdateArgs>(
		args: Prisma.SelectSubset<T, TriggerUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more Triggers.
	 * @param {TriggerDeleteManyArgs} args - Arguments to filter Triggers to delete.
	 * @example
	 * // Delete a few Triggers
	 * const { count } = await prisma.trigger.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends TriggerDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, TriggerDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Triggers.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many Triggers
	 * const trigger = await prisma.trigger.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends TriggerUpdateManyArgs>(
		args: Prisma.SelectSubset<T, TriggerUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Triggers and returns the data updated in the database.
	 * @param {TriggerUpdateManyAndReturnArgs} args - Arguments to update many Triggers.
	 * @example
	 * // Update many Triggers
	 * const trigger = await prisma.trigger.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more Triggers and only return the `id`
	 * const triggerWithIdOnly = await prisma.trigger.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends TriggerUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<T, TriggerUpdateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerPayload<ExtArgs>,
			T,
			"updateManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create or update one Trigger.
	 * @param {TriggerUpsertArgs} args - Arguments to update or create a Trigger.
	 * @example
	 * // Update or create a Trigger
	 * const trigger = await prisma.trigger.upsert({
	 *   create: {
	 *     // ... data to create a Trigger
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the Trigger we want to update
	 *   }
	 * })
	 */
	upsert<T extends TriggerUpsertArgs>(
		args: Prisma.SelectSubset<T, TriggerUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerClient<
		runtime.Types.Result.GetResult<
			Prisma.$TriggerPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of Triggers.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerCountArgs} args - Arguments to filter Triggers to count.
	 * @example
	 * // Count the number of Triggers
	 * const count = await prisma.trigger.count({
	 *   where: {
	 *     // ... the filter for the Triggers we want to count
	 *   }
	 * })
	 **/
	count<T extends TriggerCountArgs>(
		args?: Prisma.Subset<T, TriggerCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], TriggerCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a Trigger.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends TriggerAggregateArgs>(
		args: Prisma.Subset<T, TriggerAggregateArgs>,
	): Prisma.PrismaPromise<GetTriggerAggregateType<T>>;

	/**
	 * Group by Trigger.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {TriggerGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends TriggerGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: TriggerGroupByArgs["orderBy"] }
			: { orderBy?: TriggerGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, TriggerGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetTriggerGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the Trigger model
	 */
	readonly fields: TriggerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Trigger.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TriggerClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	type<T extends Prisma.TriggerTypeDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.TriggerTypeDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__TriggerTypeClient<
		| runtime.Types.Result.GetResult<
				Prisma.$TriggerTypePayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	zap<T extends Prisma.ZapDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ZapDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__ZapClient<
		| runtime.Types.Result.GetResult<
				Prisma.$ZapPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Trigger model
 */
export interface TriggerFieldRefs {
	readonly id: Prisma.FieldRef<"Trigger", "String">;
	readonly metadata: Prisma.FieldRef<"Trigger", "Json">;
	readonly triggerTypeId: Prisma.FieldRef<"Trigger", "String">;
	readonly zapId: Prisma.FieldRef<"Trigger", "String">;
	readonly createdAt: Prisma.FieldRef<"Trigger", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"Trigger", "DateTime">;
}

// Custom InputTypes
/**
 * Trigger findUnique
 */
export type TriggerFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Trigger
	 */
	select?: Prisma.TriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Trigger
	 */
	omit?: Prisma.TriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerInclude<ExtArgs> | null;
	/**
	 * Filter, which Trigger to fetch.
	 */
	where: Prisma.TriggerWhereUniqueInput;
};

/**
 * Trigger findUniqueOrThrow
 */
export type TriggerFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Trigger
	 */
	select?: Prisma.TriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Trigger
	 */
	omit?: Prisma.TriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerInclude<ExtArgs> | null;
	/**
	 * Filter, which Trigger to fetch.
	 */
	where: Prisma.TriggerWhereUniqueInput;
};

/**
 * Trigger findFirst
 */
export type TriggerFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Trigger
	 */
	select?: Prisma.TriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Trigger
	 */
	omit?: Prisma.TriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerInclude<ExtArgs> | null;
	/**
	 * Filter, which Trigger to fetch.
	 */
	where?: Prisma.TriggerWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Triggers to fetch.
	 */
	orderBy?:
		| Prisma.TriggerOrderByWithRelationInput
		| Prisma.TriggerOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Triggers.
	 */
	cursor?: Prisma.TriggerWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Triggers from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Triggers.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Triggers.
	 */
	distinct?: Prisma.TriggerScalarFieldEnum | Prisma.TriggerScalarFieldEnum[];
};

/**
 * Trigger findFirstOrThrow
 */
export type TriggerFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Trigger
	 */
	select?: Prisma.TriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Trigger
	 */
	omit?: Prisma.TriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerInclude<ExtArgs> | null;
	/**
	 * Filter, which Trigger to fetch.
	 */
	where?: Prisma.TriggerWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Triggers to fetch.
	 */
	orderBy?:
		| Prisma.TriggerOrderByWithRelationInput
		| Prisma.TriggerOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Triggers.
	 */
	cursor?: Prisma.TriggerWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Triggers from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Triggers.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Triggers.
	 */
	distinct?: Prisma.TriggerScalarFieldEnum | Prisma.TriggerScalarFieldEnum[];
};

/**
 * Trigger findMany
 */
export type TriggerFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Trigger
	 */
	select?: Prisma.TriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Trigger
	 */
	omit?: Prisma.TriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerInclude<ExtArgs> | null;
	/**
	 * Filter, which Triggers to fetch.
	 */
	where?: Prisma.TriggerWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Triggers to fetch.
	 */
	orderBy?:
		| Prisma.TriggerOrderByWithRelationInput
		| Prisma.TriggerOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing Triggers.
	 */
	cursor?: Prisma.TriggerWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Triggers from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Triggers.
	 */
	skip?: number;
	distinct?: Prisma.TriggerScalarFieldEnum | Prisma.TriggerScalarFieldEnum[];
};

/**
 * Trigger create
 */
export type TriggerCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Trigger
	 */
	select?: Prisma.TriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Trigger
	 */
	omit?: Prisma.TriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerInclude<ExtArgs> | null;
	/**
	 * The data needed to create a Trigger.
	 */
	data: Prisma.XOR<
		Prisma.TriggerCreateInput,
		Prisma.TriggerUncheckedCreateInput
	>;
};

/**
 * Trigger createMany
 */
export type TriggerCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many Triggers.
	 */
	data: Prisma.TriggerCreateManyInput | Prisma.TriggerCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * Trigger createManyAndReturn
 */
export type TriggerCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Trigger
	 */
	select?: Prisma.TriggerSelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the Trigger
	 */
	omit?: Prisma.TriggerOmit<ExtArgs> | null;
	/**
	 * The data used to create many Triggers.
	 */
	data: Prisma.TriggerCreateManyInput | Prisma.TriggerCreateManyInput[];
	skipDuplicates?: boolean;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Trigger update
 */
export type TriggerUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Trigger
	 */
	select?: Prisma.TriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Trigger
	 */
	omit?: Prisma.TriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerInclude<ExtArgs> | null;
	/**
	 * The data needed to update a Trigger.
	 */
	data: Prisma.XOR<
		Prisma.TriggerUpdateInput,
		Prisma.TriggerUncheckedUpdateInput
	>;
	/**
	 * Choose, which Trigger to update.
	 */
	where: Prisma.TriggerWhereUniqueInput;
};

/**
 * Trigger updateMany
 */
export type TriggerUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update Triggers.
	 */
	data: Prisma.XOR<
		Prisma.TriggerUpdateManyMutationInput,
		Prisma.TriggerUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Triggers to update
	 */
	where?: Prisma.TriggerWhereInput;
	/**
	 * Limit how many Triggers to update.
	 */
	limit?: number;
};

/**
 * Trigger updateManyAndReturn
 */
export type TriggerUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Trigger
	 */
	select?: Prisma.TriggerSelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the Trigger
	 */
	omit?: Prisma.TriggerOmit<ExtArgs> | null;
	/**
	 * The data used to update Triggers.
	 */
	data: Prisma.XOR<
		Prisma.TriggerUpdateManyMutationInput,
		Prisma.TriggerUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Triggers to update
	 */
	where?: Prisma.TriggerWhereInput;
	/**
	 * Limit how many Triggers to update.
	 */
	limit?: number;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Trigger upsert
 */
export type TriggerUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Trigger
	 */
	select?: Prisma.TriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Trigger
	 */
	omit?: Prisma.TriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerInclude<ExtArgs> | null;
	/**
	 * The filter to search for the Trigger to update in case it exists.
	 */
	where: Prisma.TriggerWhereUniqueInput;
	/**
	 * In case the Trigger found by the `where` argument doesn't exist, create a new Trigger with this data.
	 */
	create: Prisma.XOR<
		Prisma.TriggerCreateInput,
		Prisma.TriggerUncheckedCreateInput
	>;
	/**
	 * In case the Trigger was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.TriggerUpdateInput,
		Prisma.TriggerUncheckedUpdateInput
	>;
};

/**
 * Trigger delete
 */
export type TriggerDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Trigger
	 */
	select?: Prisma.TriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Trigger
	 */
	omit?: Prisma.TriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerInclude<ExtArgs> | null;
	/**
	 * Filter which Trigger to delete.
	 */
	where: Prisma.TriggerWhereUniqueInput;
};

/**
 * Trigger deleteMany
 */
export type TriggerDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Triggers to delete
	 */
	where?: Prisma.TriggerWhereInput;
	/**
	 * Limit how many Triggers to delete.
	 */
	limit?: number;
};

/**
 * Trigger without action
 */
export type TriggerDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Trigger
	 */
	select?: Prisma.TriggerSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Trigger
	 */
	omit?: Prisma.TriggerOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TriggerInclude<ExtArgs> | null;
};
