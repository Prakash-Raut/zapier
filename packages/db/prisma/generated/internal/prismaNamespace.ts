/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library";
import type * as Prisma from "../models";
import type { PrismaClient } from "./class";

export type * from "../models";

export type DMMF = typeof runtime.DMMF;

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>;

/**
 * Validator
 */
export const validator = runtime.Public.validator;

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError =
	runtime.PrismaClientKnownRequestError;
export type PrismaClientKnownRequestError =
	runtime.PrismaClientKnownRequestError;

export const PrismaClientUnknownRequestError =
	runtime.PrismaClientUnknownRequestError;
export type PrismaClientUnknownRequestError =
	runtime.PrismaClientUnknownRequestError;

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;

export const PrismaClientInitializationError =
	runtime.PrismaClientInitializationError;
export type PrismaClientInitializationError =
	runtime.PrismaClientInitializationError;

export const PrismaClientValidationError = runtime.PrismaClientValidationError;
export type PrismaClientValidationError = runtime.PrismaClientValidationError;

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag;
export const empty = runtime.empty;
export const join = runtime.join;
export const raw = runtime.raw;
export const Sql = runtime.Sql;
export type Sql = runtime.Sql;

/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal;
export type Decimal = runtime.Decimal;

export type DecimalJsLike = runtime.DecimalJsLike;

/**
 * Metrics
 */
export type Metrics = runtime.Metrics;
export type Metric<T> = runtime.Metric<T>;
export type MetricHistogram = runtime.MetricHistogram;
export type MetricHistogramBucket = runtime.MetricHistogramBucket;

/**
 * Extensions
 */
export type Extension = runtime.Types.Extensions.UserArgs;
export const getExtensionContext = runtime.Extensions.getExtensionContext;
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<
	T,
	F
>;
export type Payload<
	T,
	F extends runtime.Operation = never,
> = runtime.Types.Public.Payload<T, F>;
export type Result<
	T,
	A,
	F extends runtime.Operation,
> = runtime.Types.Public.Result<T, A, F>;
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>;

export type PrismaVersion = {
	client: string;
	engine: string;
};

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
export const prismaVersion: PrismaVersion = {
	client: "6.11.1",
	engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9",
};

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject;
export type JsonArray = runtime.JsonArray;
export type JsonValue = runtime.JsonValue;
export type InputJsonObject = runtime.InputJsonObject;
export type InputJsonArray = runtime.InputJsonArray;
export type InputJsonValue = runtime.InputJsonValue;

export const NullTypes = {
	DbNull: runtime.objectEnumValues.classes.DbNull as new (
		secret: never,
	) => typeof runtime.objectEnumValues.instances.DbNull,
	JsonNull: runtime.objectEnumValues.classes.JsonNull as new (
		secret: never,
	) => typeof runtime.objectEnumValues.instances.JsonNull,
	AnyNull: runtime.objectEnumValues.classes.AnyNull as new (
		secret: never,
	) => typeof runtime.objectEnumValues.instances.AnyNull,
};

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull;

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull;

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull;

type SelectAndInclude = {
	select: any;
	include: any;
};

type SelectAndOmit = {
	select: any;
	omit: any;
};

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
	[P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
	[key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
	[key in keyof T]: key extends keyof U ? T[key] : never;
} & (T extends SelectAndInclude
	? "Please either choose `select` or `include`."
	: T extends SelectAndOmit
		? "Please either choose `select` or `omit`."
		: {});

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
	[key in keyof T]: key extends keyof U ? T[key] : never;
} & K;

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> = T extends object
	? U extends object
		? (Without<T, U> & U) | (Without<U, T> & T)
		: U
	: T;

/**
 * Is T a Record?
 */
type IsObject<T> = T extends Array<any>
	? False
	: T extends Date
		? False
		: T extends Uint8Array
			? False
			: T extends bigint
				? False
				: T extends object
					? True
					: False;

/**
 * If it's T[], return T
 */
export type UnEnumerate<T> = T extends Array<infer U> ? U : T;

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
	{
		// Merge all but K
		[P in K]: Prisma__Pick<O, P & keyof O>; // With K possibilities
	}[K];

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>;

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>;

type _Either<O extends object, K extends Key, strict extends Boolean> = {
	1: EitherStrict<O, K>;
	0: EitherLoose<O, K>;
}[strict];

export type Either<
	O extends object,
	K extends Key,
	strict extends Boolean = 1,
> = O extends unknown ? _Either<O, K, strict> : never;

export type Union = any;

export type PatchUndefined<O extends object, O1 extends object> = {
	[K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K];
} & {};

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
	U extends unknown
		? (k: U) => void
		: never
) extends (k: infer I) => void
	? I
	: never;

export type Overwrite<O extends object, O1 extends object> = {
	[K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<
	Overwrite<
		U,
		{
			[K in keyof U]-?: At<U, K>;
		}
	>
>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown
	? AtStrict<O, K>
	: never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
	1: AtStrict<O, K>;
	0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A> = A extends Function
	? A
	: {
			[K in keyof A]: A[K];
		} & {};

export type OptionalFlat<O> = {
	[K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
	[P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
	O extends unknown
		?
				| (K extends keyof O ? { [P in K]: O[P] } & O : O)
				| ({ [P in keyof O as P extends K ? P : never]-?: O[P] } & O)
		: never
>;

type _Strict<U, _U = U> = U extends unknown
	? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>>
	: never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False;

export type True = 1;

export type False = 0;

export type Not<B extends Boolean> = {
	0: 1;
	1: 0;
}[B];

export type Extends<A1, A2> = [A1] extends [never]
	? 0 // anything `never` is false
	: A1 extends A2
		? 1
		: 0;

export type Has<U extends Union, U1 extends Union> = Not<
	Extends<Exclude<U1, U>, U1>
>;

export type Or<B1 extends Boolean, B2 extends Boolean> = {
	0: {
		0: 0;
		1: 1;
	};
	1: {
		0: 1;
		1: 1;
	};
}[B1][B2];

export type Keys<U extends Union> = U extends unknown ? keyof U : never;

export type GetScalarType<T, O> = O extends object
	? {
			[P in keyof T]: P extends keyof O ? O[P] : never;
		}
	: never;

type FieldPaths<
	T,
	U = Omit<T, "_avg" | "_sum" | "_count" | "_min" | "_max">,
> = IsObject<T> extends True ? U : T;

export type GetHavingFields<T> = {
	[K in keyof T]: Or<
		Or<Extends<"OR", K>, Extends<"AND", K>>,
		Extends<"NOT", K>
	> extends True
		? // infer is only needed to not hit TS limit
			// based on the brilliant idea of Pierre-Antoine Mills
			// https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
			T[K] extends infer TK
			? GetHavingFields<
					UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never
				>
			: never
		: {} extends FieldPaths<T[K]>
			? never
			: K;
}[keyof T];

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<
	T,
	K extends Enumerable<keyof T> | keyof T,
> = Prisma__Pick<T, MaybeTupleToUnion<K>>;

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}`
	? never
	: T;

export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>;

type FieldRefInputType<Model, FieldType> = Model extends never
	? never
	: FieldRef<Model, FieldType>;

export const ModelName = {
	User: "User",
	Session: "Session",
	Account: "Account",
	Verification: "Verification",
	Zap: "Zap",
	ZapTrigger: "ZapTrigger",
	ZapAction: "ZapAction",
	Action: "Action",
	Trigger: "Trigger",
	ZapRun: "ZapRun",
	ZapRunOutbox: "ZapRunOutbox",
} as const;

export type ModelName = (typeof ModelName)[keyof typeof ModelName];

export interface TypeMapCb<ClientOptions = {}>
	extends runtime.Types.Utils.Fn<
		{ extArgs: runtime.Types.Extensions.InternalArgs },
		runtime.Types.Utils.Record<string, any>
	> {
	returns: TypeMap<
		this["params"]["extArgs"],
		ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}
	>;
}

export type TypeMap<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> = {
	globalOmitOptions: {
		omit: GlobalOmitOptions;
	};
	meta: {
		modelProps:
			| "user"
			| "session"
			| "account"
			| "verification"
			| "zap"
			| "zapTrigger"
			| "zapAction"
			| "action"
			| "trigger"
			| "zapRun"
			| "zapRunOutbox";
		txIsolationLevel: TransactionIsolationLevel;
	};
	model: {
		User: {
			payload: Prisma.$UserPayload<ExtArgs>;
			fields: Prisma.UserFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.UserFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
				};
				findFirst: {
					args: Prisma.UserFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
				};
				findMany: {
					args: Prisma.UserFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
				};
				create: {
					args: Prisma.UserCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
				};
				createMany: {
					args: Prisma.UserCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				createManyAndReturn: {
					args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
				};
				delete: {
					args: Prisma.UserDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
				};
				update: {
					args: Prisma.UserUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
				};
				deleteMany: {
					args: Prisma.UserDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.UserUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateManyAndReturn: {
					args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
				};
				upsert: {
					args: Prisma.UserUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
				};
				aggregate: {
					args: Prisma.UserAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateUser>;
				};
				groupBy: {
					args: Prisma.UserGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[];
				};
				count: {
					args: Prisma.UserCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType>
						| number;
				};
			};
		};
		Session: {
			payload: Prisma.$SessionPayload<ExtArgs>;
			fields: Prisma.SessionFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.SessionFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
				};
				findFirst: {
					args: Prisma.SessionFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
				};
				findMany: {
					args: Prisma.SessionFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[];
				};
				create: {
					args: Prisma.SessionCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
				};
				createMany: {
					args: Prisma.SessionCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				createManyAndReturn: {
					args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[];
				};
				delete: {
					args: Prisma.SessionDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
				};
				update: {
					args: Prisma.SessionUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
				};
				deleteMany: {
					args: Prisma.SessionDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.SessionUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateManyAndReturn: {
					args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[];
				};
				upsert: {
					args: Prisma.SessionUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
				};
				aggregate: {
					args: Prisma.SessionAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateSession>;
				};
				groupBy: {
					args: Prisma.SessionGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.SessionGroupByOutputType>[];
				};
				count: {
					args: Prisma.SessionCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.SessionCountAggregateOutputType>
						| number;
				};
			};
		};
		Account: {
			payload: Prisma.$AccountPayload<ExtArgs>;
			fields: Prisma.AccountFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.AccountFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
				};
				findFirst: {
					args: Prisma.AccountFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
				};
				findMany: {
					args: Prisma.AccountFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
				};
				create: {
					args: Prisma.AccountCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
				};
				createMany: {
					args: Prisma.AccountCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				createManyAndReturn: {
					args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
				};
				delete: {
					args: Prisma.AccountDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
				};
				update: {
					args: Prisma.AccountUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
				};
				deleteMany: {
					args: Prisma.AccountDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.AccountUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateManyAndReturn: {
					args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
				};
				upsert: {
					args: Prisma.AccountUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
				};
				aggregate: {
					args: Prisma.AccountAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateAccount>;
				};
				groupBy: {
					args: Prisma.AccountGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AccountGroupByOutputType>[];
				};
				count: {
					args: Prisma.AccountCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.AccountCountAggregateOutputType>
						| number;
				};
			};
		};
		Verification: {
			payload: Prisma.$VerificationPayload<ExtArgs>;
			fields: Prisma.VerificationFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.VerificationFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>;
				};
				findFirst: {
					args: Prisma.VerificationFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>;
				};
				findMany: {
					args: Prisma.VerificationFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>[];
				};
				create: {
					args: Prisma.VerificationCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>;
				};
				createMany: {
					args: Prisma.VerificationCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				createManyAndReturn: {
					args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>[];
				};
				delete: {
					args: Prisma.VerificationDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>;
				};
				update: {
					args: Prisma.VerificationUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>;
				};
				deleteMany: {
					args: Prisma.VerificationDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.VerificationUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateManyAndReturn: {
					args: Prisma.VerificationUpdateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>[];
				};
				upsert: {
					args: Prisma.VerificationUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>;
				};
				aggregate: {
					args: Prisma.VerificationAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateVerification>;
				};
				groupBy: {
					args: Prisma.VerificationGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.VerificationGroupByOutputType>[];
				};
				count: {
					args: Prisma.VerificationCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.VerificationCountAggregateOutputType>
						| number;
				};
			};
		};
		Zap: {
			payload: Prisma.$ZapPayload<ExtArgs>;
			fields: Prisma.ZapFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.ZapFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.ZapFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapPayload>;
				};
				findFirst: {
					args: Prisma.ZapFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.ZapFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapPayload>;
				};
				findMany: {
					args: Prisma.ZapFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapPayload>[];
				};
				create: {
					args: Prisma.ZapCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapPayload>;
				};
				createMany: {
					args: Prisma.ZapCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				createManyAndReturn: {
					args: Prisma.ZapCreateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapPayload>[];
				};
				delete: {
					args: Prisma.ZapDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapPayload>;
				};
				update: {
					args: Prisma.ZapUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapPayload>;
				};
				deleteMany: {
					args: Prisma.ZapDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.ZapUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateManyAndReturn: {
					args: Prisma.ZapUpdateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapPayload>[];
				};
				upsert: {
					args: Prisma.ZapUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapPayload>;
				};
				aggregate: {
					args: Prisma.ZapAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateZap>;
				};
				groupBy: {
					args: Prisma.ZapGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.ZapGroupByOutputType>[];
				};
				count: {
					args: Prisma.ZapCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.ZapCountAggregateOutputType>
						| number;
				};
			};
		};
		ZapTrigger: {
			payload: Prisma.$ZapTriggerPayload<ExtArgs>;
			fields: Prisma.ZapTriggerFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.ZapTriggerFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapTriggerPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.ZapTriggerFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapTriggerPayload>;
				};
				findFirst: {
					args: Prisma.ZapTriggerFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapTriggerPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.ZapTriggerFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapTriggerPayload>;
				};
				findMany: {
					args: Prisma.ZapTriggerFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapTriggerPayload>[];
				};
				create: {
					args: Prisma.ZapTriggerCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapTriggerPayload>;
				};
				createMany: {
					args: Prisma.ZapTriggerCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				createManyAndReturn: {
					args: Prisma.ZapTriggerCreateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapTriggerPayload>[];
				};
				delete: {
					args: Prisma.ZapTriggerDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapTriggerPayload>;
				};
				update: {
					args: Prisma.ZapTriggerUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapTriggerPayload>;
				};
				deleteMany: {
					args: Prisma.ZapTriggerDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.ZapTriggerUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateManyAndReturn: {
					args: Prisma.ZapTriggerUpdateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapTriggerPayload>[];
				};
				upsert: {
					args: Prisma.ZapTriggerUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapTriggerPayload>;
				};
				aggregate: {
					args: Prisma.ZapTriggerAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateZapTrigger>;
				};
				groupBy: {
					args: Prisma.ZapTriggerGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.ZapTriggerGroupByOutputType>[];
				};
				count: {
					args: Prisma.ZapTriggerCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.ZapTriggerCountAggregateOutputType>
						| number;
				};
			};
		};
		ZapAction: {
			payload: Prisma.$ZapActionPayload<ExtArgs>;
			fields: Prisma.ZapActionFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.ZapActionFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapActionPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.ZapActionFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapActionPayload>;
				};
				findFirst: {
					args: Prisma.ZapActionFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapActionPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.ZapActionFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapActionPayload>;
				};
				findMany: {
					args: Prisma.ZapActionFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapActionPayload>[];
				};
				create: {
					args: Prisma.ZapActionCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapActionPayload>;
				};
				createMany: {
					args: Prisma.ZapActionCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				createManyAndReturn: {
					args: Prisma.ZapActionCreateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapActionPayload>[];
				};
				delete: {
					args: Prisma.ZapActionDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapActionPayload>;
				};
				update: {
					args: Prisma.ZapActionUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapActionPayload>;
				};
				deleteMany: {
					args: Prisma.ZapActionDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.ZapActionUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateManyAndReturn: {
					args: Prisma.ZapActionUpdateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapActionPayload>[];
				};
				upsert: {
					args: Prisma.ZapActionUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapActionPayload>;
				};
				aggregate: {
					args: Prisma.ZapActionAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateZapAction>;
				};
				groupBy: {
					args: Prisma.ZapActionGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.ZapActionGroupByOutputType>[];
				};
				count: {
					args: Prisma.ZapActionCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.ZapActionCountAggregateOutputType>
						| number;
				};
			};
		};
		Action: {
			payload: Prisma.$ActionPayload<ExtArgs>;
			fields: Prisma.ActionFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.ActionFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ActionPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.ActionFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ActionPayload>;
				};
				findFirst: {
					args: Prisma.ActionFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ActionPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.ActionFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ActionPayload>;
				};
				findMany: {
					args: Prisma.ActionFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ActionPayload>[];
				};
				create: {
					args: Prisma.ActionCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ActionPayload>;
				};
				createMany: {
					args: Prisma.ActionCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				createManyAndReturn: {
					args: Prisma.ActionCreateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ActionPayload>[];
				};
				delete: {
					args: Prisma.ActionDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ActionPayload>;
				};
				update: {
					args: Prisma.ActionUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ActionPayload>;
				};
				deleteMany: {
					args: Prisma.ActionDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.ActionUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateManyAndReturn: {
					args: Prisma.ActionUpdateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ActionPayload>[];
				};
				upsert: {
					args: Prisma.ActionUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ActionPayload>;
				};
				aggregate: {
					args: Prisma.ActionAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateAction>;
				};
				groupBy: {
					args: Prisma.ActionGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.ActionGroupByOutputType>[];
				};
				count: {
					args: Prisma.ActionCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.ActionCountAggregateOutputType>
						| number;
				};
			};
		};
		Trigger: {
			payload: Prisma.$TriggerPayload<ExtArgs>;
			fields: Prisma.TriggerFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.TriggerFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TriggerPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.TriggerFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TriggerPayload>;
				};
				findFirst: {
					args: Prisma.TriggerFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TriggerPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.TriggerFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TriggerPayload>;
				};
				findMany: {
					args: Prisma.TriggerFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TriggerPayload>[];
				};
				create: {
					args: Prisma.TriggerCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TriggerPayload>;
				};
				createMany: {
					args: Prisma.TriggerCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				createManyAndReturn: {
					args: Prisma.TriggerCreateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TriggerPayload>[];
				};
				delete: {
					args: Prisma.TriggerDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TriggerPayload>;
				};
				update: {
					args: Prisma.TriggerUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TriggerPayload>;
				};
				deleteMany: {
					args: Prisma.TriggerDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.TriggerUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateManyAndReturn: {
					args: Prisma.TriggerUpdateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TriggerPayload>[];
				};
				upsert: {
					args: Prisma.TriggerUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TriggerPayload>;
				};
				aggregate: {
					args: Prisma.TriggerAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateTrigger>;
				};
				groupBy: {
					args: Prisma.TriggerGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.TriggerGroupByOutputType>[];
				};
				count: {
					args: Prisma.TriggerCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.TriggerCountAggregateOutputType>
						| number;
				};
			};
		};
		ZapRun: {
			payload: Prisma.$ZapRunPayload<ExtArgs>;
			fields: Prisma.ZapRunFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.ZapRunFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.ZapRunFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunPayload>;
				};
				findFirst: {
					args: Prisma.ZapRunFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.ZapRunFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunPayload>;
				};
				findMany: {
					args: Prisma.ZapRunFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunPayload>[];
				};
				create: {
					args: Prisma.ZapRunCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunPayload>;
				};
				createMany: {
					args: Prisma.ZapRunCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				createManyAndReturn: {
					args: Prisma.ZapRunCreateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunPayload>[];
				};
				delete: {
					args: Prisma.ZapRunDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunPayload>;
				};
				update: {
					args: Prisma.ZapRunUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunPayload>;
				};
				deleteMany: {
					args: Prisma.ZapRunDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.ZapRunUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateManyAndReturn: {
					args: Prisma.ZapRunUpdateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunPayload>[];
				};
				upsert: {
					args: Prisma.ZapRunUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunPayload>;
				};
				aggregate: {
					args: Prisma.ZapRunAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateZapRun>;
				};
				groupBy: {
					args: Prisma.ZapRunGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.ZapRunGroupByOutputType>[];
				};
				count: {
					args: Prisma.ZapRunCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.ZapRunCountAggregateOutputType>
						| number;
				};
			};
		};
		ZapRunOutbox: {
			payload: Prisma.$ZapRunOutboxPayload<ExtArgs>;
			fields: Prisma.ZapRunOutboxFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.ZapRunOutboxFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunOutboxPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.ZapRunOutboxFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunOutboxPayload>;
				};
				findFirst: {
					args: Prisma.ZapRunOutboxFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunOutboxPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.ZapRunOutboxFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunOutboxPayload>;
				};
				findMany: {
					args: Prisma.ZapRunOutboxFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunOutboxPayload>[];
				};
				create: {
					args: Prisma.ZapRunOutboxCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunOutboxPayload>;
				};
				createMany: {
					args: Prisma.ZapRunOutboxCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				createManyAndReturn: {
					args: Prisma.ZapRunOutboxCreateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunOutboxPayload>[];
				};
				delete: {
					args: Prisma.ZapRunOutboxDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunOutboxPayload>;
				};
				update: {
					args: Prisma.ZapRunOutboxUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunOutboxPayload>;
				};
				deleteMany: {
					args: Prisma.ZapRunOutboxDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.ZapRunOutboxUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateManyAndReturn: {
					args: Prisma.ZapRunOutboxUpdateManyAndReturnArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunOutboxPayload>[];
				};
				upsert: {
					args: Prisma.ZapRunOutboxUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ZapRunOutboxPayload>;
				};
				aggregate: {
					args: Prisma.ZapRunOutboxAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateZapRunOutbox>;
				};
				groupBy: {
					args: Prisma.ZapRunOutboxGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.ZapRunOutboxGroupByOutputType>[];
				};
				count: {
					args: Prisma.ZapRunOutboxCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.ZapRunOutboxCountAggregateOutputType>
						| number;
				};
			};
		};
	};
} & {
	other: {
		payload: any;
		operations: {
			$executeRaw: {
				args: [query: TemplateStringsArray | Sql, ...values: any[]];
				result: any;
			};
			$executeRawUnsafe: {
				args: [query: string, ...values: any[]];
				result: any;
			};
			$queryRaw: {
				args: [query: TemplateStringsArray | Sql, ...values: any[]];
				result: any;
			};
			$queryRawUnsafe: {
				args: [query: string, ...values: any[]];
				result: any;
			};
		};
	};
};

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
	ReadUncommitted: "ReadUncommitted",
	ReadCommitted: "ReadCommitted",
	RepeatableRead: "RepeatableRead",
	Serializable: "Serializable",
} as const);

export type TransactionIsolationLevel =
	(typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel];

export const UserScalarFieldEnum = {
	id: "id",
	name: "name",
	email: "email",
	emailVerified: "emailVerified",
	image: "image",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
} as const;

export type UserScalarFieldEnum =
	(typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum];

export const SessionScalarFieldEnum = {
	id: "id",
	expiresAt: "expiresAt",
	token: "token",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
	ipAddress: "ipAddress",
	userAgent: "userAgent",
	userId: "userId",
} as const;

export type SessionScalarFieldEnum =
	(typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum];

export const AccountScalarFieldEnum = {
	id: "id",
	accountId: "accountId",
	providerId: "providerId",
	userId: "userId",
	accessToken: "accessToken",
	refreshToken: "refreshToken",
	idToken: "idToken",
	accessTokenExpiresAt: "accessTokenExpiresAt",
	refreshTokenExpiresAt: "refreshTokenExpiresAt",
	scope: "scope",
	password: "password",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
} as const;

export type AccountScalarFieldEnum =
	(typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum];

export const VerificationScalarFieldEnum = {
	id: "id",
	identifier: "identifier",
	value: "value",
	expiresAt: "expiresAt",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
} as const;

export type VerificationScalarFieldEnum =
	(typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum];

export const ZapScalarFieldEnum = {
	id: "id",
	name: "name",
	description: "description",
	userId: "userId",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
} as const;

export type ZapScalarFieldEnum =
	(typeof ZapScalarFieldEnum)[keyof typeof ZapScalarFieldEnum];

export const ZapTriggerScalarFieldEnum = {
	id: "id",
	metadata: "metadata",
	triggerId: "triggerId",
	zapId: "zapId",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
} as const;

export type ZapTriggerScalarFieldEnum =
	(typeof ZapTriggerScalarFieldEnum)[keyof typeof ZapTriggerScalarFieldEnum];

export const ZapActionScalarFieldEnum = {
	id: "id",
	metadata: "metadata",
	actionId: "actionId",
	zapId: "zapId",
	sortingOrder: "sortingOrder",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
} as const;

export type ZapActionScalarFieldEnum =
	(typeof ZapActionScalarFieldEnum)[keyof typeof ZapActionScalarFieldEnum];

export const ActionScalarFieldEnum = {
	id: "id",
	name: "name",
	description: "description",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
} as const;

export type ActionScalarFieldEnum =
	(typeof ActionScalarFieldEnum)[keyof typeof ActionScalarFieldEnum];

export const TriggerScalarFieldEnum = {
	id: "id",
	name: "name",
	description: "description",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
} as const;

export type TriggerScalarFieldEnum =
	(typeof TriggerScalarFieldEnum)[keyof typeof TriggerScalarFieldEnum];

export const ZapRunScalarFieldEnum = {
	id: "id",
	metadata: "metadata",
	zapId: "zapId",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
} as const;

export type ZapRunScalarFieldEnum =
	(typeof ZapRunScalarFieldEnum)[keyof typeof ZapRunScalarFieldEnum];

export const ZapRunOutboxScalarFieldEnum = {
	id: "id",
	zapRunId: "zapRunId",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
} as const;

export type ZapRunOutboxScalarFieldEnum =
	(typeof ZapRunOutboxScalarFieldEnum)[keyof typeof ZapRunOutboxScalarFieldEnum];

export const SortOrder = {
	asc: "asc",
	desc: "desc",
} as const;

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];

export const NullableJsonNullValueInput = {
	DbNull: DbNull,
	JsonNull: JsonNull,
} as const;

export type NullableJsonNullValueInput =
	(typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput];

export const QueryMode = {
	default: "default",
	insensitive: "insensitive",
} as const;

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode];

export const NullsOrder = {
	first: "first",
	last: "last",
} as const;

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder];

export const JsonNullValueFilter = {
	DbNull: DbNull,
	JsonNull: JsonNull,
	AnyNull: AnyNull,
} as const;

export type JsonNullValueFilter =
	(typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter];

/**
 * Field references
 */

/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"String"
>;

/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"String[]"
>;

/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"Boolean"
>;

/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"DateTime"
>;

/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"DateTime[]"
>;

/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"Json"
>;

/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"QueryMode"
>;

/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"Int"
>;

/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"Int[]"
>;

/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"Float"
>;

/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"Float[]"
>;

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
	count: number;
};

export type Datasource = {
	url?: string;
};
export type Datasources = {
	db?: Datasource;
};

export const defineExtension = runtime.Extensions
	.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<
	"define",
	TypeMapCb,
	runtime.Types.Extensions.DefaultArgs
>;
export type DefaultPrismaClient = PrismaClient;
export type ErrorFormat = "pretty" | "colorless" | "minimal";
export interface PrismaClientOptions {
	/**
	 * Overwrites the datasource url from your schema.prisma file
	 */
	datasources?: Datasources;
	/**
	 * Overwrites the datasource url from your schema.prisma file
	 */
	datasourceUrl?: string;
	/**
	 * @default "colorless"
	 */
	errorFormat?: ErrorFormat;
	/**
	 * @example
	 * ```
	 * // Defaults to stdout
	 * log: ['query', 'info', 'warn', 'error']
	 *
	 * // Emit as events
	 * log: [
	 *   { emit: 'stdout', level: 'query' },
	 *   { emit: 'stdout', level: 'info' },
	 *   { emit: 'stdout', level: 'warn' }
	 *   { emit: 'stdout', level: 'error' }
	 * ]
	 * ```
	 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
	 */
	log?: (LogLevel | LogDefinition)[];
	/**
	 * The default values for transactionOptions
	 * maxWait ?= 2000
	 * timeout ?= 5000
	 */
	transactionOptions?: {
		maxWait?: number;
		timeout?: number;
		isolationLevel?: TransactionIsolationLevel;
	};
	/**
	 * Global configuration for omitting model fields by default.
	 *
	 * @example
	 * ```
	 * const prisma = new PrismaClient({
	 *   omit: {
	 *     user: {
	 *       password: true
	 *     }
	 *   }
	 * })
	 * ```
	 */
	omit?: GlobalOmitConfig;
}
export type GlobalOmitConfig = {
	user?: Prisma.UserOmit;
	session?: Prisma.SessionOmit;
	account?: Prisma.AccountOmit;
	verification?: Prisma.VerificationOmit;
	zap?: Prisma.ZapOmit;
	zapTrigger?: Prisma.ZapTriggerOmit;
	zapAction?: Prisma.ZapActionOmit;
	action?: Prisma.ActionOmit;
	trigger?: Prisma.TriggerOmit;
	zapRun?: Prisma.ZapRunOmit;
	zapRunOutbox?: Prisma.ZapRunOutboxOmit;
};

/* Types for Logging */
export type LogLevel = "info" | "query" | "warn" | "error";
export type LogDefinition = {
	level: LogLevel;
	emit: "stdout" | "event";
};

export type GetLogType<T extends LogLevel | LogDefinition> =
	T extends LogDefinition
		? T["emit"] extends "event"
			? T["level"]
			: never
		: never;
export type GetEvents<T> = T extends Array<LogLevel | LogDefinition>
	? GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
	: never;

export type QueryEvent = {
	timestamp: Date;
	query: string;
	params: string;
	duration: number;
	target: string;
};

export type LogEvent = {
	timestamp: Date;
	message: string;
	target: string;
};
/* End Types for Logging */

export type PrismaAction =
	| "findUnique"
	| "findUniqueOrThrow"
	| "findMany"
	| "findFirst"
	| "findFirstOrThrow"
	| "create"
	| "createMany"
	| "createManyAndReturn"
	| "update"
	| "updateMany"
	| "updateManyAndReturn"
	| "upsert"
	| "delete"
	| "deleteMany"
	| "executeRaw"
	| "queryRaw"
	| "aggregate"
	| "count"
	| "runCommandRaw"
	| "findRaw"
	| "groupBy";

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
	model?: ModelName;
	action: PrismaAction;
	args: any;
	dataPath: string[];
	runInTransaction: boolean;
};

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
	params: MiddlewareParams,
	next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>;

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<
	DefaultPrismaClient,
	runtime.ITXClientDenyList
>;
